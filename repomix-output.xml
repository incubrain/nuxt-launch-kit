<directory_structure>
.github/
  dependabot.yml
app/
  assets/
    css/
      main.css
      motion.css
  components/
    blog/
      article/
        ArticleAuthorBio.vue
        ArticleHeader.vue
        ArticleTableOfContents.vue
      BlogContent.vue
      BlogPostCard.vue
      BlogPostCardSkeleton.vue
    card/
      CTA.vue
      Skill.vue
      Stats.vue
      Testimonial.vue
    content/
      Alert.vue
      Carousel.vue
      MermaidDiagram.vue
      ProseA.vue
      ProseBlockquote.vue
      ProseCode.vue
      ProseEm.vue
      ProseH1.vue
      ProseH2.vue
      ProseH3.vue
      ProseH4.vue
      ProseH5.vue
      ProseH6.vue
      ProseHr.vue
      ProseImg.vue
      ProseLi.vue
      ProseOl.vue
      ProseP.vue
      ProsePre.vue
      ProseStrong.vue
      ProseTable.vue
      ProseUl.vue
      Related.vue
    layout/
      Background.vue
      Center.vue
      Cluster.vue
      Container.vue
      Divider.vue
      Frame.vue
      Grid.vue
      Heading.vue
      Motion.vue
      Section.vue
      Sidebar.vue
      Spacer.vue
      Split.vue
      Stack.vue
      Text.vue
      Wrapper.vue
    media/
      Image.vue
      Video.vue
    nav/
      Anchor.vue
      Footer.vue
      Header.vue
      Mobile.vue
      Pagination.vue
      Search.vue
      Surroundings.vue
    section/
      About.vue
      Authority.vue
      Cta.vue
      Faq.vue
      Hero.vue
      Results.vue
      Trust.vue
      Work.vue
    Header.vue
    Logo.vue
    SocialShare.vue
    Title.vue
  composables/
    useSeoDefaults.ts
  layouts/
    blog.vue
    default.vue
  pages/
    blog/
      [category]/
        [slug].vue
        index.vue
      index.vue
    showcase/
      hero.vue
    index.vue
  plugins/
    mermaid.client.ts
  app.vue
content/
  blog/
    blog-examples/
      block-example.md
      carousel-mdc.md
      mcd-components.md
      mermaid-diagrams.md
      test-article-1.md
      test-article-10.md
      test-article-11.md
      test-article-2.md
      test-article-3.md
      test-article-4.md
      test-article-5.md
      test-article-6.md
      test-article-7.md
      test-article-8.md
      test-article-9.md
  config/
    business.yml
  faq/
    general.yaml
    product.yaml
  pages/
    index.md
  seo/
    schemas/
      organization.yml
      person.yml
      services.yml
    config.yml
server/
  api/
    __sitemap__/
      urls.ts
    blog/
      metadata.ts
    content/
      metadata.ts
  tsconfig.json
shared/
  types/
    website-intent.ts
  utils/
    blog.ts
    load-config.ts
    page-search.ts
    pagination.ts
    theme.ts
    website-intention.ts
  config.ts
theme/
  layout/
    background.ts
    center.ts
    cluster.ts
    container.ts
    divider.ts
    frame.ts
    grid.ts
    section.ts
    spacer.ts
    split.ts
    stack.ts
  section/
    hero.ts
  anchor.ts
  cta.ts
  heading.ts
  image.ts
  text.ts
  video.ts
.editorconfig
.gitignore
.npmrc
app.config.ts
content.config.ts
eslint.config.mjs
nuxt.config.ts
package.json
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/dependabot.yml">
# To get started with Dependabot version updates, you'll need to specify which
# package ecosystems to update and where the package manifests are located.
# Please see the documentation for all configuration options:
# https://docs.github.com/github/administering-a-repository/configuration-options-for-dependency-updates

version: 2
updates:
  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "weekly"
</file>

<file path="app/assets/css/main.css">
/* assets/css/main.css - CORRECTED TAILWIND V4 SYNTAX */
@import 'tailwindcss';
@import '@nuxt/ui';

@theme {
  /* ========================================
     GITHUB DARK THEME COLORS
     ======================================== */

  /* Our brand emerald (keep existing) */
  --color-emerald-50: #ecfdf5;
  --color-emerald-100: #d1fae5;
  --color-emerald-200: #a7f3d0;
  --color-emerald-300: #6ee7b7;
  --color-emerald-400: #34d399;
  --color-emerald-500: #10b981;
  --color-emerald-600: #059669;
  --color-emerald-700: #047857;
  --color-emerald-800: #065f46;
  --color-emerald-900: #064e3b;
  --color-emerald-950: #022c22;

  /* GitHub dark theme zinc overrides */
  --color-zinc-50: #fafafa;
  --color-zinc-100: #f4f4f5;
  --color-zinc-200: #e4e4e7;
  --color-zinc-300: #d4d4d8;
  --color-zinc-400: #a1a1aa;
  --color-zinc-500: #71717a;
  --color-zinc-600: #52525b;
  --color-zinc-700: #3f3f46;
  --color-zinc-800: #27272a;
  --color-zinc-900: #18181b;
  --color-zinc-950: #09090b;

  --gradient-neural-from: var(--color-emerald-950);
  --gradient-neural-via: var(--color-blue-950);
  --gradient-neural-to: var(--color-purple-950);

  --gradient-quantum-from: var(--color-emerald-900);
  --gradient-quantum-via: var(--ui-bg-elevated);
  --gradient-quantum-to: var(--color-blue-950);

  --gradient-cyber-center: var(--color-emerald-500);
  --gradient-cyber-mid: var(--color-blue-500);

  /* Custom typography (can't reproduce in Nuxt UI) */
  --font-heading: 'Orbitron', sans-serif;
  --font-mono: 'JetBrains Mono', monospace;

  /* ========================================
     RESPONSIVE BREAKPOINTS (Tailwind CSS)
     ======================================== */
  --breakpoint-sm: 640px;
  --breakpoint-md: 768px;
  --breakpoint-lg: 1024px;
  --breakpoint-xl: 1280px;
  --breakpoint-2xl: 1536px;
}

/* ========================================
   NUXT UI GITHUB DARK THEME INTEGRATION
   ======================================== */

:root {
  /* GitHub Dark Background System */
  --ui-bg: #0d1117; /* GitHub main background */
  --ui-bg-muted: #010409; /* Darker background */
  --ui-bg-elevated: #161b22; /* GitHub foreground (cards/sidebar) */
  --ui-bg-accented: #21262d; /* Hover/interactive states */
  --ui-bg-inverted: #f0f6fc; /* Light mode fallback */

  /* GitHub Dark Text System */
  --ui-text-dimmed: #7d8590; /* GitHub text-tertiary */
  --ui-text-muted: #8b949e; /* GitHub text-secondary */
  --ui-text-toned: #c9d1d9; /* GitHub text-primary dimmed */
  --ui-text: #f0f6fc; /* GitHub text-primary */
  --ui-text-highlighted: #ffffff; /* Pure white for emphasis */
  --ui-text-inverted: #24292f; /* Dark text for light backgrounds */

  --ui-link-default: var(--ui-secondary);
  --ui-link-hover: var(--color-blue-400);
  --ui-link-active: var(--ui-secondary);

  /* GitHub Dark Border System */
  --ui-border: #30363d; /* GitHub border-default */
  --ui-border-muted: #21262d; /* GitHub border-muted */
  --ui-border-accented: var(--ui-border); /* GitHub border-danger for accents */
  --ui-border-inverted: #d0d7de; /* Light mode borders */

  /* Brand colors as Nuxt UI primary/secondary */
  --ui-primary: var(--color-emerald-500);
  --ui-secondary: var(--color-sky-800);

  /* Radius and container (existing) */
  --ui-radius: 0.375rem; /* 6px - GitHub's standard radius */
  --ui-container: 80rem; /* 1280px max width */
  --ui-nav-height: 4rem; /* 64px - Standard navigation height */

  /* ========================================
     COMPREHENSIVE SPACING SYSTEM
     ======================================== */

  /* Base Spacing Values (Template Customizable) */
  --ui-spacing-section-base: 4rem; /* 64px - Main section spacing */
  --ui-spacing-component-base: 1.5rem; /* 24px - Component internal spacing */
  --ui-spacing-grid-base: 1.5rem; /* 24px - Grid gaps */
  --ui-spacing-content-base: 1rem; /* 16px - Content flow spacing */

  /* Responsive Multipliers */
  --ui-spacing-mobile-factor: 0.625; /* 62.5% for mobile (tighter) */
  --ui-spacing-tablet-factor: 0.875; /* 87.5% for tablet */
  --ui-spacing-desktop-factor: 1.125; /* 112.5% for desktop (more spacious) */
  --ui-spacing-xl-factor: 1.25; /* 125% for extra large screens */

  /* Computed Responsive Values */
  --ui-spacing-section: calc(var(--ui-spacing-section-base) * var(--ui-spacing-mobile-factor));
  --ui-spacing-component: calc(var(--ui-spacing-component-base) * var(--ui-spacing-mobile-factor));
  --ui-spacing-grid: calc(var(--ui-spacing-grid-base) * var(--ui-spacing-mobile-factor));
  --ui-spacing-content: calc(var(--ui-spacing-content-base) * var(--ui-spacing-mobile-factor));

  /* NUXT CHARTS */

  /* Primary chart colors using your emerald/blue system */
  --vis-color0: var(--color-emerald-500) !important; /* Growth/positive */
  --vis-color1: var(--color-blue-500) !important; /* Secondary */
  --vis-color2: var(--color-red-500) !important; /* Decline/negative */
  --vis-color3: var(--color-amber-500) !important; /* Warning/neutral */

  /* Background system matching GitHub Dark */
  --vis-tooltip-background-color: var(--ui-bg-elevated) !important; /* #161b22 */
  --vis-tooltip-border-color: var(--ui-border) !important; /* #30363d */

  /* Text hierarchy matching your system */
  --vis-tooltip-text-color: var(--ui-text-toned) !important; /* #c9d1d9 */
  --tooltip-label-color: var(--ui-text-muted) !important; /* #8b949e */
  --tooltip-value-color: var(--ui-text-highlighted) !important; /* #ffffff */

  /* Axis styling */
  --vis-axis-grid-color: var(--ui-border-muted) !important; /* #21262d */
  --vis-axis-tick-label-color: var(--ui-text-muted) !important; /* #8b949e */
  --vis-axis-label-color: var(--ui-text-toned) !important; /* #c9d1d9 */

  /* Legend styling */
  --vis-legend-label-color: var(--ui-text-toned) !important;
}

/* ========================================
   RESPONSIVE SPACING OVERRIDES
   ======================================== */

/* Tablet (768px+) */
@media (min-width: 768px) {
  :root {
    --ui-spacing-section: calc(var(--ui-spacing-section-base) * var(--ui-spacing-tablet-factor));
    --ui-spacing-component: calc(
      var(--ui-spacing-component-base) * var(--ui-spacing-tablet-factor)
    );
    --ui-spacing-grid: calc(var(--ui-spacing-grid-base) * var(--ui-spacing-tablet-factor));
    --ui-spacing-content: calc(var(--ui-spacing-content-base) * var(--ui-spacing-tablet-factor));
  }
}

/* Desktop (1024px+) */
@media (min-width: 1024px) {
  :root {
    --ui-spacing-section: calc(var(--ui-spacing-section-base) * var(--ui-spacing-desktop-factor));
    --ui-spacing-component: calc(
      var(--ui-spacing-component-base) * var(--ui-spacing-desktop-factor)
    );
    --ui-spacing-grid: calc(var(--ui-spacing-grid-base) * var(--ui-spacing-desktop-factor));
    --ui-spacing-content: calc(var(--ui-spacing-content-base) * var(--ui-spacing-desktop-factor));
  }
}

/* Extra Large (1280px+) */
@media (min-width: 1280px) {
  :root {
    --ui-spacing-section: calc(var(--ui-spacing-section-base) * var(--ui-spacing-xl-factor));
    --ui-spacing-component: calc(var(--ui-spacing-component-base) * var(--ui-spacing-xl-factor));
    --ui-spacing-grid: calc(var(--ui-spacing-grid-base) * var(--ui-spacing-xl-factor));
    --ui-spacing-content: calc(var(--ui-spacing-content-base) * var(--ui-spacing-xl-factor));
  }
}

/* ========================================
   SEMANTIC SPACING UTILITIES (SIMPLE)
   ======================================== */

/* Section Spacing - For main page sections */
@utility section-spacing {
  padding-block: var(--ui-spacing-section);
}

@utility section-spacing-compact {
  padding-block: calc(var(--ui-spacing-section) * 0.75);
}

@utility section-spacing-generous {
  padding-block: calc(var(--ui-spacing-section) * 1.5);
}

/* Component Spacing - For internal component spacing */
@utility component-spacing {
  gap: var(--ui-spacing-component);
}

@utility component-spacing-sm {
  gap: calc(var(--ui-spacing-component) * 0.75);
}

@utility component-spacing-lg {
  gap: calc(var(--ui-spacing-component) * 1.25);
}

/* Grid Spacing - For grid layouts */
@utility grid-spacing {
  gap: var(--ui-spacing-grid);
}

@utility grid-spacing-sm {
  gap: calc(var(--ui-spacing-grid) * 0.75);
}

@utility grid-spacing-lg {
  gap: calc(var(--ui-spacing-grid) * 1.25);
}

/* Content Flow Spacing - For text content */
@utility content-spacing {
  gap: var(--ui-spacing-content);
}

/* Margin Utilities */
@utility mt-section {
  margin-top: var(--ui-spacing-section);
}
@utility mb-section {
  margin-bottom: var(--ui-spacing-section);
}
@utility my-section {
  margin-block: var(--ui-spacing-section);
}

@utility mt-component {
  margin-top: var(--ui-spacing-component);
}
@utility mb-component {
  margin-bottom: var(--ui-spacing-component);
}
@utility my-component {
  margin-block: var(--ui-spacing-component);
}

/* Padding Utilities */
@utility pt-section {
  padding-top: var(--ui-spacing-section);
}
@utility pb-section {
  padding-bottom: var(--ui-spacing-section);
}
@utility py-section {
  padding-block: var(--ui-spacing-section);
}

@utility p-component {
  padding: var(--ui-spacing-component);
}
@utility px-component {
  padding-inline: var(--ui-spacing-component);
}
@utility py-component {
  padding-block: var(--ui-spacing-component);
}

/* ========================================
   COMPLEX SELECTORS (USE @layer utilities)
   ======================================== */

@layer utilities {
  .space-y-section > * + * {
    margin-top: var(--ui-spacing-section);
  }

  .space-y-component > * + * {
    margin-top: var(--ui-spacing-component);
  }

  .space-y-content > * + * {
    margin-top: var(--ui-spacing-content);
  }

  .ai-circuit-pattern {
    background-color: var(--ui-bg);
    background-image:
      radial-gradient(circle at 20px 20px, rgba(16, 185, 129, 0.1) 1px, transparent 1px),
      radial-gradient(circle at 40px 40px, rgba(16, 185, 129, 0.05) 1px, transparent 1px),
      linear-gradient(rgba(16, 185, 129, 0.03) 1px, transparent 1px),
      linear-gradient(90deg, rgba(16, 185, 129, 0.03) 1px, transparent 1px);
    background-size:
      40px 40px,
      80px 80px,
      20px 20px,
      20px 20px;
  }

  .ai-circuit-light {
    background-image:
      radial-gradient(circle at 20px 20px, rgba(16, 185, 129, 0.05) 1px, transparent 1px),
      radial-gradient(circle at 40px 40px, rgba(16, 185, 129, 0.025) 1px, transparent 1px),
      linear-gradient(rgba(16, 185, 129, 0.015) 1px, transparent 1px),
      linear-gradient(90deg, rgba(16, 185, 129, 0.015) 1px, transparent 1px);
  }

  .ai-circuit-strong {
    background-image:
      radial-gradient(circle at 20px 20px, rgba(16, 185, 129, 0.15) 1px, transparent 1px),
      radial-gradient(circle at 40px 40px, rgba(16, 185, 129, 0.08) 1px, transparent 1px),
      linear-gradient(rgba(16, 185, 129, 0.05) 1px, transparent 1px),
      linear-gradient(90deg, rgba(16, 185, 129, 0.05) 1px, transparent 1px);
  }

  .ai-dots-pattern {
    background-image: radial-gradient(circle, rgba(16, 185, 129, 0.1) 1px, transparent 1px);
    background-size: 15px 15px;
  }

  .ai-grid-pattern {
    background-image:
      linear-gradient(rgba(16, 185, 129, 0.03) 1px, transparent 1px),
      linear-gradient(90deg, rgba(16, 185, 129, 0.03) 1px, transparent 1px);
    background-size: 20px 20px;
  }

  .neural-network-pattern {
    background-image:
      radial-gradient(
        circle at 25% 25%,
        color-mix(in srgb, var(--ui-primary) 10%, transparent) 2px,
        transparent 2px
      ),
      radial-gradient(
        circle at 75% 75%,
        color-mix(in srgb, var(--ui-secondary) 8%, transparent) 2px,
        transparent 2px
      ),
      linear-gradient(
        45deg,
        transparent 48%,
        color-mix(in srgb, var(--ui-primary) 3%, transparent) 50%,
        transparent 52%
      );
    background-size:
      60px 60px,
      40px 40px,
      30px 30px;
  }

  .quantum-dots-pattern {
    background-image:
      radial-gradient(
        circle at 20% 80%,
        color-mix(in srgb, var(--ui-primary) 8%, transparent) 1px,
        transparent 2px
      ),
      radial-gradient(
        circle at 80% 20%,
        color-mix(in srgb, var(--ui-secondary) 6%, transparent) 1px,
        transparent 2px
      );
    background-size:
      40px 40px,
      60px 60px;
  }

  .bg-gradient-neural {
    background: linear-gradient(
      135deg,
      color-mix(in srgb, var(--gradient-neural-from) 30%, transparent),
      color-mix(in srgb, var(--gradient-neural-via) 20%, transparent),
      color-mix(in srgb, var(--gradient-neural-to) 25%, transparent)
    );
  }

  .bg-gradient-quantum {
    background: linear-gradient(
      45deg,
      color-mix(in srgb, var(--gradient-quantum-from) 40%, transparent),
      color-mix(in srgb, var(--gradient-quantum-via) 10%, transparent),
      color-mix(in srgb, var(--gradient-quantum-to) 30%, transparent)
    );
  }

  .bg-gradient-cyber {
    background: radial-gradient(
      ellipse at center,
      color-mix(in srgb, var(--gradient-cyber-center) 10%, transparent),
      color-mix(in srgb, var(--gradient-cyber-mid) 5%, transparent),
      transparent 70%
    );
  }
}
</file>

<file path="app/assets/css/motion.css">
/* assets/css/motion.css - TAILWIND V4 COMPLIANT MOTION UTILITIES */

@theme {
  /* ========================================
       MOTION DESIGN TOKENS
       ======================================== */

  /* Hover effect variables */
  --hover-lift: translateY(-4px);
  --hover-scale: scale(1.02);
  --hover-glow: 0 10px 40px rgba(16, 185, 129, 0.15); /* emerald-500 with alpha */
  --hover-duration: 0.25s;
  --hover-easing: cubic-bezier(0.4, 0, 0.2, 1);

  /* Card-specific motion variables */
  --card-hover-lift: translateY(-2px);
  --card-hover-shadow: 0 8px 32px rgba(0, 0, 0, 0.12);
  --card-border-hover-rgb: 248, 81, 73; /* GitHub border-danger RGB */

  /* Animation timing functions */
  --ease-smooth: cubic-bezier(0.4, 0, 0.2, 1);
  --ease-bounce: cubic-bezier(0.68, -0.55, 0.265, 1.55);
  --ease-elastic: cubic-bezier(0.175, 0.885, 0.32, 1.275);

  /* Duration scales */
  --duration-fast: 150ms;
  --duration-normal: 250ms;
  --duration-slow: 350ms;
  --duration-slower: 500ms;
}

/* ========================================
     MOTION UTILITIES
     ======================================== */

@utility motion-card {
  transition-property: transform, box-shadow, border-color;
  transition-duration: var(--duration-normal);
  transition-timing-function: var(--ease-smooth);
}

@utility motion-card {
  @variant hover {
    transform: var(--card-hover-lift);
    box-shadow: var(--card-hover-shadow);
    border-color: rgba(var(--card-border-hover-rgb), 0.8);
  }
}

@utility hover-premium {
  transition-property: transform, box-shadow, filter;
  transition-duration: var(--duration-normal);
  transition-timing-function: var(--ease-smooth);
}

@utility hover-premium {
  @variant hover {
    transform: var(--hover-lift) var(--hover-scale);
    box-shadow: var(--hover-glow);
    filter: brightness(1.05);
  }
}

@utility hover-professional {
  transition-property: transform, border-color;
  transition-duration: var(--duration-normal);
  transition-timing-function: var(--ease-smooth);
}

@utility hover-professional {
  @variant hover {
    transform: translateY(-1px);
    border-color: var(--ui-border-accented);
  }
}

@utility hover-lift {
  transition-property: transform;
  transition-duration: var(--duration-fast);
  transition-timing-function: var(--ease-smooth);
}

@utility hover-lift {
  @variant hover {
    transform: var(--hover-lift);
  }
}

@utility hover-scale {
  transition-property: transform;
  transition-duration: var(--duration-fast);
  transition-timing-function: var(--ease-smooth);
}

@utility hover-scale {
  @variant hover {
    transform: var(--hover-scale);
  }
}

@utility hover-glow {
  transition-property: box-shadow;
  transition-duration: var(--duration-normal);
  transition-timing-function: var(--ease-smooth);
}

@utility hover-glow {
  @variant hover {
    box-shadow: var(--hover-glow);
  }
}

/* ========================================
     GRADIENT UTILITIES
     ======================================== */

@utility gradient-emerald-soft {
  background: linear-gradient(135deg, rgba(16, 185, 129, 0.08), rgba(16, 185, 129, 0.03));
}

@utility gradient-emerald-depth {
  background: linear-gradient(135deg, var(--color-emerald-500), var(--color-emerald-600));
}

@utility gradient-card-elevated {
  background: linear-gradient(135deg, var(--ui-bg-elevated), rgba(33, 38, 45, 0.8));
}

@utility gradient-tech-subtle {
  background: linear-gradient(135deg, rgba(59, 130, 246, 0.05), rgba(22, 27, 34, 0.9));
}

@utility gradient-radial-primary {
  background: radial-gradient(circle at 50% 0%, rgba(16, 185, 129, 0.1), transparent 60%);
}

@utility gradient-radial-depth {
  background: radial-gradient(circle at top, var(--ui-bg-elevated), var(--ui-bg-muted));
}

/* ========================================
     BACKDROP EFFECTS
     ======================================== */

@utility backdrop-card {
  backdrop-filter: blur(8px) saturate(150%);
  background: rgba(22, 27, 34, 0.7); /* ui-bg-elevated with alpha */
  border: 1px solid rgba(48, 54, 61, 0.3); /* ui-border with alpha */
  transition-property: backdrop-filter, background;
  transition-duration: var(--duration-normal);
  transition-timing-function: var(--ease-smooth);
}

@utility backdrop-card {
  @variant hover {
    backdrop-filter: blur(12px) saturate(180%);
    background: rgba(22, 27, 34, 0.85);
  }
}

@utility backdrop-glass-premium {
  backdrop-filter: blur(16px) saturate(180%);
  background: rgba(22, 27, 34, 0.6);
  border: 1px solid rgba(48, 54, 61, 0.2);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

@utility backdrop-subtle {
  backdrop-filter: blur(8px);
  background: rgba(13, 17, 23, 0.6); /* ui-bg with alpha */
}

/* ========================================
     BORDER EFFECTS
     ======================================== */

@utility border-motion {
  border: 1px solid var(--ui-border);
  transition-property: border-color;
  transition-duration: var(--duration-normal);
  transition-timing-function: var(--ease-smooth);
}

@utility border-motion {
  @variant hover {
    border-color: var(--ui-border-accented);
  }
}

@utility border-glow {
  box-shadow: 0 0 0 1px rgba(16, 185, 129, 0.2);
  transition-property: box-shadow;
  transition-duration: var(--duration-normal);
  transition-timing-function: var(--ease-smooth);
}

@utility border-glow {
  @variant hover {
    box-shadow: 0 0 0 1px rgba(16, 185, 129, 0.4);
  }
}

/* ========================================
     ANIMATION KEYFRAMES (Outside @utility)
     ======================================== */

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes pulseGlow {
  0%,
  100% {
    box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.4);
  }
  50% {
    box-shadow: 0 0 0 10px rgba(16, 185, 129, 0);
  }
}

/* ========================================
     ANIMATION UTILITIES
     ======================================== */

@utility fade-in {
  animation: fadeIn var(--duration-slow) var(--ease-smooth) forwards;
}

@utility slide-up {
  animation: slideUp var(--duration-normal) var(--ease-smooth) forwards;
}

@utility scale-in {
  animation: scaleIn var(--duration-normal) var(--ease-bounce) forwards;
}

@utility pulse-glow {
  animation: pulseGlow 2s var(--ease-smooth) infinite;
}

/* ========================================
     RESPONSIVE MOTION CONTROLS
     ======================================== */

/* Respect user motion preferences - using standard CSS since @utility can't be nested in media queries */
@media (prefers-reduced-motion: reduce) {
  .motion-card,
  .hover-premium,
  .hover-professional,
  .backdrop-card,
  .hover-lift,
  .hover-scale,
  .hover-glow {
    transition: none !important;
    transform: none !important;
    animation: none !important;
  }
}

/* Reduce motion complexity on mobile */
@media (max-width: 768px) {
  .hover-premium:hover {
    transform: none;
    box-shadow: var(--card-hover-shadow);
  }

  .motion-card:hover {
    transform: none;
  }
}
</file>

<file path="app/components/blog/article/ArticleAuthorBio.vue">
<script setup lang="ts">
// Hardcoded author information for Drew MacGibbon
const authorInfo = {
  name: 'Drew MacGibbon',
  title: 'CEO & Co-Founder',
  company: 'Incubrain',
  bio: 'Drew is the CEO and Co-Founder of Incubrain, leading the development of AI automation solutions for businesses worldwide. With a background in space technology and a passion for cutting-edge AI development, Drew focuses on building practical AI solutions that deliver measurable ROI for companies across various industries.',
  avatar: '/images/team/drew-macgibbon.jpg',
  social: {
    linkedin: 'https://linkedin.com/in/drewmacgibbon',
    github: 'https://github.com/drewmacgibbon',
    twitter: 'https://twitter.com/drewmacgibbon',
  },
}

const socialLinks = computed(() =>
  [
    {
      icon: 'i-lucide-linkedin',
      to: authorInfo.social.linkedin,
      label: 'LinkedIn',
      show: !!authorInfo.social.linkedin,
    },
    {
      icon: 'i-lucide-github',
      to: authorInfo.social.github,
      label: 'GitHub',
      show: !!authorInfo.social.github,
    },
    {
      icon: 'i-lucide-twitter',
      to: authorInfo.social.twitter,
      label: 'Twitter',
      show: !!authorInfo.social.twitter,
    },
  ].filter((link) => link.show),
)
</script>

<template>
  <div class="my-12">
    <UCard
      variant="outline"
      class="overflow-hidden"
    >
      <div class="p-6">
        <div class="flex items-start space-x-4">
          <!-- Avatar -->
          <UAvatar
            :src="authorInfo.avatar"
            :alt="authorInfo.name"
            size="xl"
            class="ring-2 ring-zinc-200 dark:ring-zinc-700"
          >
            <UIcon
              name="i-lucide-user"
              class="size-8"
            />
          </UAvatar>

          <!-- Author Info -->
          <div class="flex-1 space-y-3">
            <div>
              <h4 class="text-lg font-semibold text-zinc-900 dark:text-white">
                {{ authorInfo.name }}
              </h4>
              <p class="text-sm text-primary font-medium">
                {{ authorInfo.title }}, {{ authorInfo.company }}
              </p>
            </div>

            <p class="text-sm text-zinc-600 dark:text-zinc-400 leading-relaxed">
              {{ authorInfo.bio }}
            </p>

            <!-- Social Links -->
            <div
              v-if="socialLinks.length"
              class="flex items-center space-x-2 pt-2"
            >
              <span class="text-xs text-zinc-500 dark:text-zinc-400 mr-2">Connect:</span>
              <UButton
                v-for="link in socialLinks"
                :key="link.label"
                variant="ghost"
                size="xs"
                :icon="link.icon"
                :to="link.to"
                :aria-label="link.label"
                target="_blank"
                class="text-zinc-600 hover:text-primary dark:text-zinc-400 dark:hover:text-primary"
              />
            </div>
          </div>
        </div>
      </div>
    </UCard>
  </div>
</template>
</file>

<file path="app/components/blog/article/ArticleHeader.vue">
<script setup lang="ts">
interface Props {
  title: string
  description: string
  author: string
  date: string
  readTime?: string
  category: string
  tags?: string[]
  image?: string
}

defineProps<Props>()

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  })
}
</script>

<template>
  <header class="mb-12">
    <!-- Breadcrumb -->
    <nav
      class="mb-6"
      aria-label="Breadcrumb"
    >
      <ol class="flex items-center space-x-2 text-sm text-zinc-500 dark:text-zinc-400">
        <li>
          <ULink
            to="/blog"
            class="hover:text-primary transition-colors"
          >
            Blog
          </ULink>
        </li>
        <li class="flex">
          <UIcon
            name="i-lucide-chevron-right"
            class="size-4"
          />
        </li>
        <li>
          <ULink
            :to="`/blog/${category}`"
            class="hover:text-primary transition-colors"
          >
            {{ getCategoryName(category) }}
          </ULink>
        </li>
      </ol>
    </nav>

    <!-- Category Badge -->
    <div class="mb-6">
      <UBadge
        :label="getCategoryName(category)"
        variant="soft"
        color="primary"
        size="lg"
      />
    </div>

    <!-- Title (Always full width) -->
    <h1
      class="text-4xl md:text-5xl lg:text-6xl font-bold text-zinc-900 dark:text-white mb-8 leading-tight"
    >
      {{ title }}
    </h1>

    <!-- Two Column Layout (XL only) / Single Column (everything else) -->
    <div class="grid grid-cols-1 xl:grid-cols-6 gap-8 xl:gap-16 items-start">
      <!-- Content Column -->
      <div class="space-y-8 col-span-2">
        <!-- Tags -->
        <div
          v-if="tags?.length"
          class="flex flex-wrap gap-2"
        >
          <UBadge
            v-for="tag in tags"
            :key="tag"
            :label="tag"
            variant="outline"
            size="sm"
          />
        </div>

        <!-- Description -->
        <p class="text-lg md:text-xl text-zinc-600 dark:text-zinc-300 leading-relaxed">
          {{ description }}
        </p>

        <!-- Metadata -->
        <div class="flex flex-wrap items-center gap-6 text-sm text-zinc-500 dark:text-zinc-400">
          <div class="flex items-center space-x-2">
            <UIcon
              name="i-lucide-user"
              class="size-4"
            />
            <span>{{ author }}</span>
          </div>
          <div class="flex items-center space-x-2">
            <UIcon
              name="i-lucide-calendar"
              class="size-4"
            />
            <span>{{ formatDate(date) }}</span>
          </div>
          <div
            v-if="readTime"
            class="flex items-center space-x-2"
          >
            <UIcon
              name="i-lucide-clock"
              class="size-4"
            />
            <span>{{ readTime }} read</span>
          </div>
        </div>

        <!-- Image for smaller screens (single column) -->
        <div
          v-if="image"
          class="xl:hidden"
        >
          <NuxtImg
            :src="`images/blog/${category}/${image}`"
            :alt="title"
            class="w-full aspect-[3/2] object-cover rounded-lg shadow-lg"
            loading="eager"
            format="webp"
          />
        </div>
      </div>

      <!-- Image Column (XL screens only) -->
      <div
        v-if="image"
        class="hidden xl:block w-full col-span-4"
      >
        <NuxtImg
          :src="`images/blog/${category}/${image}`"
          :alt="title"
          class="w-full aspect-[3/2] object-cover rounded-lg shadow-lg"
          loading="eager"
          format="webp"
          width="100%"
        />
      </div>
    </div>
    <Header
      class="pt-8"
      title="ROUND 1, FIGHT!"
      badge="Latest"
    />
  </header>
</template>
</file>

<file path="app/components/blog/article/ArticleTableOfContents.vue">
<!-- components/blog/BlogTOC.vue - MODERN FLOATING DESIGN -->
<script setup lang="ts">
interface TocLink {
  id: string
  text: string
  depth: number
  children?: TocLink[]
}

interface Props {
  toc?: { links?: TocLink[] }
  show?: boolean
}

const props = withDefaults(defineProps<Props>(), {
  show: true,
})

const activeId = ref('')
const isMobileDrawerOpen = ref(false)
const currentSectionIndex = ref(0)

// Enhanced scroll spy with section progress
onMounted(() => {
  const headings = document.querySelectorAll('h2[id], h3[id], h4[id]')

  const observer = new IntersectionObserver(
    (entries) => {
      const visibleHeadings = entries
        .filter((entry) => entry.isIntersecting)
        .map((entry) => entry.target.id)

      if (visibleHeadings.length > 0) {
        activeId.value = visibleHeadings[0] as string

        // Update current section index for progress
        const flatLinks = flattenTocLinks(tocLinks.value)
        const index = flatLinks.findIndex((link) => link.id === activeId.value)
        if (index !== -1) {
          currentSectionIndex.value = index
        }
      }
    },
    {
      rootMargin: '-10% 0% -80% 0%',
      threshold: [0, 0.25, 0.5, 0.75, 1],
    },
  )

  headings.forEach((heading) => observer.observe(heading))

  onBeforeUnmount(() => {
    observer.disconnect()
  })
})

// Flatten TOC links for progress calculation
const flattenTocLinks = (links: TocLink[]): TocLink[] => {
  const flattened: TocLink[] = []
  links.forEach((link) => {
    flattened.push(link)
    if (link.children) {
      flattened.push(...link.children)
    }
  })
  return flattened
}

const scrollToHeading = (id: string) => {
  const element = document.getElementById(id)
  if (element) {
    const offset = 100
    const elementTop = element.getBoundingClientRect().top + window.scrollY - offset

    window.scrollTo({
      top: elementTop,
      behavior: 'smooth',
    })

    history.replaceState(null, '', `#${id}`)

    // Close mobile drawer after navigation
    isMobileDrawerOpen.value = false
  }
}

const tocLinks = computed(() => props.toc?.links || [])
const flatTocLinks = computed(() => flattenTocLinks(tocLinks.value))
const readingProgress = computed(() =>
  flatTocLinks.value.length > 0 ? (currentSectionIndex.value / flatTocLinks.value.length) * 100 : 0,
)

// Keyboard shortcuts for navigation
defineShortcuts({
  t: () => {
    isMobileDrawerOpen.value = !isMobileDrawerOpen.value
  },
})
</script>

<template>
  <div
    v-if="show && tocLinks.length"
    class="h-full"
  >
    <!-- DESKTOP: Floating TOC -->
    <div class="hidden xl:block relative h-full">
      <div
        v-motion
        :initial="{ opacity: 0, x: 20 }"
        :enter="{ opacity: 1, x: 0, transition: { duration: 400, delay: 200 } }"
        class="sticky left-6 top-24 z-40"
      >
        <div class="max-w-sm h-screen">
          <!-- Floating TOC Header -->
          <div class="flex items-center justify-between mb-3">
            <div class="flex items-center space-x-2">
              <div class="w-2 h-2 rounded-full bg-primary animate-pulse" />
              <span class="text-xs font-medium text-muted uppercase tracking-wide">Navigation</span>
            </div>
            <span class="text-xs text-dimmed">{{ Math.round(readingProgress) }}%</span>
          </div>

          <!-- Progress Bar -->
          <div class="w-full bg-muted/30 rounded-full h-0.5 mb-4">
            <div
              class="bg-primary h-0.5 rounded-full transition-all duration-500 ease-out"
              :style="{ width: `${readingProgress}%` }"
            />
          </div>

          <!-- Floating TOC Links -->
          <nav
            class="space-y-1 overflow-y-auto scrollbar-thin"
            :class="`max-h-[calc(100vh-var(--ui-nav-height))]`"
          >
            <template
              v-for="(link, index) in tocLinks"
              :key="link.id"
            >
              <div
                v-motion
                :initial="{ opacity: 0, x: 10 }"
                :enter="{
                  opacity: 1,
                  x: 0,
                  transition: { duration: 300, delay: 300 + index * 50 },
                }"
              >
                <!-- Main heading -->
                <button
                  class="group flex items-start text-left w-full py-1.5 px-2 rounded-md transition-all duration-200"
                  :class="{
                    'text-primary font-medium': activeId === link.id,
                    'text-toned hover:text-highlighted': activeId !== link.id,
                  }"
                  @click="scrollToHeading(link.id)"
                >
                  <!-- Depth indicator -->
                  <div
                    class="flex-shrink-0 w-1 h-1 rounded-full mt-2 mr-2 transition-all duration-200"
                    :class="{
                      'bg-primary': activeId === link.id,
                      'bg-muted group-hover:bg-toned': activeId !== link.id,
                    }"
                  />
                  <span class="text-xs leading-relaxed">{{ link.text }}</span>
                </button>

                <!-- Sub-headings -->
                <template v-if="link.children?.length">
                  <button
                    v-for="child in link.children"
                    :key="child.id"
                    class="group flex items-start text-left w-full py-1 px-2 ml-3 rounded-md transition-all duration-200"
                    :class="{
                      'text-primary': activeId === child.id,
                      'text-muted hover:text-toned': activeId !== child.id,
                    }"
                    @click="scrollToHeading(child.id)"
                  >
                    <div
                      class="flex-shrink-0 w-0.5 h-0.5 rounded-full mt-2 mr-2 transition-all duration-200"
                      :class="{
                        'bg-primary': activeId === child.id,
                        'bg-dimmed group-hover:bg-muted': activeId !== child.id,
                      }"
                    />
                    <span class="text-xs leading-relaxed">{{ child.text }}</span>
                  </button>
                </template>
              </div>
            </template>
          </nav>
        </div>
      </div>
    </div>

    <!-- MOBILE: Floating Button + Drawer -->
    <div class="xl:hidden">
      <!-- Floating Action Button -->
      <div
        v-motion
        :initial="{ opacity: 0, scale: 0.8 }"
        :enter="{ opacity: 1, scale: 1, transition: { duration: 300, delay: 500 } }"
        class="fixed bottom-6 right-6 z-50"
      >
        <UButton
          icon="i-lucide-list"
          color="primary"
          variant="solid"
          size="lg"
          square
          class="shadow-lg"
          @click="isMobileDrawerOpen = true"
        >
          <template #trailing>
            <UKbd
              value="T"
              class="hidden"
            />
          </template>
        </UButton>
      </div>

      <!-- Mobile Drawer -->
      <UModal
        v-model:open="isMobileDrawerOpen"
        title="Table of Contents"
        description="Navigate through article sections"
      >
        <template #body>
          <nav class="space-y-2">
            <template
              v-for="link in tocLinks"
              :key="`mobile-${link.id}`"
            >
              <!-- Main heading -->
              <button
                class="flex items-start text-left w-full p-3 rounded-lg transition-all duration-200 hover:bg-elevated"
                :class="{
                  'bg-primary/10 text-primary': activeId === link.id,
                  'text-toned': activeId !== link.id,
                }"
                @click="scrollToHeading(link.id)"
              >
                <div class="flex-shrink-0 mr-3 mt-0.5">
                  <div
                    class="w-2 h-2 rounded-full"
                    :class="{
                      'bg-primary': activeId === link.id,
                      'bg-muted': activeId !== link.id,
                    }"
                  />
                </div>
                <span class="font-medium">{{ link.text }}</span>
              </button>

              <!-- Sub-headings -->
              <template v-if="link.children?.length">
                <button
                  v-for="child in link.children"
                  :key="`mobile-${child.id}`"
                  class="flex items-start text-left w-full ml-6 rounded-lg transition-all duration-200 hover:bg-elevated"
                  :class="{
                    'bg-primary/50 text-primary': activeId === child.id,
                    'text-default': activeId !== child.id,
                  }"
                  @click="scrollToHeading(child.id)"
                >
                  <div class="flex-shrink-0 mr-2 mt-1">
                    <div
                      class="w-1 h-1 rounded-full"
                      :class="{
                        'bg-primary': activeId === child.id,
                        'bg-dimmed': activeId !== child.id,
                      }"
                    />
                  </div>
                  <span class="text-sm">{{ child.text }}</span>
                </button>
              </template>
            </template>
          </nav>
        </template>

        <template #footer>
          <div class="flex items-center justify-between text-xs text-default">
            <div class="flex items-center space-x-2">
              <UIcon
                name="i-lucide-keyboard"
                class="size-3"
              />
              <span>Press T to toggle</span>
            </div>
            <span>{{ flatTocLinks.length }} sections</span>
          </div>
        </template>
      </UModal>
    </div>
  </div>
</template>

<style scoped>
.scrollbar-thin {
  scrollbar-width: thin;
  scrollbar-color: rgb(var(--color-zinc-400)) transparent;
}

.scrollbar-thin::-webkit-scrollbar {
  width: 4px;
}

.scrollbar-thin::-webkit-scrollbar-track {
  background: transparent;
}

.scrollbar-thin::-webkit-scrollbar-thumb {
  background-color: rgb(var(--color-zinc-400));
  border-radius: 2px;
}
</style>
</file>

<file path="app/components/blog/BlogContent.vue">
<!-- components/blog/BlogContent.vue -->
<script setup lang="ts">
interface Props {
  posts: any[]
  loading?: boolean
  showFeatured?: boolean
  title?: string
  badge?: string
  emptyMessage?: string
}

const props = withDefaults(defineProps<Props>(), {
  loading: false,
  showFeatured: true,
  title: 'Recent Posts',
  badge: 'Latest',
  emptyMessage: 'No posts found',
})

// Separate featured and regular posts
const featuredPosts = computed(() =>
  props.showFeatured ? props.posts.filter((p) => p.featured).slice(0, 2) : [],
)

const route = useRoute()
</script>

<!-- components/blog/BlogContentSection.vue -->
<template>
  <div class="space-y-component">
    <!-- Featured Posts Section -->
    <section v-if="showFeatured && featuredPosts.length">
      <Header
        title="Featured Posts"
        badge="Curated"
        badge-color="primary"
      />
      <LayoutGrid variant="cards">
        <BlogPostCard
          v-for="post in featuredPosts"
          :key="`featured-${post.path}`"
          featured
          :post="post"
          :loading="loading"
        />
      </LayoutGrid>
    </section>

    <!-- Main Posts Section -->
    <section>
      <Header
        :title="title"
        :badge="badge"
      />

      <NavPagination 
        content-type="blog"
        :category="route.query.category"
      >
        <template
          #default="{ 
            items, 
            loading, 
            error, 
            hasData, 
            isEmpty 
          }"
        > 
          <!-- Error State -->
          <div v-if="error" class="text-center py-section">
            <UIcon name="i-lucide-alert-circle" class="size-12 text-error mx-auto mb-component" />
            <h3 class="text-lg font-medium text-error mb-2">Failed to Load Content</h3>
            <p class="text-muted">{{ error?.message || 'Please try again later' }}</p>
          </div>

          <!-- Loading State -->
          <LayoutGrid v-else-if="loading" variant="cards">
            <BlogPostCardSkeleton
              v-for="i in 6"
              :key="`skeleton-${i}`"
            />
          </LayoutGrid>

          <!-- Content State -->
          <LayoutMotion
            v-else-if="hasData && items.length"
            preset="feature-grid"
            :stagger="150"
          >
            <LayoutGrid variant="cards">
              <BlogPostCard
                v-for="(item, i) in items"
                :key="`${item.path}-${i}`"
                :post="item"
              />
            </LayoutGrid>
          </LayoutMotion>

          <!-- Empty State Instead of this-->
          <div v-else-if="isEmpty" class="text-center py-section">
            <UIcon name="i-lucide-file-text" class="size-12 text-dimmed mx-auto mb-component" />
            <h3 class="text-lg font-medium text-highlighted mb-2">No posts yet</h3>
            <p class="text-muted">Check back soon for new content!</p>
          </div>
        </template>
       </NavPagination>
     </section>
   </div>
</template>
</file>

<file path="app/components/blog/BlogPostCard.vue">
<!-- components/blog/BlogPostCard.vue -->
<script setup lang="ts">
interface Props {
  post?: any
  loading?: boolean
  featured?: boolean
}

const props = withDefaults(defineProps<Props>(), {
  loading: false,
  featured: false,
})

// Dynamic CSS classes based on card type
const cardClasses = computed(() => {
  const baseClasses = [
    'h-full',
    'motion-card', // Our motion-enhanced hover utility
    'border-motion', // Enhanced border transitions
    'group',
  ]

  if (props.featured) {
    baseClasses.push('backdrop-glass-premium', 'hover-premium')
  } else {
    baseClasses.push('bg-elevated/50', 'hover-professional')
  }

  return baseClasses
})

// Motion preset based on card type
const motionPreset = computed(() => {
  return props.featured ? 'hero-section' : 'blog-card'
})
</script>

<template>
  <!-- Show skeleton when loading (no motion needed) -->
  <BlogPostCardSkeleton v-if="loading" />

  <!-- Wrap entire card in MotionGroup -->
  <LayoutMotion
    v-else
    :preset="motionPreset"
  >
    <UCard
      variant="outline"
      :class="cardClasses"
    >
      <!-- Header slot -->
      <template #header>
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-2">
            <!-- Featured badge (automatically animated by MotionGroup) -->
            <UBadge
              v-if="featured"
              label="Featured"
              color="primary"
              variant="solid"
              size="sm"
              class="hover-premium badge"
            />

            <!-- Category badge (automatically animated by MotionGroup) -->
            <UBadge
              :label="getCategoryName(post?.category)"
              color="secondary"
              variant="soft"
              size="sm"
              class="hover-professional badge"
            />
          </div>

          <!-- Meta information (automatically animated by MotionGroup) -->
          <div class="flex items-center space-x-2 text-xs text-dimmed">
            <span>{{ post?.date || 'No date' }}</span>
            <span v-if="post?.readTime">•</span>
            <span v-if="post?.readTime">{{ post.readTime }}</span>
          </div>
        </div>
      </template>

      <!-- Featured image area (automatically animated by MotionGroup) -->
      <div
        v-if="featured"
        class="relative aspect-video gradient-card-elevated flex items-center justify-center mb-4 rounded-md overflow-hidden"
      >
        <NuxtImg
          v-if="post?.image"
          :src="`images/blog/${post?.category}/${post?.image}`"
          width="100%"
          class="w-full h-full object-cover hover-premium"
        />
        <div
          v-else
          class="w-full h-full flex items-center justify-center gradient-tech-subtle"
        >
          <UIcon
            name="i-lucide-image"
            class="size-16 text-dimmed"
          />
        </div>
      </div>

      <!-- Main content (automatically animated by MotionGroup) -->
      <div class="space-y-4">
        <!-- Post Title (h3 gets automatic animation) -->
        <ULink
          :to="post?.path || '#'"
          class="block title-link"
        >
          <h3
            class="font-bold text-highlighted line-clamp-2 transition-colors title-text hover-professional"
            :class="featured ? 'text-2xl' : 'text-lg'"
          >
            {{ post?.title || (featured ? 'Untitled Featured Post' : 'No title available') }}
          </h3>
        </ULink>

        <!-- Post Description (p gets automatic animation) -->
        <p class="text-dimmed line-clamp-3">
          {{
            post?.description ||
            (featured
              ? 'No description available for this featured post.'
              : 'No description available')
          }}
        </p>
      </div>

      <!-- Footer (automatically animated by MotionGroup) -->
      <template #footer>
        <div class="flex items-center justify-between text-sm">
          <div class="text-muted">
            <span>{{ post?.author || 'Incubrain Team' }}</span>
          </div>

          <ULink
            :to="post?.path || '#'"
            class="text-primary hover:text-primary-600 transition-colors inline-flex items-center space-x-1 font-medium hover-professional button"
          >
            <span>{{ featured ? 'Read More' : 'Read' }}</span>
            <UIcon
              name="i-lucide-arrow-right"
              class="size-3 transition-transform group-hover:translate-x-1"
            />
          </ULink>
        </div>
      </template>
    </UCard>
  </LayoutMotion>
</template>

<style scoped>
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.title-link:hover .title-text {
  color: var(--ui-secondary);
}

.group:hover .title-link .title-text {
  color: var(--ui-secondary);
}

/* Enhanced motion states */
.group:hover .title-text {
  transform: translateY(-1px);
}

/* Featured card enhancements */
.backdrop-glass-premium {
  position: relative;
}

.backdrop-glass-premium::before {
  content: '';
  position: absolute;
  inset: 0;
  background: var(--gradient-radial-primary);
  opacity: 0;
  transition: opacity var(--hover-duration) var(--hover-easing);
  pointer-events: none;
  border-radius: inherit;
}

.backdrop-glass-premium:hover::before {
  opacity: 1;
}
</style>
</file>

<file path="app/components/blog/BlogPostCardSkeleton.vue">
<!-- components/blog/BlogPostCardSkeleton.vue -->
<template>
  <UCard
    variant="outline"
    class="h-full"
  >
    <template #header>
      <div class="flex items-center justify-between">
        <USkeleton class="h-5 w-24" />
        <USkeleton class="h-4 w-16" />
      </div>
    </template>

    <div class="space-y-4">
      <!-- Title skeleton -->
      <div class="space-y-2">
        <USkeleton class="h-6 w-full" />
        <USkeleton class="h-6 w-3/4" />
      </div>

      <!-- Description skeleton -->
      <div class="space-y-2">
        <USkeleton class="h-4 w-full" />
        <USkeleton class="h-4 w-full" />
        <USkeleton class="h-4 w-2/3" />
      </div>
    </div>

    <template #footer>
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <USkeleton class="h-4 w-20" />
          <USkeleton class="h-4 w-16" />
        </div>
        <USkeleton class="h-4 w-12" />
      </div>
    </template>
  </UCard>
</template>
</file>

<file path="app/components/card/CTA.vue">
<script setup lang="ts">
import ctaStyles from '~~/theme/cta'

interface Props {
  variant?: 'inline' | 'featured' | 'compact'
  title: string
  subtitle?: string
  ctaText: string
  ctaLink: string
  ui?: any
  class?: string
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'inline'
})

const styles = computed(() => ctaStyles(props))
</script>

<template>
  <div :class="styles.root()">
    <div :class="styles.content()">
      <h3 :class="styles.title()">{{ title }}</h3>
      <p v-if="subtitle" :class="styles.subtitle()">{{ subtitle }}</p>
    </div>
    
    <div :class="styles.actions()">
      <UButton
        :to="ctaLink"
        :target="ctaLink.startsWith('http') ? '_blank' : undefined"
        color="primary"
        variant="solid"
      >
        {{ ctaText }}
      </UButton>
    </div>
  </div>
</template>
</file>

<file path="app/components/card/Skill.vue">
<!-- app/components/card/Skill.vue -->
<script setup lang="ts">
interface Props {
  title: string
  description: string
  icon: string
}

defineProps<Props>()

const cardUI = {
  root: 'bg-elevated border border-muted hover:shadow-lg hover:border-accented transition-all duration-300',
  body: 'p-6 space-y-4 text-center'
}
</script>

<template>
  <UCard :ui="cardUI">
    <div class="w-12 h-12 mx-auto mb-4 bg-primary/10 text-primary rounded-lg flex items-center justify-center">
      <UIcon :name="icon" class="w-6 h-6" />
    </div>
    <h3 class="text-lg font-semibold text-highlighted">{{ title }}</h3>
    <p class="text-muted">{{ description }}</p>
  </UCard>
</template>
</file>

<file path="app/components/card/Stats.vue">
<!-- app/components/card/Stats.vue -->
<script setup lang="ts">
interface Props {
  value: string
  title: string
  description?: string
}

defineProps<Props>()

const cardUI = {
  root: 'bg-elevated border border-muted text-center hover:shadow-lg hover:border-accented transition-all duration-300',
  body: 'p-6 space-y-2'
}
</script>

<template>
  <UCard :ui="cardUI">
    <div class="text-3xl font-bold text-highlighted">{{ value }}</div>
    <div class="text-base font-medium text-muted">{{ title }}</div>
    <p v-if="description" class="text-sm text-dimmed">{{ description }}</p>
  </UCard>
</template>
</file>

<file path="app/components/card/Testimonial.vue">
<!-- components/layout/TestimonialCard.vue -->
<script setup lang="ts">
interface TestimonialItem {
  quote: string
  author: string
  title: string
  company: string
  initials?: string
  rating?: number
  avatar?: string
}

interface Props {
  items: TestimonialItem[]
  variant?: 'card' | 'minimal' | 'featured'
  showRating?: boolean
  showAvatar?: boolean
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'card',
  showRating: true,
  showAvatar: true,
})

// For carousel compatibility, we'll render the first item or loop through all
const testimonial = computed(() => props.items[0] || ({} as TestimonialItem))
</script>

<template>
  <!-- Featured variant (for single testimonial showcase) -->
  <div
    v-if="variant === 'featured'"
    class="bg-elevated/50 backdrop-blur-sm border border-muted rounded-3xl overflow-hidden hover:shadow-2xl hover:shadow-secondary/5 transition-all duration-500"
  >
    <LayoutGradientCard gradient-color="secondary">
      <div class="p-8 lg:p-12">
        <div class="grid lg:grid-cols-3 gap-8 items-center">
          <!-- Quote Content -->
          <div class="lg:col-span-2 space-y-6">
            <!-- Star Rating -->
            <div
              v-if="showRating && testimonial?.rating"
              class="flex items-center gap-1 mb-4"
            >
              <div
                v-for="star in testimonial.rating || 5"
                :key="star"
                class="text-amber-400"
              >
                <UIcon
                  name="i-lucide-star"
                  class="size-5 fill-current"
                />
              </div>
            </div>

            <!-- Quote -->
            <blockquote
              class="text-2xl lg:text-3xl text-highlighted leading-relaxed font-medium relative"
            >
              <UIcon
                name="i-lucide-quote"
                class="absolute -top-2 -left-4 size-8 text-secondary/20"
              />
              {{ testimonial.quote }}
            </blockquote>

            <!-- Author -->
            <div class="flex items-center gap-6 pt-4 border-t border-muted/50">
              <div
                class="w-16 h-16 bg-secondary/20 rounded-2xl flex items-center justify-center ring-2 ring-secondary/20"
              >
                <NuxtImg
                  v-if="showAvatar && testimonial.avatar"
                  :src="testimonial.avatar"
                  :alt="testimonial.author"
                  class="w-full h-full rounded-xl object-cover"
                />
                <span
                  v-else
                  class="text-secondary font-bold text-xl"
                >
                  {{
                    testimonial.initials ||
                    testimonial.author
                      ?.split(' ')
                      .map((n) => n[0])
                      .join('')
                  }}
                </span>
              </div>

              <div class="flex-1">
                <div class="flex items-center gap-3 mb-1">
                  <div class="font-bold text-highlighted text-xl">{{ testimonial.author }}</div>
                  <div
                    class="w-5 h-5 bg-secondary/20 rounded-full flex items-center justify-center"
                  >
                    <UIcon
                      name="i-lucide-check"
                      class="size-3 text-secondary"
                    />
                  </div>
                </div>
                <div class="text-muted text-lg">{{ testimonial.title }}</div>
                <div class="text-secondary font-medium">{{ testimonial.company }}</div>
              </div>
            </div>
          </div>

          <!-- Visual Element -->
           <UIcon name="i-lucide-quote" class="text-secondary/60 hidden lg:block" size="2xl" />
        </div>
      </div>
    </LayoutGradientCard>
  </div>

  <!-- Card variant (for carousel/grid) -->
  <div
    v-else-if="variant === 'card'"
    class="bg-elevated border border-muted rounded-2xl p-6 h-full flex flex-col hover:shadow-lg hover:shadow-secondary/5 transition-all duration-300"
  >
    <!-- Rating -->
    <div
      v-if="showRating && testimonial.rating"
      class="flex items-center gap-1 mb-4"
    >
      <div
        v-for="star in testimonial.rating || 5"
        :key="star"
        class="text-amber-400"
      >
        <UIcon
          name="i-lucide-star"
          class="size-4 fill-current"
        />
      </div>
    </div>

    <!-- Quote -->
    <blockquote class="text-lg text-highlighted mb-6 flex-1 leading-relaxed">
      "{{ testimonial.quote }}"
    </blockquote>

    <!-- Author -->
    <div class="flex items-center gap-4 mt-auto">
      <div class="w-12 h-12 bg-secondary/20 rounded-xl flex items-center justify-center">
        <NuxtImg
          v-if="showAvatar && testimonial.avatar"
          :src="testimonial.avatar"
          :alt="testimonial.author"
          class="w-full h-full rounded-xl object-cover"
        />
        <span
          v-else
          class="text-secondary font-semibold"
        >
          {{
            testimonial.initials ||
            testimonial.author
              ?.split(' ')
              .map((n) => n[0])
              .join('')
          }}
        </span>
      </div>

      <div>
        <div class="font-semibold text-highlighted">{{ testimonial.author }}</div>
        <div class="text-sm text-muted">{{ testimonial.title }}</div>
        <div class="text-sm text-secondary font-medium">{{ testimonial.company }}</div>
      </div>
    </div>
  </div>

  <!-- Minimal variant (for compact displays) -->
  <div
    v-else
    class="text-center p-4"
  >
    <div class="mb-3">
      <UIcon
        name="i-lucide-quote"
        class="size-6 text-secondary/40 mx-auto"
      />
    </div>
    <p class="text-highlighted mb-4 italic">{{ testimonial.quote }}</p>
    <div class="text-sm">
      <div class="font-semibold text-highlighted">{{ testimonial.author }}</div>
      <div class="text-muted">{{ testimonial.company }}</div>
    </div>
  </div>
</template>
</file>

<file path="app/components/content/Alert.vue">
<script setup lang="ts">
import { computed } from 'vue'

interface Props {
  type?: 'info' | 'warning' | 'success' | 'error'
  title?: string
  variant?: 'solid' | 'outline' | 'soft' | 'subtle'
}

const props = withDefaults(defineProps<Props>(), {
  title: 'Alert Title Missing',
  type: 'info',
  variant: 'outline'
})

const alertConfig = {
  info: { color: 'info', icon: 'i-lucide-info' },
  warning: { color: 'warning', icon: 'i-lucide-alert-triangle' },
  success: { color: 'success', icon: 'i-lucide-check-circle' },
  error: { color: 'error', icon: 'i-lucide-x-circle' },
} as const

const config = computed(() => alertConfig[props.type])
</script>

<template>
  <UAlert
    :title="title"
    :color="config.color"
    :icon="config.icon"
    :variant="variant"
    class="my-6"
  >
    <template #description>
      <div class="prose prose-sm dark:prose-invert max-w-none [&_p:last-child]:mb-0">
        <slot />
      </div>
    </template>
  </UAlert>
</template>
</file>

<file path="app/components/content/Carousel.vue">
<!-- components/content/Carousel.vue -->
<script setup lang="ts">
import { computed } from 'vue'
import type { CarouselProps } from '@nuxt/ui'

// Define internal presets with all configurations
const presets = {
  gallery: {
    ui: {
      item: 'basis-full md:basis-1/2 lg:basis-1/3 transition-all duration-300 [&:last-child]:mr-4',
      container: 'flex items-center gap-4',
    },
    autoplay: { delay: 5000 },
    loop: true,
    arrows: true,
    dots: false,
    align: 'center',
    classNames: true,
    containScroll: 'trimSnaps',
  },
  hero: {
    ui: {
      item: 'basis-full transition-all duration-300 [&:last-child]:mr-4',
      container: 'flex items-center gap-4',
    },
    autoplay: { delay: 7000 },
    loop: true,
    arrows: true,
    dots: false,
    align: 'center',
    classNames: true,
    containScroll: 'trimSnaps',
  },
  thumbnail: {
    ui: {
      item: 'basis-1/4 md:basis-1/6 transition-all duration-300 [&:last-child]:mr-2',
      container: 'flex items-center gap-2',
    },
    autoplay: false,
    loop: false,
    arrows: false,
    dots: true,
    align: 'start',
    classNames: false,
    containScroll: 'trimSnaps',
  },
}

// Define minimal props
interface Props {
  variant?: 'gallery' | 'hero' | 'thumbnail'
  items: any[]
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'gallery',
})


// Compute UI by merging preset with app.config.ts base styles
const appConfig = useAppConfig()
const ui = computed(() => {
    if (!appConfig.ui.carousel) {
      return presets[props.variant].ui
    }
    console.log('Using app config:', appConfig)
  const presetUi = presets[props.variant].ui
  const baseSlots = appConfig.ui.carousel?.slots || {}
  return {
    ...baseSlots,
    ...presetUi,
  }
})

// Prepare carousel items
const carouselItems = computed(() => props.items.map((item, index) => ({
  ...item,
  id: `${item.type || 'item'}-${index}`,
})))

// Compute final carousel props based on preset
const carouselProps = computed<CarouselProps>(() => {
  const preset = presets[props.variant]
  return {
    ui: ui.value,
    items: carouselItems.value,
    autoplay: preset.autoplay,
    loop: preset.loop,
    arrows: preset.arrows,
    dots: preset.dots,
    align: preset.align,
    classNames: preset.classNames,
    containScroll: preset.containScroll,
  }
})

const getComponentName = (item: any): string | null => {
  return item.component || null
}
</script>

<template>
  <UCarousel
    v-slot="{ item }"
    v-bind="carouselProps"
  >
    <div class="h-full flex flex-col min-h-[200px]">
      <component
        :is="item.component"
        v-if="item.type === 'slot' && item.component"
        class="flex-1"
      />
      <component
        :is="getComponentName(item)"
        v-else-if="item.type === 'custom' && getComponentName(item)"
        :items="[item]"
        :variant="item.variant"
        v-bind="item.componentProps || {}"
        class="flex-1 h-full"
      />
      <NuxtImg
        v-else-if="item.type === 'image' && item.src"
        :src="item.src"
        :alt="item.alt || 'Carousel image'"
        class="flex-1 w-full h-full object-cover rounded-lg"
        draggable="false"
        loading="lazy"
      />
      <video
        v-else-if="item.type === 'video' && item.src"
        :src="item.src"
        class="flex-1 w-full h-full object-cover rounded-lg"
        controls
        preload="metadata"
        :poster="item.poster"
      >
        <track
          v-if="item.subtitle"
          kind="subtitles"
          :src="item.subtitle"
          :srclang="item.subtitleLang || 'en'"
          :label="item.subtitleLabel || 'English'"
        >
        Your browser does not support the video tag.
      </video>
      <div
        v-else
        class="flex-1 flex items-center justify-center bg-gray-100 text-gray-500 rounded-lg border-2 border-dashed border-gray-300"
      >
        <div class="text-center p-4">Unsupported Content: {{ item.type }}</div>
      </div>
    </div>
  </UCarousel>
</template>
</file>

<file path="app/components/content/MermaidDiagram.vue">
<script setup lang="ts">
interface Props {
  code: string
  scale?: 'sm' | 'md' | 'lg' | 'xl' | 'auto'
}

const props = withDefaults(defineProps<Props>(), {
  scale: 'auto'
})

const show = ref(false)
// Generate truly unique ID
const diagramId = `mermaid-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
const { $mermaid } = useNuxtApp()
const diagramRef = ref<HTMLElement>()

const scaleClasses = {
  sm: 'max-w-md',      
  md: 'max-w-2xl',     
  lg: 'max-w-4xl',     
  xl: 'max-w-6xl',     
  auto: 'max-w-none'   
}

// Extract title from mermaid code
const extractedTitle = computed(() => {
  const titleMatch = props.code.match(/title\s+(.+)/)
  return titleMatch ? titleMatch[1].trim() : null
})

// Remove title from mermaid code
const cleanedCode = computed(() => {
  return props.code.replace(/title\s+.+\n?/, '').trim()
})

onMounted(async () => {
  if (!$mermaid) {
    console.error('❌ Mermaid not available')
    show.value = true
    return
  }

  try {
    console.log('🎨 Initializing mermaid with ID:', diagramId)

    // Initialize once
    $mermaid.initialize({
      startOnLoad: false, // CRITICAL: Set to false
      theme: 'base',
      securityLevel: 'loose',
      darkMode: true,
      
      themeVariables: {
        darkMode: true,
        fontFamily: 'IBM Plex Sans, system-ui, sans-serif',
        fontSize: '14px',
        
        // GitHub Dark backgrounds
        background: '#0d1117',
        mainBkg: '#161b22',
        secondaryColor: '#21262d',
        tertiaryColor: '#30363d',
        
        // Blue primary colors
        primaryColor: '#3b82f6',
        primaryTextColor: '#f0f6fc',    
        primaryBorderColor: '#60a5fa',
        
        // Secondary blues
        secondaryBorderColor: '#1e40af',
        secondaryTextColor: '#c9d1d9',   
        
        // Purple tertiary
        tertiaryBorderColor: '#7c3aed',
        tertiaryTextColor: '#e5e7eb',    
        
        // Lines and borders
        lineColor: '#60a5fa',
        textColor: '#c9d1d9',
        nodeBorder: '#60a5fa',
        clusterBkg: '#21262d',
        clusterBorder: '#60a5fa',
        
        // Hide title since we render it separately
        titleColor: 'transparent',
        
        // Error handling
        errorBkgColor: '#7c3aed',
        errorTextColor: '#f0f6fc'
      },
    })

    show.value = true
    await nextTick()

    // Use mermaid.render() API directly - CRITICAL FIX
    const { svg } = await $mermaid.render(diagramId, cleanedCode.value)
    
    if (diagramRef.value) {
      // Clear any existing content
      diagramRef.value.innerHTML = ''
      // Insert new SVG
      diagramRef.value.innerHTML = svg
      
      // Apply scaling and centering
      const svgElement = diagramRef.value.querySelector('svg')
      if (svgElement) {
        svgElement.style.display = 'block'
        svgElement.style.margin = '0 auto'
        
        // Auto-scale logic
        if (props.scale === 'auto') {
          const width = svgElement.getBoundingClientRect().width
          if (width < 400) {
            diagramRef.value.classList.add('max-w-md')
          } else if (width < 600) {
            diagramRef.value.classList.add('max-w-2xl')
          } else if (width < 800) {
            diagramRef.value.classList.add('max-w-4xl')
          } else {
            diagramRef.value.classList.add('max-w-6xl')
          }
        }
      }
    }
    
    console.log('✅ Mermaid rendered successfully:', diagramId)
    
  } catch (error) {
    console.error('❌ Mermaid render failed:', error)
    show.value = true
    
    if (diagramRef.value) {
      diagramRef.value.innerHTML = `
        <div class="p-4 text-center text-red-400 bg-red-950/20 rounded border border-red-500/30">
          <p class="font-semibold">Diagram Render Error</p>
          <p class="text-sm mt-1">${error.message}</p>
          <details class="mt-2 text-xs">
            <summary class="cursor-pointer">Show Code</summary>
            <pre class="mt-2 p-2 bg-black/50 rounded text-left whitespace-pre-wrap">${cleanedCode.value}</pre>
          </details>
        </div>
      `
    }
  }
})

// Cleanup on unmount
onUnmounted(() => {
  if (diagramRef.value) {
    diagramRef.value.innerHTML = ''
  }
})
</script>

<template>
  <ClientOnly>
    <div
      v-if="show"
      class="my-8 p-6 rounded-lg border border-default bg-elevated"
    >
      <!-- Render extracted title as proper H3 -->
      <h3 
        v-if="extractedTitle"
        class="font-heading text-2xl font-semibold bg-muted px-2 py-2 text-center mb-6 mx-auto w-auto rounded-md"
      >
        {{ extractedTitle }}
      </h3>
      
      <!-- Mermaid diagram container -->
      <div class="text-center">
        <div 
          ref="diagramRef"
          :class="['w-full flex justify-center', scaleClasses[scale]]"
        >
          <!-- SVG will be inserted here -->
        </div>
      </div>
    </div>

    <template #fallback>
      <div class="my-8 p-4 text-center">
        <UIcon name="i-lucide-loader" class="w-5 h-5 animate-spin mx-auto mb-2" />
        <p class="text-sm text-muted">Loading diagram...</p>
      </div>
    </template>
  </ClientOnly>
</template>
</file>

<file path="app/components/content/ProseA.vue">
<!-- components/content/ProseA.vue -->
<script setup lang="ts">
interface Props {
  href?: string
  target?: '_blank' | '_parent' | '_self' | '_top' | (string & object) | null | undefined
}

const props = defineProps<Props>()

// Auto-detect external URLs and set target="_blank"
const isExternal = computed(() => {
  if (!props.href) return false
  return props.href.startsWith('http://') || 
         props.href.startsWith('https://') ||
         props.href.startsWith('mailto:') ||
         props.href.startsWith('tel:')
})

const linkTarget = computed(() => {
  // If target is explicitly set, use it
  if (props.target !== undefined) return props.target
  
  // Auto-set target="_blank" for external links
  return isExternal.value ? '_blank' : undefined
})
</script>

<template>
  <ULink
    :href="props.href"
    :target="linkTarget"
    :external="isExternal"
    class="decoration-1 underline underline-offset-4 decoration-secondary-800"
  >
    <slot />
  </ULink>
</template>
</file>

<file path="app/components/content/ProseBlockquote.vue">
<!-- components/content/ProseBlockquote.vue -->
<template>
    <blockquote class="relative my-8 px-6 py-5 rounded-lg bg-gradient-to-r from-secondary/5 to-secondary/10 border-l-4 border-secondary/30">
      <!-- Quote icon - properly spaced, no overlap -->
      <UIcon
        name="i-lucide-quote"
        class="absolute top-4 left-4 size-6 text-secondary/40"
      />
      
      <!-- Content wrapper with proper left margin for icon -->
      <div class="ml-8">
        <!-- Quote content -->
        <div class="text-lg italic text-highlighted leading-relaxed font-medium">
          <slot />
        </div>
      </div>
    </blockquote>
  </template>
  
  <style scoped>
  @reference "@/assets/css/main.css";

  /* Target attribution lines (starting with —) */
  blockquote :deep(p:last-child) {
    @apply text-sm text-muted not-italic mt-3;
  }
  
  /* Ensure quote content is prominent */
  blockquote :deep(p:not(:last-child)) {
    @apply text-lg text-highlighted font-medium mb-3;
  }
  
  /* Remove default margins for cleaner spacing */
  blockquote :deep(p:first-child) {
    @apply mt-0;
  }
  
  blockquote :deep(p:last-child) {
    @apply mb-0;
  }
  </style>
</file>

<file path="app/components/content/ProseCode.vue">
<template>
    <code class="font-mono bg-elevated text-secondary px-2 py-1 rounded text-base">
      <slot />
    </code>
</template>
</file>

<file path="app/components/content/ProseEm.vue">
<template>
    <em class="italic">
      <slot />
    </em>
</template>
</file>

<file path="app/components/content/ProseH1.vue">
<!-- components/content/ProseH1.vue -->
<script setup lang="ts">
const props = defineProps<{ id?: string }>()
</script>

<template>
  <LayoutHeading :id="props.id" base="h1" variant="hero">
    <slot />
  </LayoutHeading>
  </template>
</file>

<file path="app/components/content/ProseH2.vue">
<!-- components/content/ProseH2.vue -->
<script setup lang="ts">
const props = defineProps<{ id?: string }>()
</script>

<template>
  <LayoutHeading :id="props.id" base="h2" variant="section">
    <slot />
  </LayoutHeading>
  </template>
</file>

<file path="app/components/content/ProseH3.vue">
<!-- components/content/ProseH3.vue -->
<script setup lang="ts">
const props = defineProps<{ id?: string }>()
</script>

<template>
  <LayoutHeading :id="props.id" :level="3">
    <slot />
  </LayoutHeading>
  </template>
</file>

<file path="app/components/content/ProseH4.vue">
<!-- components/content/ProseH4.vue -->
<script setup lang="ts">
const props = defineProps<{ id?: string }>()
</script>

<template>
  <LayoutHeading :id="props.id" :level="4">
    <slot />
  </LayoutHeading>
  </template>
</file>

<file path="app/components/content/ProseH5.vue">
<!-- components/content/ProseH5.vue -->
<script setup lang="ts">
const props = defineProps<{ id?: string }>()
</script>

<template>
  <LayoutHeading :id="props.id" :level="5">
    <slot />
  </LayoutHeading>
  </template>
</file>

<file path="app/components/content/ProseH6.vue">
<!-- components/content/ProseH6.vue -->
<script setup lang="ts">
const props = defineProps<{ id?: string }>()
</script>

<template>
  <LayoutHeading :id="props.id" :level="6">
    <slot />
  </LayoutHeading>
</template>
</file>

<file path="app/components/content/ProseHr.vue">
<!-- components/content/ProseHr.vue -->
<script setup lang="ts">
import Logo from '~/components/Logo.vue'
</script>

<template>
  <div class="my-section flex items-center justify-center">
    <div class="flex-1 border-t border-muted"/>
    <div class="px-6">
      <Logo size="sm" :show-text="false" />
    </div>
    <div class="flex-1 border-t border-muted"/>
  </div>
</template>
</file>

<file path="app/components/content/ProseImg.vue">
<!-- components/content/ProseImg.vue -->
<script setup lang="ts">
import { computed, useRoute } from '#imports'

interface Props {
  src?: string
  alt?: string
  width?: string | number
  height?: string | number
  title?: string
  class?: string
  style?: string
}

const props = withDefaults(defineProps<Props>(), {
  alt: '',
  class: '',
  style: '',
})

const route = useRoute()

// Auto-detect category from URL structure
const getImageSrc = computed(() => {
  console.log('getImageSrc PROPS', props)
  if (!props.src) return ''

  // If already a full path, use as-is
  if (props.src.startsWith('/') || props.src.startsWith('http')) {
    return props.src
  }

  // Extract category from current route
  // Route patterns: /blog/[category]/[slug] or /blog/[category]
  const pathSegments = route.path.split('/').filter(Boolean)
  let category = ''

  if (pathSegments[0] === 'blog' && pathSegments.length >= 2) {
    category = pathSegments[1]
    // Don't use 'index' as category
    if (category === 'index') category = 'general'
  } else {
    category = 'general'
  }

  // Build path: /images/blog/{category}/{filename}
  return `images/blog/${category}/${props.src}`
})

// Enhanced alt text for better accessibility
const enhancedAlt = computed(() => {
  if (props.alt) return props.alt
  if (props.title) return props.title

  // Extract filename without extension for fallback alt
  const filename = props.src?.split('/').pop()?.split('.')[0] || ''
  return filename ? `Blog image: ${filename.replace(/[-_]/g, ' ')}` : 'Blog image'
})

const isLoaded = ref(false)
const hasError = ref(false)
</script>

<template>
  <figure class="blog-image-container my-8">
    <!-- Loading overlay -->
    <div
      v-if="!isLoaded && !hasError"
      class="absolute inset-0 flex items-center justify-center bg-zinc-100 dark:bg-zinc-800 rounded-lg z-10"
    >
      <UIcon
        name="i-lucide-image"
        class="w-8 h-8 text-zinc-400"
      />
    </div>

    <!-- Error overlay -->
    <div
      v-if="hasError"
      class="absolute inset-0 flex flex-col items-center justify-center bg-zinc-100 dark:bg-zinc-800 rounded-lg p-8 text-center z-10"
    >
      <UIcon
        name="i-lucide-exclamation-triangle"
        class="w-8 h-8 text-amber-500 mb-2"
      />
      <p class="text-sm text-zinc-600 dark:text-zinc-400">
        Image failed to load: {{ props.src }}
      </p>
    </div>

    <!-- Main image (always rendered) -->
    <NuxtImg
      :src="getImageSrc"
      :alt="enhancedAlt"
      :title="title"
      :width="width"
      :height="height"
      :class="[
        'blog-image relative',
        'rounded-lg shadow-lg',
        'transition-all duration-300 ease-in-out',
        'hover:shadow-xl hover:scale-[1.02]',
        'max-w-full h-auto',
        'border border-zinc-200 dark:border-zinc-700',
        { 'opacity-0': !isLoaded && !hasError },
        props.class,
      ]"
      :style="props.style"
      loading="lazy"
      @load="isLoaded = true"
      @error="hasError = true"
    />

    <!-- Caption -->
    <figcaption
      v-if="title && isLoaded"
      class="mt-3 text-sm text-center text-zinc-600 dark:text-zinc-400 italic"
    >
      {{ title }}
    </figcaption>
  </figure>
</template>

<style scoped>
@reference "@/assets/css/main.css";

.blog-image-container {
  @apply mx-auto relative;
  max-width: min(100%, 800px);
  min-height: 200px;
}

.blog-image {
  box-shadow:
    0 4px 6px -1px rgba(0, 0, 0, 0.1),
    0 2px 4px -1px rgba(0, 0, 0, 0.06);
}

.dark .blog-image {
  box-shadow:
    0 4px 6px -1px rgba(0, 0, 0, 0.3),
    0 2px 4px -1px rgba(0, 0, 0, 0.2);
}

.blog-image:hover {
  box-shadow:
    0 20px 25px -5px rgba(0, 0, 0, 0.1),
    0 10px 10px -5px rgba(0, 0, 0, 0.04);
}
</style>
</file>

<file path="app/components/content/ProseLi.vue">
<template>
    <li class="text-muted mb-2 list-item">
      <slot />
    </li>
</template>
</file>

<file path="app/components/content/ProseOl.vue">
<template>
    <ol class="mb-4 pl-6 list-decimal [&_ol]:list-[lower-alpha] [&_ol_ol]:list-[lower-roman]">
      <slot />
    </ol>
</template>
</file>

<file path="app/components/content/ProseP.vue">
<template>
    <p class="text-muted text-lg leading-relaxed mb-4">
      <slot />
    </p>
</template>
</file>

<file path="app/components/content/ProsePre.vue">
<!-- components/content/ProsePre.vue -->
<script setup lang="ts">
import { useClipboard } from '@vueuse/core'

const props = defineProps({
  code: {
    type: String,
    default: '',
  },
  language: {
    type: String as PropType<LanguageKey>,
    default: null,
  },
  filename: {
    type: String,
    default: null,
  },
  highlights: {
    type: Array as () => number[],
    default: () => [],
  },
  meta: {
    type: String,
    default: null,
  },
  class: {
    type: String,
    default: null,
  },
})

const isMermaid = computed(() => props.language === 'mermaid')

const { copy, copied, isSupported } = useClipboard({
  source: computed(() => props.code),
  copiedDuring: 2000,
})

const handleCopy = () => {
  if (isSupported.value) {
    copy(props.code)
  }
}

const languageLabels = {
  typescript: 'TypeScript',
  javascript: 'JavaScript',
  ts: 'TypeScript',
  js: 'JavaScript',
  vue: 'Vue',
  bash: 'Bash',
  sql: 'SQL',
  python: 'Python',
  yaml: 'YAML',
  json: 'JSON',
  dockerfile: 'Docker',
  nginx: 'Nginx',
  mermaid: 'Mermaid',
} as const

type LanguageKey = keyof typeof languageLabels

const getLanguageLabel = (lang?: LanguageKey) => {
  if (!lang) return 'Code'
  return languageLabels[lang] || lang.toUpperCase()
}
</script>

<template>
  <!-- Render Mermaid component if language is mermaid -->
  <MermaidDiagram
    v-if="isMermaid"
    :code="code"
  />

  <!-- Otherwise render normal code block -->
  <div
    v-else
    class="my-6 rounded-lg border border-muted overflow-hidden"
  >
    <!-- Header with filename and copy button -->
    <div class="flex items-center justify-between px-4 py-2 bg-elevated border-b border-muted">
      <div class="flex items-center space-x-3">
        <!-- Mac-style window controls -->
        <div class="flex space-x-1.5">
          <div class="w-3 h-3 rounded-full bg-red-500" />
          <div class="w-3 h-3 rounded-full bg-yellow-500" />
          <div class="w-3 h-3 rounded-full bg-green-500" />
        </div>

        <!-- Filename and language -->
        <div class="flex items-center space-x-2">
          <span
            v-if="filename"
            class="text-sm font-mono text-toned"
          >
            {{ filename }}
          </span>
          <UBadge
            v-if="language"
            :label="getLanguageLabel(language)"
            variant="soft"
            size="sm"
            color="secondary"
          />
        </div>
      </div>

      <!-- Copy button -->
      <ClientOnly>
        <button
          v-if="isSupported"
          class="inline-flex items-center justify-center w-8 h-8 rounded-md border border-muted bg-elevated hover:bg-accented transition-all duration-200"
          :class="copied ? 'text-primary border-primary' : 'text-toned hover:text-highlighted'"
          :aria-label="copied ? 'Copied!' : 'Copy code'"
          @click="handleCopy"
        >
          <UIcon
            :name="copied ? 'i-lucide-check' : 'i-lucide-copy'"
            class="size-4"
          />
        </button>
      </ClientOnly>
    </div>

    <!-- Code content with fixed spacing -->
    <div class="relative overflow-x-auto px-4 py-3">
      <pre
        :class="[$props.class]"
        class="font-mono text-base leading-relaxed m-0 p-0"
      ><slot /></pre>
    </div>
  </div>
</template>

<style scoped>
/* Fix first line indentation and bottom spacing */
pre :deep(code) {
  display: block;
  padding: 0;
  margin: 0;
  white-space: pre;
}

/* Remove any unwanted spacing from syntax highlighting wrappers */
pre :deep(.line:first-child) {
  margin-top: 0;
  padding-top: 0;
}

pre :deep(.line:last-child) {
  margin-bottom: 0;
  padding-bottom: 0;
}

/* Ensure no extra spacing from shiki wrapper */
pre :deep(> code) {
  display: block;
  padding: 0 !important;
  margin: 0 !important;
}
</style>
</file>

<file path="app/components/content/ProseStrong.vue">
<template>
    <strong class="font-semibold text-toned">
      <slot />
    </strong>
</template>
</file>

<file path="app/components/content/ProseTable.vue">
<!-- components/content/ProseTable.vue -->
<script setup lang="ts">
interface Props {
  class?: string
  style?: string
}

const props = withDefaults(defineProps<Props>(), {
  class: '',
  style: '',
})
</script>

<template>
  <div class="blog-table-wrapper my-8">
    <div class="table-scroll-container overflow-x-auto rounded-lg border border-muted bg-elevated/50">
      <table
        :class="['blog-table', 'w-full text-sm', 'border-collapse', props.class]"
        :style="props.style"
      >
        <slot />
      </table>
    </div>

    <div class="mt-2 text-xs text-dimmed text-center sm:hidden">
      <UIcon
        name="i-lucide-arrow-right"
        class="w-3 h-3 inline mr-1"
      />
      Scroll horizontally to view more
    </div>
  </div>
</template>

<style scoped>
@reference "@/assets/css/main.css";

.blog-table-wrapper {
  @apply mx-auto max-w-full rounded-2xl;
}

.table-scroll-container {
  scrollbar-width: thin;
  scrollbar-color: rgba(113, 113, 122, 0.5) transparent;
}

.table-scroll-container::-webkit-scrollbar {
  height: 8px;
}

.table-scroll-container::-webkit-scrollbar-thumb {
  background-color: rgba(113, 113, 122, 0.5);
  border-radius: 4px;
}

/* Header styling - Using secondary color */
.blog-table :deep(th) {
  @apply bg-elevated font-semibold text-highlighted px-6 py-4 text-left border-b-2 border-secondary;
}

/* Body cell styling - Using semantic colors */
.blog-table :deep(td) {
  @apply px-6 py-4 text-toned border-b border-muted;
}

/* Row hover effect - Using semantic colors */
.blog-table :deep(tbody tr) {
  @apply hover:bg-accented transition-colors duration-200;
}

/* Links in tables - Remove hardcoded styling, let ULink handle it */
.blog-table :deep(a) {
  /* No hardcoded styling - ULink defaults will apply */
}

/* Code in tables - Using secondary color */
.blog-table :deep(code) {
  @apply bg-accented text-secondary px-2 py-1 rounded text-xs font-mono;
}
</style>
</file>

<file path="app/components/content/ProseUl.vue">
<template>
    <ul class="mb-4 pl-6 list-disc [&_ul]:list-[circle] [&_ul]:mt-2 [&_ul]:mb-2 [&_ul_ul]:list-[square]">
      <slot />
    </ul>
</template>
</file>

<file path="app/components/content/Related.vue">
<!-- components/layout/RelatedContent.vue -->
<script setup lang="ts">
interface Props {
  /** Content collection to query */
  collection: string
  /** Current item to exclude from results */
  currentPath: string
  /** Field to match for related items */
  relatedBy?: string
  /** Value to match against (e.g., current category) */
  relatedValue?: string
  /** Maximum number of related items */
  limit?: number
  /** Field to order by */
  orderBy?: 'id' | 'stem' | 'extension' | 'meta'
  /** Order direction */
  orderDirection?: 'ASC' | 'DESC'
  /** Section title */
  title?: string
  /** Section badge text */
  badge?: string
  /** Badge color */
  badgeColor?: string
  /** Grid columns for different breakpoints */
  gridCols?: string
}

const props = withDefaults(defineProps<Props>(), {
  relatedBy: 'category',
  limit: 4,
  orderBy: 'id',
  orderDirection: 'DESC',
  title: 'Related Content',
  badge: 'Continue Reading',
  badgeColor: 'primary',
  gridCols: 'md:grid-cols-2'
})

// Query related content
const { data: relatedItems, pending } = await useAsyncData(
  `related-${props.collection}-${props.currentPath}-${props.relatedValue}`,
  async () => {
    let query = queryCollection(props.collection)
      .where('path', '<>', props.currentPath)
      .order(props.orderBy, props.orderDirection)
      .limit(props.limit)

    // Add related field filter if provided
    if (props.relatedBy && props.relatedValue) {
      query = query.where(props.relatedBy, '=', props.relatedValue)
    }

    return await query.all()
  }
)

const hasRelatedItems = computed(() => relatedItems.value && relatedItems.value.length > 0)
</script>

<template>
  <div
    v-if="hasRelatedItems"
    class="my-12"
  >
    <!-- Fixed Header -->
    <Header
      :title="title"
      :badge="badge"
      :badge-color="badgeColor"
    />

    <!-- Loading State -->
    <div 
      v-if="pending"
      class="grid gap-6"
      :class="gridCols"
    >
      <USkeleton 
        v-for="i in limit" 
        :key="i"
        class="h-48 w-full" 
      />
    </div>

    <!-- Related Items Grid -->
    <div 
      v-else
      class="grid gap-6"
      :class="gridCols"
    >
      <!-- Default slot receives all items -->
      <slot :items="relatedItems">
        <!-- Fallback: render basic cards -->
        <UCard 
          v-for="(item, index) in relatedItems"
          :key="`${item.stem}-${index}`"
          class="hover:shadow-lg transition-shadow"
        >
          <template #header>
            <h3 class="font-semibold line-clamp-2">{{ item.title }}</h3>
          </template>
          
          <p v-if="item.description" class="text-sm text-gray-600 dark:text-gray-400 line-clamp-3">
            {{ item.description }}
          </p>
          
          <template #footer>
            <ULink 
              :to="item.stem"
              class="text-sm text-primary hover:underline"
            >
              Read more →
            </ULink>
          </template>
        </UCard>
      </slot>
    </div>
  </div>
</template>
</file>

<file path="app/components/layout/Background.vue">
<!-- app/components/layout/Background.vue - UPDATED -->
<script setup lang="ts">
import backgroundStyles from '~~/theme/layout/background'

interface Props {
  preset?: 'none' | 'circuit' | 'neural' | 'quantum' | 'cyber' | 'subtle' | 'muted' | 'elevated'
  pattern?: 'circuit' | 'dots' | 'grid' | 'neural-network' | 'quantum-dots' | 'none'
  intensity?: 'light' | 'medium' | 'strong'
  gradient?: 'neural' | 'quantum' | 'cyber' | 'none'
  motion?: boolean
  as?: string
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  preset: 'none',
  pattern: 'none',
  intensity: 'medium',
  gradient: 'none',
  motion: false,
  as: 'div'
})

const styles = computed(() => backgroundStyles(props))

// Only apply effects when preset is not 'none'
const shouldApplyEffects = computed(() => props.preset !== 'none')
</script>

<template>
  <component 
    :is="as"
    :class="[styles.root(), $attrs.class]"
  >
    <slot />
  </component>
</template>
</file>

<file path="app/components/layout/Center.vue">
<!-- app/components/layout/Center.vue -->
<script setup lang="ts">
import centerStyles from '~~/theme/layout/center'

interface Props {
  variant?: 'default' | 'narrow' | 'prose' | 'wide' | 'full' | 'text-only' | 'no-padding'
  as?: string
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'default',
  as: 'div'
})

const styles = computed(() => centerStyles(props))
</script>

<template>
  <component 
    :is="as"
    :class="[styles.root(), $attrs.class]"
    v-bind="$attrs"
  >
    <slot />
  </component>
</template>
</file>

<file path="app/components/layout/Cluster.vue">
<!-- app/components/layout/Cluster.vue -->
<script setup lang="ts">
import clusterStyles from '~~/theme/layout/cluster'

interface Props {
  variant?: 'default' | 'centered' | 'between' | 'end' | 'tight' | 'loose' | 'no-wrap' | 'vertical' | 'inline'
  as?: string
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'default',
  as: 'div'
})

const styles = computed(() => clusterStyles(props))
</script>

<template>
  <component 
    :is="as"
    :class="[styles.root(), $attrs.class]"
    v-bind="$attrs"
  >
    <slot />
  </component>
</template>
</file>

<file path="app/components/layout/Container.vue">
<!-- app/components/layout/Container.vue -->
<script setup lang="ts">
import containerStyles from '~~/theme/layout/container'

interface Props {
  size?: 'narrow' | 'default' | 'wide' | 'full'
  align?: 'left' | 'center' | 'right'
  as?: string
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  size: 'default',
  align: 'center',
  as: 'div'
})

const styles = computed(() => containerStyles(props))
</script>

<template>
  <component 
    :is="as"
    :class="[styles.root(), $attrs.class]"
  >
    <slot />
  </component>
</template>
</file>

<file path="app/components/layout/Divider.vue">
<!-- app/components/layout/Divider.vue -->
<script setup lang="ts">
import dividerStyles from '~~/theme/layout/divider'

interface Props {
  variant?: 'line' | 'gradient' | 'dotted' | 'branded'
  spacing?: 'sm' | 'md' | 'lg' | 'xl'
  orientation?: 'horizontal' | 'vertical'
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'line',
  spacing: 'md',
  orientation: 'horizontal'
})

const styles = computed(() => dividerStyles(props))
</script>

<template>
  <div :class="[styles.root(), $attrs.class]">
    <div :class="styles.line()" />
  </div>
</template>
</file>

<file path="app/components/layout/Frame.vue">
<!-- app/components/layout/Frame.vue -->
<script setup lang="ts">
import frameStyles from '~~/theme/layout/frame'

interface Props {
  variant?: 'video' | 'square' | 'portrait' | 'wide' | 'golden' | 'tall' | 'cinema' | 'card'
  as?: string
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'video',
  as: 'div'
})

const styles = computed(() => frameStyles(props))
</script>

<template>
  <component 
    :is="as"
    :class="[styles.root(), $attrs.class]"
    v-bind="$attrs"
  >
    <slot />
  </component>
</template>
</file>

<file path="app/components/layout/Grid.vue">
<!-- app/components/layout/Grid.vue -->
<script setup lang="ts">
import gridStyles from '~~/theme/layout/grid'

interface Props {
  variant?: 'auto' | 'thirds' | 'halves' | 'quarters' | 'cards' | 'compact' | 'wide' | 'masonry'
  as?: string
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'auto',
  as: 'div'
})

const styles = computed(() => gridStyles(props))
</script>

<template>
  <component 
    :is="as"
    :class="[styles.root(), $attrs.class]"
    v-bind="$attrs"
  >
    <slot />
  </component>
</template>
</file>

<file path="app/components/layout/Heading.vue">
<!-- app/components/layout/Heading.vue - PROPS-BASED -->
<script setup lang="ts">
import headingStyles from '~~/theme/heading'

interface Props {
  text: string  // Required - the heading text
  id?: string   // Optional - custom ID, defaults to slugified text
  level?: 1 | 2 | 3 | 4 | 5 | 6
  variant?: 'default' | 'section' | 'hero' | 'hero-subtitle' | 'card' | 'muted' | 'accent'
  align?: 'left' | 'center' | 'right'
  anchor?: boolean
  anchorIcon?: boolean
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  level: 2,
  variant: 'default',
  align: 'left',
  anchor: false,
  anchorIcon: true
})

const htmlElement = computed(() => `h${props.level}`)
const styles = computed(() => headingStyles(props))

// Simple slug creation
const createSlug = (text: string): string => {
  return text
    .toLowerCase()
    .replace(/[^\w\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/--+/g, '-')
    .replace(/^-+|-+$/g, '')
    .trim()
}

// Use provided ID or generate from text
const headingId = computed(() => {
  return props.id || createSlug(props.text)
})
</script>

<template>
  <!-- With anchor wrapper -->
  <NavAnchor
    v-if="anchor"
    :id="headingId"
    :as="htmlElement"
    :show-icon="anchorIcon"
    :class="styles.root()"
  >
    {{ text }}
  </NavAnchor>
  
  <!-- Plain heading -->
  <component 
    :is="htmlElement"
    v-else
    :id="headingId"
    :class="[styles.root(), $attrs.class]"
    v-bind="$attrs"
  >
    {{ text }}
  </component>
</template>
</file>

<file path="app/components/layout/Motion.vue">
<!-- components/motion/MotionGroup.vue -->
<script setup lang="ts">
interface MotionPreset {
  container?: {
    initial: Record<string, any>
    visible: Record<string, any>
  }
  children: Record<
    string,
    {
      initial: Record<string, any>
      visible: Record<string, any>
      delay?: number
    }
  >
  stagger?: number
}

interface Props {
  /** Preset configuration name */
  preset?: 'blog-card' | 'hero-section' | 'feature-grid' | 'none'
  /** Disable all motion */
  disabled?: boolean
  /** Override stagger timing */
  stagger?: number
  /** Custom element to render */
  is?: string
}

const props = withDefaults(defineProps<Props>(), {
  preset: 'blog-card',
  disabled: false,
  stagger: 50,
  is: 'div',
})

const container = ref<HTMLElement>()

// Preset configurations
const presets: Record<string, MotionPreset> = {
  'blog-card': {
    container: {
      initial: { opacity: 0, y: 20 },
      visible: { opacity: 1, y: 0, transition: { duration: 600, ease: 'easeOut' } },
    },
    children: {
      'h1, h2, h3, h4, h5, h6': {
        initial: { opacity: 0, x: -20 },
        visible: { opacity: 1, x: 0 },
        delay: 100,
      },
      'p, span:not(.iconify)': {
        initial: { opacity: 0, y: 15 },
        visible: { opacity: 1, y: 0 },
        delay: 200,
      },
      'button, a[role="button"], .button': {
        initial: { opacity: 0, scale: 0.95 },
        visible: { opacity: 1, scale: 1 },
        delay: 300,
      },
      'img, picture': {
        initial: { opacity: 0, scale: 0.9 },
        visible: { opacity: 1, scale: 1 },
        delay: 150,
      },
      '.badge, [class*="badge"]': {
        initial: { opacity: 0, scale: 0.8 },
        visible: { opacity: 1, scale: 1 },
        delay: 250,
      },
    },
    stagger: 75,
  },
  'hero-section': {
    container: {
      initial: { opacity: 0 },
      visible: { opacity: 1, transition: { duration: 800 } },
    },
    children: {
      'h1': {
        initial: { opacity: 0, y: 30, scale: 0.95 },
        visible: { opacity: 1, y: 0, scale: 1 },
        delay: 200,
      },
      'p': {
        initial: { opacity: 0, y: 20 },
        visible: { opacity: 1, y: 0 },
        delay: 400,
      },
      'button, a[role="button"]': {
        initial: { opacity: 0, scale: 0.9 },
        visible: { opacity: 1, scale: 1 },
        delay: 600,
      },
      'img': {
        initial: { opacity: 0, scale: 0.8, rotateX: -15 },
        visible: { opacity: 1, scale: 1, rotateX: 0 },
        delay: 0,
      },
    },
    stagger: 100,
  },
  'feature-grid': {
    container: {
      initial: { opacity: 0 },
      visible: { opacity: 1, transition: { duration: 600 } },
    },
    children: {
      ':scope > *': {
        initial: { opacity: 0, y: 30, scale: 0.95 },
        visible: { opacity: 1, y: 0, scale: 1 },
        delay: 0,
      },
    },
    stagger: 150,
  },
  'none': {
    children: {},
  },
}

// Client-side only motion application
onMounted(() => {
  if (props.disabled || !container.value || props.preset === 'none') return

  const config = presets[props.preset]
  if (!config) return

  // Apply container motion if defined
  if (config.container) {
    useMotion(container, {
      initial: config.container.initial,
      visibleOnce: config.container.visible,
    })
  }

  // Apply motion to child elements
  Object.entries(config.children).forEach(([selector, motionConfig]) => {
    const elements = container.value!.querySelectorAll(selector)

    elements.forEach((element, index) => {
      const staggerDelay = index * (props.stagger || config.stagger || 50)
      const totalDelay = (motionConfig.delay || 0) + staggerDelay

      // Create motion instance for each element
      useMotion(element as HTMLElement, {
        initial: motionConfig.initial,
        visibleOnce: {
          ...motionConfig.visible,
          transition: {
            duration: 600,
            ease: 'easeOut',
            delay: totalDelay,
            ...motionConfig.visible.transition,
          },
        },
      })
    })
  })
})
</script>

<template>
  <!-- Server-side render without motion, client-side gets motion -->
  <component
    :is="is"
    ref="container"
    :style="disabled ? {} : { opacity: preset === 'none' ? 1 : 0 }"
  >
    <slot />
  </component>
</template>
</file>

<file path="app/components/layout/Section.vue">
<!-- app/components/layout/Section.vue -->
<script setup lang="ts">
import sectionStyles from '~~/theme/layout/section'

interface Props {
  variant?: 'default' | 'compact' | 'generous' | 'hero' | 'minimal'
  background?: 'none' | 'circuit' | 'neural' | 'quantum' | 'cyber'
  as?: string
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'default',
  background: 'none',
  as: 'section'
})

const styles = computed(() => sectionStyles(props))
</script>

<template>
    <LayoutBackground 
        :as="as"
        :preset="background"
        :class="[styles.root(), $attrs.class]"
    >
        <slot />
    </LayoutBackground>
</template>
</file>

<file path="app/components/layout/Sidebar.vue">
<!-- components/layout/Sidebar.vue -->
<script setup lang="ts">
interface SidebarItem {
  key: string
  label: string
  path: string
  count?: number
  icon?: string
}

interface Props {
  /** Content type/collection to query */
  contentType: string
  /** Base path for navigation (e.g., '/blog', '/products') */
  basePath: string
  /** Current category filter */
  category?: string
  /** Custom navigation items to add */
  customItems?: SidebarItem[]
  /** Search placeholder text */
  searchPlaceholder?: string
  /** Show search component */
  showSearch?: boolean
  /** Sidebar title */
  title?: string
  /** Sticky positioning */
  sticky?: boolean
}

const props = withDefaults(defineProps<Props>(), {
  searchPlaceholder: 'Search...',
  showSearch: true,
  sticky: true,
    title: 'Navigation',
    category: 'all',
    customItems: () => [],

})

const route = useRoute()

// Use existing metadata API
const { data: contentData, pending, error, refresh } = useLazyAsyncData(
  `sidebar-${props.contentType}-${props.category || 'all'}`,
  () => $fetch('/api/content/metadata', {
    query: {
      collection: props.contentType,
      category: props.category || 'all'
    }
  })
)

// Generate navigation items from metadata
const navigationItems = computed(() => {
  if (!contentData.value?.categories) return props.customItems || []

  const items: SidebarItem[] = []
  const categories = contentData.value.categories

  // Add "All" item
  items.push({
    key: 'all',
    label: 'All Items',
    path: props.basePath,
    count: categories.all || 0,
    icon: 'i-lucide-grid-3x3'
  })

  // Add category items (exclude 'all' from iteration)
  Object.entries(categories)
    .filter(([key]) => key !== 'all')
    .forEach(([category, count]) => {
      items.push({
        key: category,
        label: formatLabel(category),
        path: `${props.basePath}/${category}`,
        count: count as number,
        icon: getGroupIcon(category)
      })
    })

  // Add custom items
  if (props.customItems) {
    items.push(...props.customItems)
  }

  return items
})

const isActive = (path: string) => route.path === path
const isLoading = computed(() => pending.value)

// Helper functions
function formatLabel(key: string): string {
  return key
    .split('-')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ')
}

function getGroupIcon(group: string): string {
  const iconMap: Record<string, string> = {
    'ai-automation': 'i-lucide-bot',
    'business-automation': 'i-lucide-briefcase',
    'space-tech': 'i-lucide-rocket',
    'future-ai': 'i-lucide-brain',
    'company-culture': 'i-lucide-users',
    'product': 'i-lucide-package',
    'service': 'i-lucide-wrench',
    'tutorial': 'i-lucide-book-open',
    'guide': 'i-lucide-map',
    'news': 'i-lucide-newspaper',
    'showcase': 'i-lucide-eye',
    'template': 'i-lucide-layout-template'
  }
  return iconMap[group] || 'i-lucide-folder'
}
</script>

<template>
  <aside class="h-full">
    <!-- Loading State -->
    <UCard
      v-if="isLoading"
      variant="outline"
      class="bg-elevated/50 border-default"
      :class="{ 'sticky top-24': sticky }"
    >
      <template v-if="showSearch" #header>
        <USkeleton class="h-10 w-full" />
      </template>
      <div class="space-y-2">
        <USkeleton class="h-8 w-full" />
        <USkeleton class="h-8 w-3/4" />
        <USkeleton class="h-8 w-2/3" />
        <USkeleton class="h-8 w-1/2" />
      </div>
    </UCard>

    <!-- Error State -->
    <UCard
      v-else-if="error"
      variant="outline"
      class="bg-elevated/50 border-default"
      :class="{ 'sticky top-24': sticky }"
    >
      <div class="text-center p-4">
        <UIcon name="i-lucide-alert-circle" class="size-8 text-red-500 mx-auto mb-2" />
        <p class="text-sm text-red-600 dark:text-red-400 mb-2">Failed to load navigation</p>
        <UButton
          variant="ghost"
          size="sm"
          @click="() => refresh()"
        >
          Retry
        </UButton>
      </div>
    </UCard>

    <!-- Main Sidebar -->
    <UCard
      v-else
      variant="outline"
      class="bg-elevated/50 border-default"
      :class="{ 'sticky top-24': sticky }"
    >
      <!-- Search Slot -->
      <template v-if="showSearch" #header>
        <slot name="search" :placeholder="searchPlaceholder">
          <div class="relative">
            <UIcon name="i-lucide-search" class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 size-4" />
            <input
              type="text"
              :placeholder="searchPlaceholder"
              class="w-full pl-10 pr-4 py-2 border border-gray-200 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-900 text-sm focus:ring-2 focus:ring-primary/50 focus:border-primary"
            >
          </div>
        </slot>
      </template>

      <div class="space-y-6">
        <!-- Custom Header Slot -->
        <slot name="header" />

        <!-- Navigation Section -->
        <div class="space-y-3">
          <h4 
            v-if="title" 
            class="text-sm font-medium text-muted uppercase tracking-wide"
          >
            {{ title }}
          </h4>

          <div class="space-y-1">
            <!-- Before Items Slot -->
            <slot name="before-items" />

            <!-- Navigation Items -->
            <ULink
              v-for="item in navigationItems"
              :key="item.key"
              :to="item.path"
              class="flex items-center justify-between p-3 rounded-lg transition-colors group"
              :class="
                isActive(item.path)
                  ? 'bg-primary/10 text-primary border border-primary/20'
                  : 'hover:bg-muted text-dimmed hover:text-toned'
              "
            >
              <div class="flex items-center gap-2">
                <UIcon 
                  v-if="item.icon" 
                  :name="item.icon" 
                  class="size-4 shrink-0" 
                />
                <span
                  class="text-sm truncate"
                  :class="item.key === 'all' ? 'font-medium' : ''"
                >
                  {{ item.label }}
                </span>
              </div>
              
              <div 
                v-if="typeof item.count === 'number'"
                class="text-xs flex rounded-full justify-center items-center relative w-6 h-5 shrink-0"
              >
                <span class="text-xs font-medium text-muted">
                  {{ item.count }}
                </span>
              </div>
            </ULink>

            <!-- After Items Slot -->
            <slot name="after-items" />
          </div>
        </div>

        <!-- Custom Footer Slot -->
        <slot name="footer" />
      </div>
    </UCard>
  </aside>
</template>
</file>

<file path="app/components/layout/Spacer.vue">
<!-- app/components/layout/Spacer.vue -->
<script setup lang="ts">
import spacerStyles from '~~/theme/layout/spacer'

interface Props {
  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl'
  responsive?: boolean
  as?: string
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  size: 'md',
  responsive: true,
  as: 'div'
})

const styles = computed(() => spacerStyles(props))
</script>

<template>
  <component 
    :is="as"
    :class="[styles.root(), $attrs.class]"
  />
</template>
</file>

<file path="app/components/layout/Split.vue">
<!-- app/components/layout/Split.vue -->
<script setup lang="ts">
import splitStyles from '~~/theme/layout/split'

interface Props {
  variant?: 'default' | 'narrow' | 'wide' | 'stack-lg' | 'reverse'
  as?: string
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'default',
  as: 'div'
})

const styles = computed(() => splitStyles(props))
</script>

<template>
  <component 
    :is="as"
    :class="[styles.root(), $attrs.class]"
    v-bind="$attrs"
  >
  <div>
        <slot name="primary" />
    </div>
    <div>
      <slot name="secondary" />
    </div>
  </component>
</template>
</file>

<file path="app/components/layout/Stack.vue">
<!-- app/components/layout/Stack.vue -->
<script setup lang="ts">
import stackStyles from '~~/theme/layout/stack'

interface Props {
  variant?: 'default' | 'centered' | 'compact' | 'spacious' | 'horizontal' | 'horizontal-between' | 'horizontal-center' | 'stack-to-row' | 'center-to-between'
  as?: string
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'default',
  as: 'div'
})

const styles = computed(() => stackStyles(props))
</script>

<template>
  <component 
    :is="as"
    :class="[styles.root(), $attrs.class]"
    v-bind="$attrs"
  >
    <slot />
  </component>
</template>
</file>

<file path="app/components/layout/Text.vue">
<!-- app/components/layout/Text.vue - PROPS-BASED -->
<script setup lang="ts">
import textStyles from '~~/theme/text'

interface Props {
  text: string
  variant?: 'default' | 'subtitle' | 'hero-subtitle' | 'description' | 'caption' | 'small' | 'muted' | 'highlighted'
  as?: string
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  variant: 'default',
  as: 'p'
})

const styles = computed(() => textStyles(props))
</script>

<template>
  <component 
    :is="as"
    :class="[styles.root(), $attrs.class]"
    v-bind="$attrs"
  >
    {{ text }}
  </component>
</template>
</file>

<file path="app/components/layout/Wrapper.vue">
<!-- app/components/layout/Wrapper.vue -->
<script setup lang="ts">
import { useSlots } from 'vue'

interface Props {
  spacing?: 'compact' | 'standard' | 'generous'
}

withDefaults(defineProps<Props>(), {
  spacing: 'standard',
})

const slots = useSlots()

const spacingClasses = {
  compact: 'section-spacing-compact',
  standard: 'section-spacing',
  generous: 'section-spacing-generous',
}

// Extract actual components from fragment
const getComponents = () => {
  const slotContent = slots.default?.()
  if (!slotContent) return []

  // Handle fragment case
  const firstSlot = slotContent[0]
  if (firstSlot?.children && Array.isArray(firstSlot.children)) {
    return firstSlot.children
  }

  // Fallback to direct slots
  return slotContent
}
</script>

<template>
  <div>
    <section
      v-for="(child, index) in getComponents()"
      :key="child?.key || index"
      >
      <component
        :is="child"
        :class="spacingClasses[spacing]"
      />
    </section>
  </div>
</template>
</file>

<file path="app/components/media/Image.vue">
<!-- app/components/media/Image.vue -->
<script setup lang="ts">
import { useIntersectionObserver, useMediaQuery } from '@vueuse/core'
import imageStyles from '~~/theme/image'

interface Props {
  // Image source
  src: string
  alt: string
  
  // Display
  aspectRatio?: 'square' | 'video' | 'portrait' | 'wide' | 'auto'
  objectFit?: 'cover' | 'contain' | 'fill' | 'none'
  
  // Optimization
  width?: number
  height?: number
  quality?: number
  format?: 'webp' | 'avif' | 'jpeg' | 'jpg' | 'png' | 'gif'
  
  // Responsive
  sizes?: string
  densities?: string
  
  // Behavior
  loading?: 'lazy' | 'eager'
  placeholder?: boolean | string | number | number[]
  preload?: boolean
  
  // Theme
  ui?: any
  class?: string
}

const props = withDefaults(defineProps<Props>(), {
  aspectRatio: 'auto',
  objectFit: 'cover',
  loading: 'lazy',
  placeholder: true,
  quality: 80,
  format: 'webp'
})

// Refs
const containerRef = ref<HTMLElement>()
const isLoaded = ref(false)
const hasError = ref(false)
const shouldLoad = ref(false)

// Media queries
const isMobile = useMediaQuery('(max-width: 768px)', { ssrWidth: 768 })
const isHighDPI = useMediaQuery('(min-resolution: 2dppx)')

// Intersection Observer for lazy loading
const { stop } = useIntersectionObserver(
  containerRef,
  ([{ isIntersecting }]) => {
    if (isIntersecting && props.loading === 'lazy' && !shouldLoad.value) {
      shouldLoad.value = true
      stop()
    }
  },
  {
    threshold: 0.1,
    rootMargin: '50px'
  }
)

// Load immediately if eager
watchEffect(() => {
  if (props.loading === 'eager') {
    shouldLoad.value = true
  }
})

// Responsive sizing optimization
const responsiveProps = computed(() => {
  const baseProps: any = {
    src: props.src,
    alt: props.alt,
    quality: props.quality,
    format: props.format,
    loading: props.loading,
    placeholder: props.placeholder,
    preload: props.preload
  }

  // Add dimensions if provided
  if (props.width) baseProps.width = props.width
  if (props.height) baseProps.height = props.height
  
  // Add responsive props
  if (props.sizes) baseProps.sizes = props.sizes
  if (props.densities) baseProps.densities = props.densities

  // Mobile optimizations
  if (isMobile.value) {
    // Reduce quality slightly on mobile to save bandwidth
    baseProps.quality = Math.max(60, (props.quality || 80) - 10)
    
    // Add mobile-optimized densities if not specified
    if (!props.densities && isHighDPI.value) {
      baseProps.densities = 'x1 x2'
    }
  }

  return baseProps
})

// Event handlers
const handleLoad = () => {
  isLoaded.value = true
  hasError.value = false
}

const handleError = (event: string | Event) => {
  isLoaded.value = false
  hasError.value = true
  console.warn('Failed to load image:', props.src, event)
}

// Computed styles with loading state
const computedStyles = computed(() => imageStyles({
  ...props,
  loading: !isLoaded.value && shouldLoad.value
}))
</script>

<template>
  <div 
    ref="containerRef"
    :class="computedStyles.root()"
  >
    <!-- Actual Image (NuxtImg) -->
    <NuxtImg
      v-if="shouldLoad"
      v-bind="responsiveProps"
      :class="computedStyles.image()"
      @load="handleLoad"
      @error="handleError"
    />

    <!-- Error State -->
    <div 
      v-if="hasError"
      :class="computedStyles.error()"
    >
      <UIcon name="i-lucide-image-off" class="size-8 mb-2" />
      <p class="text-sm font-medium">Failed to load image</p>
      <p class="text-xs mt-1 opacity-75">{{ src }}</p>
    </div>

    <!-- Lazy Loading Placeholder -->
    <div 
      v-if="!shouldLoad && loading === 'lazy'"
      :class="computedStyles.placeholder()"
    >
      <UIcon name="i-lucide-image" class="size-8 text-muted" />
    </div>
  </div>
</template>
</file>

<file path="app/components/media/Video.vue">
<!-- app/components/media/Video.vue -->
<script setup lang="ts">
import { useIntersectionObserver, useMediaQuery, useMediaControls } from '@vueuse/core'
import mediaStyles from '~~/theme/video'

interface Props {
  // Video source (from public directory)
  src: string
  poster?: string
  
  // Display
  aspectRatio?: 'square' | 'video' | 'portrait' | 'wide' | 'auto'
  
  // Behavior
  autoplay?: boolean
  muted?: boolean
  loop?: boolean
  controls?: boolean
  
  // Loading
  loading?: 'lazy' | 'eager'
  
  // Theme
  ui?: any
  class?: string
}

const props = withDefaults(defineProps<Props>(), {
  aspectRatio: 'video',
  autoplay: false,
  muted: true,
  loop: false,
  controls: false, // We'll handle custom controls
  loading: 'lazy',
})

const styles = computed(() => mediaStyles(props))

// Refs
const containerRef = ref<HTMLElement>()
const videoRef = ref<HTMLVideoElement>()

// State
const isLoading = ref(true)
const hasError = ref(false)
const shouldLoad = ref(false)
const showControls = ref(false)

// Media queries for responsive behavior
const isMobile = useMediaQuery('(max-width: 768px)', { ssrWidth: 768 })
const prefersReducedMotion = useMediaQuery('(prefers-reduced-motion: reduce)')

// VueUse Media Controls
const {
  playing,
  currentTime,
  duration,
  waiting,
  muted,
  volume,
  ended
} = useMediaControls(videoRef, {
  src: computed(() => shouldLoad.value ? props.src : ''),
})

// Intersection Observer for lazy loading
const { stop } = useIntersectionObserver(
  containerRef,
  ([{ isIntersecting }]) => {
    if (isIntersecting && props.loading === 'lazy' && !shouldLoad.value) {
      shouldLoad.value = true
      stop() // Stop observing once loaded
    }
  },
  {
    threshold: 0.1,
    rootMargin: '50px'
  }
)

// Load immediately if eager
watchEffect(() => {
  if (props.loading === 'eager') {
    shouldLoad.value = true
  }
})

// Auto-hide controls on mobile after interaction
let controlsTimeout: ReturnType<typeof setTimeout>
const handleInteraction = () => {
  if (isMobile.value) {
    showControls.value = true
    clearTimeout(controlsTimeout)
    controlsTimeout = setTimeout(() => {
      showControls.value = false
    }, 3000)
  }
}

// Video event handlers
const handleLoadedData = () => {
  isLoading.value = false
  hasError.value = false
}

const handleError = () => {
  isLoading.value = false
  hasError.value = true
}

// Play/pause toggle
const togglePlay = () => {
  playing.value = !playing.value
  handleInteraction()
}

// Responsive autoplay behavior
const shouldAutoplay = computed(() => {
  return props.autoplay && 
         !isMobile.value && 
         !prefersReducedMotion.value &&
         props.muted
})

// Set initial muted state
watchEffect(() => {
  if (videoRef.value && props.muted !== undefined) {
    muted.value = props.muted
  }
})

// Auto-play when video is ready (respecting user preferences)
watch([videoRef, shouldAutoplay], () => {
  if (videoRef.value && shouldAutoplay.value && !playing.value) {
    playing.value = true
  }
})

// Computed styles with state
const computedStyles = computed(() => mediaStyles({
  ...props,
  loading: isLoading.value,
  error: hasError.value
}))

// Format time for display
const formatTime = (seconds: number) => {
  const mins = Math.floor(seconds / 60)
  const secs = Math.floor(seconds % 60)
  return `${mins}:${secs.toString().padStart(2, '0')}`
}

// Progress percentage
const progressPercent = computed(() => {
  if (!duration.value) return 0
  return (currentTime.value / duration.value) * 100
})
</script>

<template>
  <div 
    ref="containerRef"
    :class="computedStyles.root()"
    @click="togglePlay"
    @touchstart="handleInteraction"
  >
    <!-- Video Element -->
    <video
      v-if="shouldLoad"
      ref="videoRef"
      :class="computedStyles.video()"
      :poster="poster"
      :muted="muted"
      :loop="loop"
      :controls="controls && !isMobile"
      preload="metadata"
      playsinline
      @loadeddata="handleLoadedData"
      @error="handleError"
    >
      <source :src="src" type="video/mp4">
      <p>Your browser doesn't support video playback.</p>
    </video>

    <!-- Custom Controls Overlay (Mobile) -->
    <div 
      v-if="!controls && !hasError && shouldLoad"
      :class="computedStyles.controls()"
      class="opacity-0 hover:opacity-100"
      :style="{ 
        opacity: isMobile && showControls ? 1 : undefined 
      }"
    >
      <!-- Play/Pause Button -->
      <div class="flex flex-col items-center gap-2">
        <UIcon 
          :name="playing ? 'i-lucide-pause' : 'i-lucide-play'"
          class="size-12 text-white drop-shadow-lg"
        />
        
        <!-- Progress Bar (Mobile only) -->
        <div 
          v-if="isMobile && duration > 0"
          class="w-32 h-1 bg-white/30 rounded-full overflow-hidden"
        >
          <div 
            class="h-full bg-white transition-all duration-200"
            :style="{ width: `${progressPercent}%` }"
          />
        </div>
        
        <!-- Time Display (Mobile only) -->
        <div 
          v-if="isMobile && duration > 0"
          class="text-xs text-white/80 font-mono"
        >
          {{ formatTime(currentTime) }} / {{ formatTime(duration) }}
        </div>
      </div>
    </div>

    <!-- Loading State -->
    <div 
      v-if="isLoading && shouldLoad"
      :class="computedStyles.overlay()"
    >
      <div :class="computedStyles.loadingState()">
        <UIcon name="i-lucide-loader" class="size-8 animate-spin" />
      </div>
    </div>

    <!-- Error State -->
    <div 
      v-if="hasError"
      :class="computedStyles.overlay()"
    >
      <div :class="computedStyles.errorState()">
        <UIcon name="i-lucide-video-off" class="size-12 mb-2" />
        <p class="text-sm mb-3">Failed to load video</p>
        <p class="text-xs opacity-75">{{ src }}</p>
      </div>
    </div>

    <!-- Lazy Loading Placeholder -->
    <div 
      v-if="!shouldLoad && loading === 'lazy'"
      :class="computedStyles.overlay()"
    >
      <div :class="computedStyles.loadingState()">
        <UIcon name="i-lucide-video" class="size-8" />
      </div>
    </div>

    <!-- Waiting/Buffering Indicator -->
    <div 
      v-if="waiting && !hasError"
      :class="computedStyles.overlay()"
    >
      <div :class="computedStyles.loadingState()">
        <UIcon name="i-lucide-loader" class="size-6 animate-spin" />
      </div>
    </div>
  </div>
</template>
</file>

<file path="app/components/nav/Anchor.vue">
<!-- app/components/layout/Anchor.vue - SIMPLIFIED -->
<script setup lang="ts">
import anchorStyles from '~~/theme/anchor'

interface Props {
  id: string    // Required - the anchor ID
  as?: string
  showIcon?: boolean
  iconPosition?: 'left' | 'right'
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  as: 'div',
  showIcon: true,
  iconPosition: 'left'
})

const route = useRoute()
const styles = computed(() => anchorStyles(props))

// Check if this anchor is currently active
const isActive = computed(() => {
  const currentHash = route.hash.replace('#', '')
  return currentHash === props.id
})
</script>

<template>
  <component
    :is="as"
    :id="id"
    :class="[styles.root(), $attrs.class]"
    v-bind="$attrs"
  >
    <ULink 
      :to="`#${id}`"
      :class="styles.link()"
      :aria-label="`Link to ${id} section`"
      :aria-current="isActive ? 'location' : undefined"
      raw
      active-class="text-primary"
      inactive-class="text-inherit"
    >
      <slot />
      
      <UIcon 
        v-if="showIcon && iconPosition === 'left'" 
        name="i-lucide-hash" 
        :class="[styles.icon(), isActive && 'opacity-100']" 
      />
    </ULink>
  </component>
</template>
</file>

<file path="app/components/nav/Footer.vue">
<script setup lang="ts">
const { public: config } = useRuntimeConfig()

const currentYear = new Date().getFullYear()

const quickLinks = [
  { label: 'Blog', to: '/blog' },
]

const socialLinks = [
  {
    label: 'LinkedIn',
    icon: 'i-lucide-linkedin',
    to: 'https://linkedin.com/company/incubrain',
    target: '_blank',
  },
  {
    label: 'GitHub',
    icon: 'i-lucide-github',
    to: 'https://github.com/incubrain',
    target: '_blank',
  },
  {
    label: 'Twitter',
    icon: 'i-lucide-twitter',
    to: 'https://twitter.com/incubrain',
    target: '_blank',
  },
]
</script>

<template>
  <footer class="bg-elevated border-t border-default">
    <UContainer>
      <div class="py-8 md:py-12">
        <!-- Main Content Grid -->
        <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 lg:gap-12">
          <!-- Brand & Description -->
          <div class="space-y-4 sm:col-span-2 lg:col-span-1">
            <div class="flex items-center space-x-2">
              <Logo size="md" />
            </div>
            <p class="text-muted max-w-md leading-relaxed">
              AI automation specialists with space tech expertise. Stop losing money to manual
              processes.
            </p>
            <div class="flex space-x-3 pt-2">
              <UButton
                v-for="social in socialLinks"
                :key="social.label"
                variant="ghost"
                color="neutral"
                size="sm"
                square
                :to="social.to"
                :target="social.target"
                :aria-label="social.label"
                class="hover:text-primary transition-colors"
              >
                <UIcon
                  :name="social.icon"
                  class="size-4"
                />
              </UButton>
            </div>
          </div>

          <!-- Quick Links -->
          <div class="space-y-4">
            <h3 class="font-semibold text-highlighted text-base">Quick Links</h3>
            <nav class="flex flex-col space-y-3">
              <ULink
                v-for="link in quickLinks"
                :key="link.label"
                :to="link.to"
                class="text-muted hover:text-primary transition-colors text-sm"
              >
                {{ link.label }}
              </ULink>
            </nav>
          </div>

          <!-- Contact Info -->
          <div class="space-y-4">
            <h3 class="font-semibold text-highlighted text-base">Get In Touch</h3>
            <div class="space-y-4">
              <UButton
                label="WhatsApp"
                color="primary"
                variant="outline"
                size="sm"
                leading-icon="i-lucide-message-circle"
                :to="`https://wa.me/${config.whatsappNumber}?text=Hi! I'm interested in AI automation consultation.`"
                target="_blank"
                class="w-full sm:w-auto"
              />
              <div class="text-sm text-muted space-y-2">
                <p>
                  <a
                    :href="`mailto:${config.contactEmail}`"
                    class="hover:text-primary transition-colors"
                  >
                    {{ config.contactEmail }}
                  </a>
                </p>
                <p>
                  <a
                    href="https://maps.google.com/?q=Pune,Maharashtra,India"
                    target="_blank"
                    class="hover:text-primary transition-colors"
                  >
                    Pune, Maharashtra, India
                  </a>
                </p>
              </div>
            </div>
          </div>
        </div>

        <!-- Bottom Bar -->
        <div class="mt-8 md:mt-12 pt-6 md:pt-8 border-t border-default">
          <div
            class="flex flex-col sm:flex-row justify-between items-center space-y-4 sm:space-y-0"
          >
            <p class="text-sm text-muted text-center sm:text-left">
              © 2023-{{ currentYear }} {{ config.companyName || 'Incubrain ltd.' }} All rights
              reserved.
            </p>
            <p class="text-sm text-muted text-center sm:text-right font-medium">
              Build the future or be left behind.
            </p>
          </div>
        </div>
      </div>
    </UContainer>
  </footer>
</template>
</file>

<file path="app/components/nav/Header.vue">
<script setup lang="ts">
import type { NavigationMenuItem } from '@nuxt/ui'

// Get blog categories for navigation
const { data: blogCategories } = await useAsyncData('header-blog-categories', () =>
  queryCollection('blog')
    .select('category')
    .all()
    .then((posts) => {
      const categories = [...new Set(posts.map((p) => p.category).filter(Boolean))]
      return categories.sort()
    }),
)

const navigationItems = computed<NavigationMenuItem[]>(() => [
  {
    label: 'Home',
    to: '/',
    icon: 'i-lucide-home',
  },
  {
    label: 'Blog',
    icon: 'i-lucide-file-text',
    to: '/blog',
    children: blogCategories.value
      ? [
          {
            label: 'All Posts',
            to: '/blog',
            description: 'View all blog posts',
          },
          ...blogCategories.value.map((category) => ({
            label: getCategoryName(category),
            to: `/blog/${category}`,
            description: `${getCategoryName(category).toLowerCase()} articles`,
          })),
        ]
      : [],
  },
])

const isMobileMenuOpen = ref(false)
const { public: config } = useRuntimeConfig()
</script>

<template>
  <header class="sticky top-0 z-50 bg-elevated/80 backdrop-blur-md border-b border-default">
    <UContainer>
      <div class="flex items-center justify-between h-16">
        <!-- Logo/Brand -->
        <div class="flex-shrink-0">
          <Logo size="md" />
        </div>

        <!-- Desktop Navigation -->
        <nav class="hidden md:flex relative w-full">
          <UNavigationMenu
          class="w-full flex justify-center"
            :items="navigationItems"
            color="neutral"
            variant="link"
          />
        </nav>

        <!-- Desktop CTA + Mobile Menu Button -->
        <div class="flex items-center space-x-4 relative">
          <NavSearch
            variant="button"
            size="sm"
            placeholder="Search..."
            class="hidden sm:block"
          />
          <UButton
            label="Free Consultation"
            color="primary"
            variant="solid"
            size="sm"
            class="hidden md:inline-flex"
            :to="`https://wa.me/${config.whatsappNumber}?text=Hi! I'm interested in AI automation consultation.`"
            target="_blank"
            trailing-icon="i-lucide-external-link"
          />

          <div class="flex items-center space-x-2 sm:hidden">
            <NavSearch
              variant="button"
              size="sm"
              placeholder=""
            />
            <UButton
              variant="ghost"
              color="neutral"
              size="sm"
              square
              aria-label="Open mobile menu"
              @click="isMobileMenuOpen = true"
            >
              <UIcon
                name="i-lucide-menu"
                class="size-4"
              />
            </UButton>
          </div>
        </div>
      </div>
    </UContainer>

    <!-- Mobile Navigation Component -->
    <NavMobile
      v-model:open="isMobileMenuOpen"
      :navigation-items="navigationItems"
      :blog-categories="blogCategories"
    />
  </header>
</template>
</file>

<file path="app/components/nav/Mobile.vue">
<script setup lang="ts">
import type { NavigationMenuItem } from '@nuxt/ui'

interface Props {
  navigationItems: NavigationMenuItem[]
  blogCategories?: string[]
}

defineProps<Props>()

const isOpen = defineModel<boolean>('open', { default: false })
const { public: config } = useRuntimeConfig()

const closeMenu = () => {
  isOpen.value = false
}
</script>

<template>
  <USlideover
    v-model:open="isOpen"
    side="right"
  >
    <template #header>
      <div class="flex items-center justify-between w-full">
        <Logo size="sm" />
        <UButton
          variant="ghost"
          color="neutral"
          size="sm"
          square
          aria-label="Close mobile menu"
          @click="closeMenu"
        >
          <UIcon
            name="i-lucide-x"
            class="size-4"
          />
        </UButton>
      </div>
    </template>

    <template #body>
      <nav class="flex flex-col space-y-1">
        <!-- Main Navigation Items -->
        <ULink
          v-for="item in navigationItems"
          :key="item.label"
          :to="item.to"
          class="flex items-center space-x-3 px-3 py-3 rounded-lg text-toned hover:text-primary hover:bg-elevated transition-colors"
          @click="closeMenu"
        >
          <UIcon
            :name="item.icon"
            class="size-4"
          />
          <span class="font-medium">{{ item.label }}</span>
        </ULink>

        <!-- Blog Categories Section -->
        <div
          v-if="blogCategories?.length"
          class="pt-4 border-t border-default"
        >
          <p class="px-3 text-xs font-semibold text-dimmed uppercase tracking-wider mb-3">
            Blog Categories
          </p>

          <!-- All Posts - Same styling as categories -->
          <ULink
            to="/blog"
            class="flex items-center space-x-3 px-3 py-2 rounded-lg text-muted hover:text-primary hover:bg-elevated transition-colors"
            @click="closeMenu"
          >
            <UIcon
              name="i-lucide-list"
              class="size-4"
            />
            <span class="text-sm">All Posts</span>
          </ULink>

          <!-- Category Links -->
          <ULink
            v-for="category in blogCategories"
            :key="category"
            :to="`/blog/${category}`"
            class="flex items-center space-x-3 px-3 py-2 rounded-lg text-muted hover:text-primary hover:bg-elevated transition-colors"
            @click="closeMenu"
          >
            <UIcon
              name="i-lucide-folder"
              class="size-4"
            />
            <span class="text-sm">{{ getCategoryName(category) }}</span>
          </ULink>
        </div>
      </nav>
    </template>

    <template #footer>
      <div class="space-y-4 text-center">
        <UButton
          label="Free Consultation"
          color="primary"
          variant="solid"
          size="lg"
          block
          :to="`https://wa.me/${config.whatsappNumber}?text=Hi! I'm interested in AI automation consultation.`"
          target="_blank"
          trailing-icon="i-lucide-external-link"
          @click="closeMenu"
        />

        <div class="text-sm text-dimmed space-y-1">
          <p>Pune, Maharashtra</p>
          <p>{{ config.contactEmail }}</p>
        </div>
      </div>
    </template>
  </USlideover>
</template>
</file>

<file path="app/components/nav/Pagination.vue">
<!-- components/layout/NavPagination.vue -->
<script setup lang="ts">
import { useOffsetPagination } from '@vueuse/core'
import { PAGINATION_DEFAULTS, CONTENT_TYPE_LABELS  } from '#shared/utils/pagination'
import type {ContentType} from '#shared/utils/pagination';

interface Props {
  contentType: ContentType
  category?: string
}

const props = defineProps<Props>()

const route = useRoute()
const router = useRouter()

// Configuration
const itemsPerPage = PAGINATION_DEFAULTS[props.contentType as keyof typeof PAGINATION_DEFAULTS] || 12
const stateKey = `${props.contentType}${props.category ? `-${props.category}` : ''}-page`

// Get initial page - CRITICAL: Handle edge cases
const getInitialPage = () => {
  const urlPage = route.query.page ? Number(route.query.page) : null
  const storedPage = import.meta.client ? Number(localStorage.getItem(stateKey)) : null
  
  // Validate page numbers
  if (urlPage && urlPage > 0) return urlPage
  if (storedPage && storedPage > 0) return storedPage
  return 1
}

// Fetch all data from API
const { data: contentData, pending, error } = useLazyAsyncData(
  `content-${props.contentType}-${props.category || 'all'}`,
  () => $fetch('/api/content/metadata', {
    query: {
      collection: props.contentType,
      category: props.category || 'all'
    }
  })
)

// Data with error handling
const allItems = computed(() => contentData.value?.items || [])
const totalItems = computed(() => allItems.value.length)
const hasData = computed(() => !pending.value && !error.value && totalItems.value > 0)
const isEmpty = computed(() => !pending.value && !error.value && totalItems.value === 0)

// VueUse pagination with FULL API utilization
const {
  currentPage,
  currentPageSize,
  pageCount,
  isFirstPage,
  isLastPage,
  prev,
  next,
} = useOffsetPagination({
  total: totalItems,
  pageSize: itemsPerPage,
  page: getInitialPage(),
  
  // CRITICAL: Handle page changes with routing + persistence + validation
  onPageChange: async ({ currentPage: newPage, pageCount: totalPages }) => {
    // Validate page bounds - redirect if invalid
    if (newPage > totalPages && totalPages > 0) {
      await router.replace({ 
        query: { ...route.query, page: totalPages > 1 ? totalPages : undefined } 
      })
      return
    }
    
    // Update URL with query params (SEO friendly)
    await router.push({ 
      query: { 
        ...route.query, 
        page: newPage > 1 ? newPage : undefined 
      } 
    })
    
    // Persist state
    if (import.meta.client) {
      if (newPage === 1) {
        localStorage.removeItem(stateKey)
      } else {
        localStorage.setItem(stateKey, newPage.toString())
      }
    }
  },
  
  // Handle page size changes (if needed in future)
  onPageSizeChange: ({ currentPage: newPage, currentPageSize: newSize }) => {
    console.log(`Page size changed to ${newSize}, adjusting to page ${newPage}`)
  },
  
  // Handle total page count changes 
  onPageCountChange: ({ currentPage: newPage, pageCount: newCount }) => {
    // If current page exceeds new page count, redirect to last page
    if (newPage > newCount && newCount > 0) {
      router.replace({ 
        query: { ...route.query, page: newCount > 1 ? newCount : undefined } 
      })
    }
  }
})

// Client-side pagination with bounds checking
const paginatedItems = computed(() => {
  if (!hasData.value) return []
  
  const start = (currentPage.value - 1) * itemsPerPage
  const end = start + itemsPerPage
  
  // Ensure we don't exceed array bounds
  return allItems.value.slice(start, Math.min(end, allItems.value.length))
})

// UI state management
const showPagination = computed(() => hasData.value && totalItems.value > itemsPerPage)
const showContent = computed(() => hasData.value && paginatedItems.value.length > 0)

// Results text with edge case handling
const startItem = computed(() => {
  if (!hasData.value || paginatedItems.value.length === 0) return 0
  return (currentPage.value - 1) * itemsPerPage + 1
})

const endItem = computed(() => {
  if (!hasData.value) return 0
  return startItem.value + paginatedItems.value.length - 1
})

const resultsText = computed(() => {
  if (pending.value) return 'Loading...'
  if (error.value) return 'Error loading content'
  if (isEmpty.value) return 'No items found'
  
  const itemName = CONTENT_TYPE_LABELS[props.contentType as keyof typeof CONTENT_TYPE_LABELS] || 'items'
  const singular = itemName.slice(0, -1)
  const label = totalItems.value === 1 ? singular : itemName
  
  return `Showing ${startItem.value}-${endItem.value} of ${totalItems.value} ${label}`
})

// Navigation helpers using VueUse functions
const canGoPrev = computed(() => !isFirstPage.value && hasData.value)
const canGoNext = computed(() => !isLastPage.value && hasData.value)

// Enhanced routing for UPagination
const generateTo = (page: number) => {
  // Validate page bounds before generating route
  if (page < 1 || (pageCount.value > 0 && page > pageCount.value)) return undefined
  
  return { 
    query: { 
      ...route.query, 
      page: page > 1 ? page : undefined 
    } 
  }
}

// Keyboard navigation
defineShortcuts({
  arrowleft: () => canGoPrev.value && prev(),
  arrowright: () => canGoNext.value && next(),
})

// SEO: Watch for direct page access and validate
watchEffect(() => {
  // If user directly accessed invalid page, redirect
  if (route.query.page && hasData.value && pageCount.value > 0) {
    const requestedPage = Number(route.query.page)
    if (requestedPage > pageCount.value) {
      router.replace({
        query: { ...route.query, page: pageCount.value > 1 ? pageCount.value : undefined }
      })
    }
  }
})
</script>

<template>
  <div class="space-y-component">
    <!-- Content Slot with comprehensive data -->
    <slot 
      :items="paginatedItems"
      :loading="pending"
      :error="error"
      :has-data="hasData"
      :is-empty="isEmpty"
      :total-items="totalItems"
      :current-page="currentPage"
      :page-count="pageCount"
      :can-go-prev="canGoPrev"
      :can-go-next="canGoNext"
      :prev="prev"
      :next="next"
    />

    <!-- Error State -->
    <div v-if="error" class="text-center py-section">
      <UIcon name="i-lucide-alert-circle" class="size-12 text-error mx-auto mb-component" />
      <h3 class="text-lg font-medium text-error mb-2">Failed to Load Content</h3>
      <p class="text-muted">{{ error.message || 'Please try again later' }}</p>
    </div>

    <!-- Empty State -->
    <div v-else-if="isEmpty" class="text-center py-section">
      <UIcon name="i-lucide-file-text" class="size-12 text-dimmed mx-auto mb-component" />
      <h3 class="text-lg font-medium text-highlighted mb-2">No {{ CONTENT_TYPE_LABELS[contentType] || 'items' }} found</h3>
      <p class="text-muted">Check back soon for new content!</p>
    </div>

    <!-- Pagination UI with keyboard navigation -->
    <div v-else-if="showPagination" class="flex flex-col sm:flex-row items-center justify-between gap-4">
      <div class="text-sm text-muted" role="status" aria-live="polite">
        {{ resultsText }}
      </div>

      <div class="flex items-center gap-2">
        <!-- Quick navigation buttons using VueUse functions -->
        <UButton
          variant="outline"
          size="sm"
          icon="i-lucide-chevron-left"
          :disabled="isFirstPage"
          aria-label="Previous page"
          @click="prev"
        />

        <!-- Main pagination -->
        <UPagination
          :page="currentPage"
          :total="totalItems"
          :items-per-page="itemsPerPage"
          :to="generateTo"
          :sibling-count="2"
          show-edges
          @update:page="(page) => currentPage = page"
        />

        <!-- Quick navigation buttons -->
        <UButton
          variant="outline"
          size="sm"
          icon="i-lucide-chevron-right"
          :disabled="isLastPage"
          aria-label="Next page"
          @click="next"
        />
      </div>
    </div>

    <!-- Page info for keyboard users -->
    <div v-if="showPagination" class="sr-only" aria-live="polite">
      Page {{ currentPage }} of {{ pageCount }}. 
      Use left and right arrow keys to navigate.
    </div>
  </div>
</template>
</file>

<file path="app/components/nav/Search.vue">
<!-- components/blog/BlogSearch.vue - USING HOOK DATA DIRECTLY -->
<script setup lang="ts">
interface Props {
  placeholder?: string
  variant?: 'input' | 'button'
  size?: 'sm' | 'md' | 'lg'
}

withDefaults(defineProps<Props>(), {
  placeholder: 'Search blog posts and pages...',
  variant: 'input',
  size: 'md',
})

const isOpen = ref(false)
const searchTerm = ref('')

// UPDATED: Use hook-injected searchSections directly
const { data: searchData } = await useAsyncData('global-search-direct', async () => {
  const [blogSections, blogPosts, pages] = await Promise.all([
    queryCollectionSearchSections('blog'),
    queryCollection('blog').select('path', 'title', 'description').all(),
    // GET pages with hook-injected searchSections
    queryCollection('pages')
      .select('path', 'title', 'description', 'searchSections', 'searchContent')
      .all(),
  ])

  // TRANSFORM hook-injected searchSections into search format
  const pageSections = pages.flatMap((page) =>
    (page.searchSections || []).map((section) => ({
      id: `${page.path}#${section.id}`,
      title: section.title,
      content: section.content,
      path: page.path,
      pageTitle: page.title,
    })),
  )

  console.log('🔍 DIRECT SEARCH DEBUG:')
  console.log('  Pages found:', pages.length)
  console.log(
    '  Pages with searchSections:',
    pages.filter((p) => p.searchSections?.length > 0),
  )
  console.log('  Total page sections generated:', pageSections.length)
  console.log('  Sample page sections:', pageSections.slice(0, 3))

  return { blogSections, pageSections, blogPosts, pages }
})

// Create lookup maps for titles
const titleMaps = computed(() => {
  const blogMap = new Map()
  const pagesMap = new Map()

  searchData.value?.blogPosts?.forEach((post) => {
    blogMap.set(post.path, {
      title: post.title,
      description: post.description,
      type: 'blog',
    })
  })

  searchData.value?.pages?.forEach((page) => {
    pagesMap.set(page.path, {
      title: page.title,
      description: page.description,
      type: 'page',
    })
  })

  return { blog: blogMap, pages: pagesMap }
})

// Enhanced search groups using direct searchSections
const searchGroups = computed(() => {
  if (!searchData.value || !searchTerm.value.trim()) {
    return []
  }

  const searchLower = searchTerm.value.toLowerCase()
  const groups = []

  // BLOG SECTIONS GROUP (unchanged)
  const blogSections =
    searchData.value.blogSections?.filter((section) => {
      return (
        section.title?.toLowerCase().includes(searchLower) ||
        section.content?.toLowerCase().includes(searchLower) ||
        section.titles?.join(' ').toLowerCase().includes(searchLower)
      )
    }) || []

  if (blogSections.length > 0) {
    const blogItems = blogSections.slice(0, 8).map((section) => {
      const postPath = section.id.split('#')[0]
      const postInfo = titleMaps.value.blog.get(postPath)

      return {
        id: section.id,
        label: section.title || 'Section',
        suffix: `${postInfo?.title || 'Blog Post'} • ${(section.content || '').slice(0, 60)}...`,
        icon: 'i-lucide-file-text',
        to: section.id,
        onSelect() {
          isOpen.value = false
          searchTerm.value = ''
        },
      }
    })

    groups.push({
      id: 'blog',
      label: `Blog Posts (${blogItems.length})`,
      items: blogItems,
    })
  }

  // PAGES SECTIONS GROUP - Using hook-injected searchSections
  const pageSections =
    searchData.value.pageSections?.filter((section) => {
      return (
        section.title?.toLowerCase().includes(searchLower) ||
        section.content?.toLowerCase().includes(searchLower)
      )
    }) || []

  if (pageSections.length > 0) {
    const pageItems = pageSections.slice(0, 8).map((section) => {
      return {
        id: section.id,
        label: section.title || 'Section',
        suffix: `${section.pageTitle || 'Page'} • ${(section.content || '').slice(0, 60)}...`,
        icon: 'i-lucide-layout',
        to: section.id,
        onSelect() {
          isOpen.value = false
          searchTerm.value = ''
        },
      }
    })

    groups.push({
      id: 'pages',
      label: `Page Sections (${pageItems.length})`,
      items: pageItems,
    })
  }

  return groups
})

// Keyboard shortcuts
defineShortcuts({
  '/': () => {
    if (!isOpen.value) {
      isOpen.value = true
    }
  },
  'meta_k': () => {
    isOpen.value = !isOpen.value
  },
  'escape': {
    usingInput: false,
    handler: () => {
      if (isOpen.value) {
        closeSearch()
      }
    },
  },
})

const openSearch = () => {
  isOpen.value = true
}

const closeSearch = () => {
  isOpen.value = false
  searchTerm.value = ''
}
</script>

<template>
  <div>
    <!-- Trigger Button/Input -->
    <div v-if="variant === 'button'">
      <UButton
        variant="ghost"
        color="neutral"
        :size="size"
        icon="i-lucide-search"
        @click="openSearch"
      >
        <span v-if="placeholder && size !== 'sm'">{{ placeholder }}</span>
        <template #trailing>
          <UKbd value="/" />
        </template>
      </UButton>
    </div>

    <div v-else>
      <UInput
        :placeholder="placeholder"
        icon="i-lucide-search"
        :size="size"
        readonly
        class="cursor-pointer"
        @click="openSearch"
      >
        <template #trailing>
          <UKbd value="/" />
        </template>
      </UInput>
    </div>

    <!-- Enhanced Modal -->
    <UModal
      v-model:open="isOpen"
      title="Search Website"
      :ui="{
        content: 'w-full max-w-3xl',
        body: 'p-0',
        header: 'p-0',
      }"
    >
      <!-- Header -->
      <template #header>
        <div class="p-4 flex items-center space-x-3">
          <UIcon
            name="i-lucide-search"
            class="size-5 text-muted"
          />
          <UInput
            v-model="searchTerm"
            :placeholder="placeholder"
            variant="none"
            class="flex-1 border-0 focus:ring-0 w-full"
            autofocus
          />
        </div>
      </template>

      <template #body>
        <div class="h-96 overflow-y-auto">
          <UCommandPalette
            v-model:search-term="searchTerm"
            :groups="searchGroups"
            :close="false"
            :fuse="{
              fuseOptions: {
                includeMatches: true,
                threshold: 0.3,
                keys: ['label', 'suffix'],
              },
              resultLimit: 20,
            }"
            class="border-0 h-full"
            :ui="{
              input: 'hidden',
              close: 'hidden',
              content: 'h-full',
              viewport: 'h-full p-2',
              group: {
                label: 'px-3 py-2 text-xs font-semibold text-primary bg-elevated/50',
              },
            }"
          >
            <template #empty>
              <div class="py-8 text-center">
                <UIcon
                  name="i-lucide-search-x"
                  class="size-8 text-muted mx-auto mb-3"
                />
                <p class="text-muted">
                  {{
                    searchTerm
                      ? `No content found for "${searchTerm}"`
                      : 'Start typing to search through blog posts and pages...'
                  }}
                </p>
              </div>
            </template>

            <template #item-leading="{ item }">
              <UIcon
                :name="item.icon"
                class="size-4"
                :class="item.icon === 'i-lucide-file-text' ? 'text-primary' : 'text-secondary'"
              />
            </template>

            <template #item-label="{ item }">
              <div class="min-w-0 flex-1">
                <div class="font-medium text-highlighted truncate">
                  {{ item.label }}
                </div>
                <div class="text-xs text-muted truncate mt-0.5">
                  {{ item.suffix }}
                </div>
              </div>
            </template>
          </UCommandPalette>
        </div>
      </template>

      <!-- Footer -->
      <template #footer>
        <div class="flex items-center justify-center text-xs text-muted p-4 space-x-4">
          <div class="flex items-center space-x-2">
            <UIcon
              name="i-lucide-lightbulb"
              class="size-3"
            />
            <span>Searches blog posts and pages</span>
          </div>
          <div class="flex items-center space-x-1">
            <UKbd value="↑" />
            <UKbd value="↓" />
            <span class="mx-1">navigate</span>
            <UKbd value="↵" />
            <span>select</span>
            <UKbd value="esc" />
            <span>close</span>
          </div>
        </div>
      </template>
    </UModal>
  </div>
</template>
</file>

<file path="app/components/nav/Surroundings.vue">
<!-- components/layout/Surroundings.vue -->
<script setup lang="ts">
interface Props {
  /** Content collection to query */
  collection: string
  /** Current item path */
  currentPath: string
  /** Field to order by */
  orderBy?: string
  /** Order direction */
  orderDirection?: 'ASC' | 'DESC'
  /** Previous item label */
  previousLabel?: string
  /** Next item label */
  nextLabel?: string
  /** Show border */
  showBorder?: boolean
}

const props = withDefaults(defineProps<Props>(), {
  orderBy: 'date',
  orderDirection: 'DESC',
  previousLabel: 'Previous',
  nextLabel: 'Next',
  showBorder: true
})

// Query surroundings for any collection
const { data: surroundings } = await useAsyncData(
  `${props.collection}-surroundings-${props.currentPath}`,
  () => queryCollectionItemSurroundings(props.collection, props.currentPath)
    .order(props.orderBy, props.orderDirection)
)

const previousItem = computed(() => surroundings.value?.[0])
const nextItem = computed(() => surroundings.value?.[1])
</script>

<template>
  <div 
    class="flex justify-between items-center py-8"
    :class="{ 'border-t border-gray-200 dark:border-gray-700': showBorder }"
  >
    <!-- Previous Item -->
    <div
      v-if="previousItem"
      class="flex-1 text-left"
    >
      <ULink
        :to="previousItem.path"
        class="group inline-flex items-center text-sm hover:text-primary transition-colors"
      >
        <UIcon
          name="i-lucide-arrow-left"
          class="w-4 h-4 mr-2 group-hover:-translate-x-1 transition-transform"
        />
        <div>
          <div class="text-xs text-gray-500 mb-1">{{ previousLabel }}</div>
          <div class="font-medium line-clamp-1">{{ previousItem.title }}</div>
        </div>
      </ULink>
    </div>

    <!-- Spacer when no previous item -->
    <div 
      v-else 
      class="flex-1"
    />

    <!-- Center spacer -->
    <div class="flex-1" />

    <!-- Next Item -->
    <div
      v-if="nextItem"
      class="flex-1 text-right"
    >
      <ULink
        :to="nextItem.path"
        class="group inline-flex items-center text-sm hover:text-primary transition-colors"
      >
        <div>
          <div class="text-xs text-gray-500 mb-1">{{ nextLabel }}</div>
          <div class="font-medium line-clamp-1">{{ nextItem.title }}</div>
        </div>
        <UIcon
          name="i-lucide-arrow-right"
          class="w-4 h-4 ml-2 group-hover:translate-x-1 transition-transform"
        />
      </ULink>
    </div>

    <!-- Spacer when no next item -->
    <div 
      v-else 
      class="flex-1"
    />
  </div>
</template>
</file>

<file path="app/components/section/About.vue">
<!-- app/components/section/About.vue -->
<script setup lang="ts">
interface Stat {
  value: string
  label: string
}

interface Props {
  title: string
  story: string
  image: string
  stats: Stat[]
}

defineProps<Props>()
</script>

<template>
  <LayoutBackground pattern="neural" intensity="light" as="section">
    <UContainer>
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 lg:gap-16 items-center">
        <!-- Image -->
        <div class="relative">
          <NuxtImg
            :src="image"
            :alt="title"
            class="w-full aspect-square object-cover rounded-2xl shadow-lg"
            loading="lazy"
            format="webp"
          />
          
          <!-- Floating stats -->
          <div class="absolute -bottom-6 -right-6 bg-elevated border border-muted rounded-xl p-4 shadow-lg">
            <div class="grid grid-cols-2 gap-6">
              <div
                v-for="stat in stats.slice(0, 2)"
                :key="stat.label"
                class="text-center"
              >
                <div class="text-2xl font-bold text-primary">{{ stat.value }}</div>
                <div class="text-sm text-muted uppercase tracking-wide">{{ stat.label }}</div>
              </div>
            </div>
          </div>
        </div>

        <!-- Content -->
        <div class="space-y-6">
          <h2 class="text-3xl md:text-4xl font-bold text-highlighted">{{ title }}</h2>
          <div class="prose prose-lg prose-zinc dark:prose-invert max-w-none" v-html="story" />
          
          <!-- Additional stats -->
          <div v-if="stats.length > 2" class="grid grid-cols-2 gap-6 mt-8">
            <div
              v-for="stat in stats.slice(2)"
              :key="stat.label"
              class="text-center"
            >
              <div class="text-2xl font-bold text-primary">{{ stat.value }}</div>
              <div class="text-sm text-muted uppercase tracking-wide">{{ stat.label }}</div>
            </div>
          </div>
        </div>
      </div>
    </UContainer>
  </LayoutBackground>
</template>
</file>

<file path="app/components/section/Authority.vue">
<!-- app/components/section/Authority.vue -->
<script setup lang="ts">
interface Skill {
  title: string
  description: string
  icon: string
}

interface Props {
  title: string
  subtitle: string
  skills: Skill[]
}

defineProps<Props>()
</script>

<template>
  <section>
    <UContainer>
      <!-- Header -->
      <div class="text-center mb-component max-w-3xl mx-auto">
        <h2 class="text-3xl md:text-4xl font-bold text-highlighted mb-4">{{ title }}</h2>
        <p class="text-xl text-muted">{{ subtitle }}</p>
      </div>

      <!-- Skills Grid -->
      <div class="grid grid-cols-1 md:grid-cols-3 grid-spacing">
        <CardSkill
          v-for="skill in skills"
          :key="skill.title"
          :title="skill.title"
          :description="skill.description"
          :icon="skill.icon"
        />
      </div>
    </UContainer>
  </section>
</template>
</file>

<file path="app/components/section/Cta.vue">
<!-- app/components/section/CTA.vue -->
<script setup lang="ts">
interface CTACard {
  title: string
  subtitle?: string
  ctaText: string
  ctaLink: string
}

interface Props {
  title: string
  subtitle: string
  cards?: CTACard[]
}

withDefaults(defineProps<Props>(), {
  cards: () => []
})
</script>

<template>
  <LayoutBackground pattern="circuit" intensity="light">
    <UContainer>
      <div class="text-center mb-component">
        <h2 class="text-3xl md:text-4xl font-bold text-highlighted mb-component">
          {{ title }}
        </h2>
        <p class="text-xl text-toned max-w-2xl mx-auto">
          {{ subtitle }}
        </p>
      </div>

      <div class="max-w-4xl mx-auto">
        <div class="grid md:grid-cols-2 grid-spacing">
          <CardCTA
            v-for="card in cards"
            :key="card.title"
            variant="featured"
            :title="card.title"
            :subtitle="card.subtitle"
            :cta-text="card.ctaText"
            :cta-link="card.ctaLink"
          />
        </div>
      </div>
    </UContainer>
  </LayoutBackground>
</template>
</file>

<file path="app/components/section/Faq.vue">
<!-- components/section/FAQ.vue -->
<script setup lang="ts">
interface Props {
  title?: string
  description?: string
  categories?: string[]
  twoColumn?: boolean
}

const props = withDefaults(defineProps<Props>(), {
  title: 'Frequently Asked Questions',
  twoColumn: true
})

// Query FAQ collections using queryCollection
const { data: faqCollections } = await useAsyncData('faq-collections', () => 
  queryCollection('faq').all()
)

// Transform to accordion items with category grouping
const faqsByCategory = computed(() => {
  const grouped: Record<string, any[]> = {}
  
  faqCollections.value?.forEach(collection => {
    // Extract category from filename (e.g., "general" from "general.yaml")
    const categoryName = collection._id?.replace('.yaml', '') || 'general'
    grouped[categoryName] = collection.faqs?.map((faq: any) => ({
      label: faq.question,
      content: faq.answer,
      value: `${categoryName}-${faq.question.toLowerCase().replace(/\s+/g, '-')}`
    })) || []
  })
  
  return grouped
})

// Filter categories if specified
const displayCategories = computed(() => {
  if (props.categories?.length) {
    return Object.fromEntries(
      Object.entries(faqsByCategory.value).filter(([key]) => 
        props.categories!.includes(key)
      )
    )
  }
  return faqsByCategory.value
})

const selectedCategory = ref(Object.keys(displayCategories.value)[0] || 'general')
const activeItems = computed(() => displayCategories.value[selectedCategory.value] || [])

const categoryButtons = computed(() => 
  Object.keys(displayCategories.value).map(key => ({
    label: key.charAt(0).toUpperCase() + key.slice(1),
    value: key
  }))
)
</script>

<template>
  <section>
    <div class="mx-auto max-w-7xl px-6 lg:px-8">
      <!-- Header -->
      <div class="mx-auto max-w-2xl text-center mb-12">
        <h2 class="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl">
          {{ title }}
        </h2>
        <p 
          v-if="description" 
          class="mt-4 text-lg leading-8 text-gray-600 dark:text-gray-400"
        >
          {{ description }}
        </p>
      </div>

      <!-- Category Filters -->
      <div 
        v-if="categoryButtons.length > 1" 
        class="flex justify-center mb-8"
      >
        <div class="flex flex-wrap gap-2">
          <UButton
            v-for="category in categoryButtons"
            :key="category.value"
            :label="category.label"
            :variant="selectedCategory === category.value ? 'solid' : 'outline'"
            size="sm"
            @click="selectedCategory = category.value"
          />
        </div>
      </div>

      <!-- FAQ Grid -->
      <div 
        :class="[
          'mx-auto',
          props.twoColumn ? 'max-w-5xl' : 'max-w-3xl'
        ]"
      >
        <div 
          :class="[
            'grid gap-6',
            props.twoColumn ? 'lg:grid-cols-2 lg:gap-8' : 'grid-cols-1'
          ]"
        >
          <!-- Left Column / Full Width -->
          <div>
            <UAccordion 
              :items="activeItems.slice(0, Math.ceil(activeItems.length / (props.twoColumn ? 2 : 1)))"
              :ui="{
                item: 'border border-gray-200 dark:border-gray-800 rounded-lg mb-4 last:mb-0',
                trigger: 'px-6 py-4 text-left font-medium',
                body: 'px-6 pb-4 text-gray-600 dark:text-gray-400'
              }"
            />
          </div>

          <!-- Right Column (only if twoColumn) -->
          <div v-if="props.twoColumn && activeItems.length > 1">
            <UAccordion 
              :items="activeItems.slice(Math.ceil(activeItems.length / 2))"
              :ui="{
                item: 'border border-gray-200 dark:border-gray-800 rounded-lg mb-4 last:mb-0',
                trigger: 'px-6 py-4 text-left font-medium',
                body: 'px-6 pb-4 text-gray-600 dark:text-gray-400'
              }"
            />
          </div>
        </div>
      </div>

      <!-- Empty State -->
      <div 
        v-if="!activeItems.length" 
        class="text-center py-12"
      >
        <UIcon 
          name="i-lucide-help-circle" 
          class="mx-auto size-12 text-gray-400 mb-4" 
        />
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
          No FAQs available
        </h3>
        <p class="text-gray-600 dark:text-gray-400">
          Check back later for more information.
        </p>
      </div>
    </div>
  </section>
</template>
</file>

<file path="app/components/section/Hero.vue">
<!-- app/components/section/Hero.vue - UPDATED WITH NEW VARIANTS -->
<script setup lang="ts">
interface Card {
  title: string
  description: string
  icon: string
  iconColor?: string
}

interface Props {
  title: string
  subtitle?: string
  description?: string
  
  // Layout & Style
  layout?: 'split' | 'centered' | 'minimal' | 'fullscreen' | 'compact'
  mediaType?: 'cards' | 'image' | 'video' | 'none'
  hasBackground?: boolean
  
  // Content
  cards?: Card[]
  
  // Media props
  mediaSrc?: string
  mediaAlt?: string
  mediaPoster?: string
  
  // CTA
  showCta?: boolean
  ctaText?: string
  ctaLink?: string
  ctaDescription?: string
  
  // Background
  backgroundPreset?: 'none' | 'neural' | 'quantum' | 'cyber' | 'circuit' | 'minimal'
  
  // Theme
  ui?: any
}

const props = withDefaults(defineProps<Props>(), {
  layout: 'centered',
  mediaType: 'cards',
  hasBackground: true,
  showCta: false,
  ctaText: 'Get Started',
  backgroundPreset: 'circuit',
})

// Helper function for icon colors
function getIconColor(iconColor: string | undefined, index: number): string {
  if (iconColor) {
    if (iconColor.includes('primary')) return 'text-primary'
    if (iconColor.includes('blue')) return 'text-blue-400'
    if (iconColor.includes('amber')) return 'text-amber-400'
    if (iconColor.includes('secondary')) return 'text-secondary-400'
    return iconColor
  }
  const colors = ['text-primary', 'text-blue-400', 'text-amber-400']
  return colors[index] || 'text-primary'
}

// Computed values for section variants
const sectionVariant = computed(() => {
  switch (props.layout) {
    case 'fullscreen': return 'hero'
    case 'minimal': return 'compact'
    case 'compact': return 'compact'
    default: return 'generous'
  }
})

const centerVariant = computed(() => {
  if (props.layout === 'fullscreen') return 'wide'
  return 'prose'
})

const stackVariant = computed(() => {
  switch (props.layout) {
    case 'minimal': return 'compact'
    case 'compact': return 'default'
    default: return 'spacious'
  }
})
</script>

<template>
  <LayoutSection 
    :variant="sectionVariant" 
    :background="hasBackground ? backgroundPreset : 'none'"
    :class="$attrs.class"
  >
    <!-- SPLIT LAYOUT -->
    <template v-if="layout === 'split'">
      <LayoutCenter variant="full">
        <LayoutSplit variant="default">
          <template #primary>
            <LayoutStack :variant="stackVariant">
              <!-- Text Content -->
              <LayoutStack variant="default">
                <LayoutHeading anchor variant="hero" :text="title" />

                <LayoutText 
                  v-if="subtitle"
                  variant="subtitle"
                  :text="subtitle"
                />
                
                <LayoutText 
                  v-if="description"
                  variant="description"
                  :text="description"
                />
              </LayoutStack>
              
              <!-- CTA for split layout -->
              <LayoutStack v-if="showCta" variant="compact">
                <LayoutText 
                  v-if="ctaDescription"
                  variant="caption"
                  :text="ctaDescription"
                />
                
                <LayoutCluster variant="default">
                  <UButton
                    :label="ctaText"
                    color="primary"
                    size="lg"
                    :to="ctaLink"
                    trailing-icon="i-lucide-arrow-right"
                  />
                </LayoutCluster>
              </LayoutStack>
            </LayoutStack>
          </template>
          
          <template #secondary>
            <!-- Cards for split - vertical stack -->
            <LayoutStack v-if="mediaType === 'cards' && cards?.length" variant="default">
              <LayoutCenter variant="narrow">
                <LayoutStack variant="compact">
                  <UCard
                    v-for="(card, index) in cards"
                    :key="card.title"
                    class="bg-elevated/50 backdrop-blur-sm border-default hover:border-accented transition-all duration-200"
                  >
                    <LayoutCluster variant="no-wrap">
                      <div
                        class="w-12 h-12 rounded-lg flex items-center justify-center flex-shrink-0"
                        :class="card.iconColor || 'bg-primary/20'"
                      >
                        <UIcon
                          :name="card.icon"
                          class="size-6"
                          :class="getIconColor(card.iconColor, index)"
                        />
                      </div>
                      <LayoutStack variant="compact">
                        <LayoutHeading variant="card" :text="card.title" />
                        <LayoutText variant="small" :text="card.description" />
                      </LayoutStack>
                    </LayoutCluster>
                  </UCard>
                </LayoutStack>
              </LayoutCenter>
            </LayoutStack>
            
            <!-- Image -->
            <LayoutFrame 
              v-else-if="mediaType === 'image' && mediaSrc"
              variant="video"
            >
              <MediaImage
                :src="mediaSrc"
                :alt="mediaAlt || title"
                :width="600"
                :height="400"
              />
            </LayoutFrame>

            <!-- Video -->
            <LayoutFrame 
              v-else-if="mediaType === 'video' && mediaSrc"
              variant="video"
            >
              <MediaVideo
                :src="mediaSrc"
                :poster="mediaPoster"
                :autoplay="false" 
                muted
              />
            </LayoutFrame>
          </template>
        </LayoutSplit>
      </LayoutCenter>
    </template>

    <!-- ALL OTHER LAYOUTS (CENTERED, MINIMAL, ETC) -->
    <template v-else>
      <LayoutCenter :variant="centerVariant">
        <LayoutStack :variant="stackVariant">
          
          <!-- Text Section -->
          <LayoutCenter variant="text-only">
            <LayoutStack variant="default">
              <LayoutHeading 
              :id="title"
              :text="title"
                anchor
                :variant="layout === 'fullscreen' ? 'hero' : 'section'"
              />
              
              <LayoutText 
              v-if="subtitle"
                :text="subtitle" 
                :variant="layout === 'fullscreen' ? 'hero-subtitle' : 'subtitle'"
              />
              
              <LayoutText 
              v-if="description"
                :text="description"
                variant="description"
              />
            </LayoutStack>
          </LayoutCenter>

          <!-- Media Section -->
          <div v-if="mediaType !== 'none'">
            
            <!-- Cards Grid -->
            <LayoutGrid v-if="mediaType === 'cards' && cards?.length" variant="thirds">
              <UCard
                v-for="(card, index) in cards"
                :key="card.title"
                class="bg-elevated/50 backdrop-blur-sm border-default hover:border-accented transition-all duration-200"
              >
                <LayoutStack variant="centered">
                  <div
                    class="w-10 h-10 rounded-lg flex items-center justify-center"
                    :class="card.iconColor || 'bg-primary/20'"
                  >
                    <UIcon
                      :name="card.icon"
                      class="size-5"
                      :class="getIconColor(card.iconColor, index)"
                    />
                  </div>
                  <LayoutStack variant="centered">
                    <LayoutHeading :text="title" variant="card" />
                    <LayoutText :text="card.description" variant="small" />
                  </LayoutStack>
                </LayoutStack>
              </UCard>
            </LayoutGrid>
            
            <!-- Image -->
            <LayoutCenter v-else-if="mediaType === 'image' && mediaSrc">
              <LayoutFrame variant="video" class="max-w-4xl">
                <MediaImage
                  :src="mediaSrc"
                  :alt="mediaAlt || title"
                  :width="800"
                  :height="500"
                  sizes="100vw sm:80vw md:60vw lg:50vw"
                />
              </LayoutFrame>
            </LayoutCenter>

            <!-- Video -->
            <LayoutCenter v-else-if="mediaType === 'video' && mediaSrc">
              <LayoutFrame variant="video" class="max-w-4xl">
                <MediaVideo
                  :src="mediaSrc"
                  :poster="mediaPoster"
                  :autoplay="layout === 'fullscreen'"
                  muted
                />
              </LayoutFrame>
            </LayoutCenter>
          </div>

          <!-- CTA Section (for non-split layouts) -->
          <LayoutCenter v-if="showCta && layout !== 'split'">
            <LayoutStack variant="centered">
              <LayoutText 
                v-if="ctaDescription"
                variant="caption"
                :text="ctaDescription"
              />
              
              <LayoutCluster variant="centered">
                <UButton
                  :label="ctaText"
                  color="primary"
                  size="lg"
                  :to="ctaLink"
                  trailing-icon="i-lucide-arrow-right"
                />
              </LayoutCluster>
            </LayoutStack>
          </LayoutCenter>
        </LayoutStack>
      </LayoutCenter>
    </template>
  </LayoutSection>
</template>
</file>

<file path="app/components/section/Results.vue">
<!-- app/components/section/Results.vue -->
<script setup lang="ts">
interface Stat {
  value: string
  title: string
  description?: string
}

interface Props {
  title: string
  subtitle: string
  stats: Stat[]
}

defineProps<Props>()
</script>

<template>
  <section>
    <UContainer>
      <!-- Header -->
      <div class="text-center mb-component max-w-3xl mx-auto">
        <h2 class="text-3xl md:text-4xl font-bold text-highlighted mb-4">{{ title }}</h2>
        <p class="text-xl text-muted">{{ subtitle }}</p>
      </div>

      <!-- Stats Grid -->
      <div class="grid grid-cols-2 md:grid-cols-4 grid-spacing">
        <CardStats
          v-for="stat in stats"
          :key="stat.title"
          :value="stat.value"
          :title="stat.title"
          :description="stat.description"
        />
      </div>
    </UContainer>
  </section>
</template>
</file>

<file path="app/components/section/Trust.vue">
<!-- app/components/section/Trust.vue -->
<script setup lang="ts">
interface Testimonial {
  quote: string
  author: string
  title: string
  company: string
  avatar?: string
}

interface Props {
  title: string
  subtitle: string
  testimonials: Testimonial[]
}

defineProps<Props>()
</script>

<template>
  <section>
    <UContainer>
      <!-- Header -->
      <div class="text-center mb-component max-w-3xl mx-auto">
        <h2 class="text-3xl md:text-4xl font-bold text-highlighted mb-4">{{ title }}</h2>
        <p class="text-xl text-muted">{{ subtitle }}</p>
      </div>

      <!-- Testimonials Grid -->
      <div class="grid grid-cols-1 lg:grid-cols-2 grid-spacing">
        <CardTestimonial
          v-for="testimonial in testimonials"
          :key="testimonial.author"
          :items="[testimonial]"
          variant="card"
        />
      </div>
    </UContainer>
  </section>
</template>
</file>

<file path="app/components/section/Work.vue">
<!-- app/components/section/Work.vue -->
<script setup lang="ts">
interface Props {
  title: string
  subtitle: string
}

defineProps<Props>()

// Get featured blog posts
const { data: blogPosts } = await useAsyncData('featured-blog-posts', () =>
  queryCollection('blog')
    .where('featured', '=', true)
    .order('date', 'DESC')
    .limit(6)
    .all()
)
</script>

<template>
  <section>
    <UContainer>
      <!-- Header -->
      <div class="text-center mb-component max-w-3xl mx-auto">
        <h2 class="text-3xl md:text-4xl font-bold text-highlighted mb-4">{{ title }}</h2>
        <p class="text-xl text-muted">{{ subtitle }}</p>
      </div>

      <!-- Featured Work Grid -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 grid-spacing">
        <BlogPostCard
          v-for="post in blogPosts?.slice(0, 6)"
          :key="post.path"
          :post="post"
          :featured="false"
        />
      </div>
    </UContainer>
  </section>
</template>
</file>

<file path="app/components/Header.vue">
<!-- components/layout/SectionHeader.vue -->
<script setup lang="ts">
interface Props {
  title: string
  badge?: string
  badgeColor?: 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error' | 'neutral'
  dividerClass?: string
  size?: 'sm' | 'md' | 'lg'
}

withDefaults(defineProps<Props>(), {
  badge: '',
  badgeColor: 'neutral',
  dividerClass: 'bg-border',
  size: 'md',
})

const sizeClasses = {
  sm: {
    title: 'text-lg font-semibold',
    spacing: 'mb-4',
    badge: 'text-xs px-2 py-1',
  },
  md: {
    title: 'text-xl font-bold',
    spacing: 'mb-6',
    badge: 'text-xs px-3 py-1',
  },
  lg: {
    title: 'text-2xl font-bold',
    spacing: 'mb-8',
    badge: 'text-sm px-4 py-1.5',
  },
}
</script>

<template>
  <div :class="sizeClasses[size].spacing">
    <div class="flex items-center space-x-4">
      <!-- Section Title -->
      <h2 :class="[sizeClasses[size].title, 'text-highlighted']">
        {{ title }}
      </h2>

      <!-- Divider Line -->
      <div :class="['flex-1 h-px', dividerClass]" />

      <!-- Optional Badge -->
      <span
        v-if="badge"
        :class="[
          sizeClasses[size].badge,
          'bg-elevated rounded-full',
          badgeColor === 'primary'
            ? 'text-primary'
            : badgeColor === 'secondary'
              ? 'text-secondary'
              : badgeColor === 'success'
                ? 'text-emerald-500'
                : badgeColor === 'info'
                  ? 'text-blue-500'
                  : badgeColor === 'warning'
                    ? 'text-amber-500'
                    : badgeColor === 'error'
                      ? 'text-red-500'
                      : 'text-muted',
        ]"
      >
        {{ badge }}
      </span>

      <slot name="end" />
    </div>
  </div>
</template>
</file>

<file path="app/components/Logo.vue">
<script setup lang="ts">
interface Props {
  size?: 'sm' | 'md' | 'lg'
  showText?: boolean
}

const props = withDefaults(defineProps<Props>(), {
  size: 'md',
  showText: true,
})

const sizes = {
  sm: { image: '24px', text: 'text-sm' },
  md: { image: '28px', text: 'text-lg' },
  lg: { image: '32px', text: 'text-xl' },
}

const currentSize = computed(() => sizes[props.size])
</script>

<template>
  <ULink
    to="/"
    class="flex items-center space-x-2 font-bold"
  >
    <NuxtImg
      src="favicon-96x96.png"
      :sizes="currentSize.image"
      alt="Incubrain Logo"
    />
    <h6
      v-if="showText"
      class="text-highlighted font-semibold uppercase tracking-wide"
      :class="currentSize.text"
    >
      INCUBRAIN
    </h6>
  </ULink>
</template>
</file>

<file path="app/components/SocialShare.vue">
<script setup lang="ts">
interface Props {
  title: string
  url: string
  description?: string
}

const props = defineProps<Props>()

const shareLinks = computed(() => [
  {
    icon: 'i-lucide-twitter',
    label: 'Twitter',
    to: `https://twitter.com/intent/tweet?text=${encodeURIComponent(props.title)}&url=${encodeURIComponent(props.url)}`,
  },
  {
    icon: 'i-lucide-linkedin',
    label: 'LinkedIn',
    to: `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(props.url)}`,
  },
  {
    icon: 'i-lucide-facebook',
    label: 'Facebook',
    to: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(props.url)}`,
  },
  {
    icon: 'i-lucide-mail',
    label: 'Email',
    to: `mailto:?subject=${encodeURIComponent(props.title)}&body=${encodeURIComponent(props.description || '')}\n\n${encodeURIComponent(props.url)}`,
  },
])

const copied = ref(false)

const copyLink = async () => {
  try {
    await navigator.clipboard.writeText(props.url)
    copied.value = true
    setTimeout(() => {
      copied.value = false
    }, 2000)
  } catch (err) {
    console.error('Failed to copy link:', err)
  }
}
</script>

<template>
  <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
    <UButtonGroup
      size="sm"
      orientation="horizontal"
    >
      <UButton
        v-for="link in shareLinks"
        :key="link.label"
        variant="ghost"
        :icon="link.icon"
        :to="link.to"
        target="_blank"
        :aria-label="`Share on ${link.label}`"
      />

      <UButton
        variant="ghost"
        :icon="copied ? 'i-lucide-check' : 'i-lucide-copy'"
        :aria-label="copied ? 'Copied!' : 'Copy link'"
        :class="copied ? 'text-success' : ''"
        @click="copyLink"
      />
    </UButtonGroup>
  </div>
</template>
</file>

<file path="app/components/Title.vue">
<script setup lang="ts">
interface Props {
  title: string
  description?: string
  alignment?: 'left' | 'center'
  size?: 'sm' | 'md' | 'lg'
}

const props = withDefaults(defineProps<Props>(), {
  alignment: 'center',
  size: 'md',
})

const titleClasses = computed(() => {
  const base = 'font-bold text-highlighted'
  const sizes = {
    sm: 'text-2xl md:text-3xl',
    md: 'text-3xl md:text-4xl',
    lg: 'text-4xl md:text-5xl',
  }
  const alignment = props.alignment === 'center' ? 'text-center' : 'text-left'

  return `${base} ${sizes[props.size]} ${alignment} mb-6`
})

const descriptionClasses = computed(() => {
  const base = 'text-xl text-muted'
  const alignment = props.alignment === 'center' ? 'text-center mx-auto max-w-3xl' : 'text-left'

  return `${base} ${alignment}`
})

const containerClasses = computed(() => {
  return props.alignment === 'center' ? 'text-center mb-12 lg:mb-16' : 'mb-8 lg:mb-12'
})
</script>

<template>
  <div :class="containerClasses">
    <h2 :class="titleClasses">{{ title }}</h2>
    <p
      v-if="description"
      :class="descriptionClasses"
      >{{ description }}</p
    >
  </div>
</template>
</file>

<file path="app/composables/useSeoDefaults.ts">
// app/composables/useSeoDefaults.ts - FINAL VERSION
interface PageData {
  title: string
  description: string
  date?: string
  category?: string
  author?: string
  image?: string
  tags?: string[]
  path?: string
  schemas?: any[]     // Content can override schemas
  ogImage?: any       // Content can override OG image
  [key: string]: any
}

export const useSeoDefaults = async (pageData?: PageData) => {
  const route = useRoute()
  
  // Load schemas and config
  const [{ data: schemas }, { data: config }] = await Promise.all([
    useAsyncData('seo-schemas', () => queryCollection('seoSchemas').all()),
    useAsyncData('seo-config', () => queryCollection('seoConfig').first())
  ])

  if (!schemas.value || !config.value) {
    console.warn('🚨 SEO schemas or config not found')
    return { pageType: 'page', seoMeta: {}, schemaOrg: null, ogImage: null, apply: () => {} }
  }

  const schemaRegistry = buildRegistry(schemas.value)
  const pageConfig = getPageConfig(route.path, pageData, config.value)
  
  const seoMeta = generateMeta(pageData, config.value, pageConfig)
  const schemaOrg = generateSchemas(pageData, schemaRegistry, pageConfig)
  const ogImage = generateOgImage(pageData, pageConfig)

  return {
    pageType: pageConfig.type,
    seoMeta,
    schemaOrg,
    ogImage,
    apply() {
      useSeoMeta(seoMeta)
      if (schemaOrg?.length > 0) useSchemaOrg(schemaOrg)
      if (ogImage) defineOgImage(ogImage)
    }
  }
}

// ====================================
// CORE FUNCTIONS
// ====================================
function buildRegistry(schemaFiles: any[]) {
  const registry: Record<string, any> = {}
  schemaFiles.forEach(file => {
    registry[file.stem] = file
  })
  return registry
}

function getPageConfig(path: string, pageData: PageData | undefined, config: any) {
  // Content override (highest priority)
  if (pageData?.schemas) {
    return {
      type: 'content-driven',
      schemas: pageData.schemas,
      ogImage: pageData.ogImage || config.defaults.ogImage,
      meta: config.defaults.meta
    }
  }
  
  // Exact path match
  if (config.pages[path]) {
    return { type: 'page', ...config.pages[path] }
  }
  
  // Content type match (blog)
  if (path.includes('/blog/') && path.split('/').length >= 4) {
    return { type: 'blog', ...config.contentTypes.blog }
  }
  
  // Default fallback
  return { type: 'default', ...config.defaults }
}

function generateSchemas(pageData: PageData | undefined, registry: Record<string, any>, pageConfig: any) {
  const schemas = []
  
  pageConfig.schemas.forEach((schemaItem: any) => {
    if (typeof schemaItem === 'string') {
      // Simple reference: "organization"
      if (registry[schemaItem]) {
        schemas.push(registry[schemaItem])
      }
    } else if (typeof schemaItem === 'object') {
      // Enhanced schema: "webpage: { name: '...', description: '...' }"
      const schemaType = Object.keys(schemaItem)[0]
      const enhancements = schemaItem[schemaType]
      
      if (registry[schemaType]) {
        // Base schema exists, enhance it
        const enhanced = enhanceSchema(registry[schemaType], enhancements, pageData, registry)
        schemas.push(enhanced)
      } else {
        // Create new schema with enhancements
        const newSchema = {
          "@type": getSchemaType(schemaType),
          ...resolveEnhancements(enhancements, pageData, registry)
        }
        schemas.push(newSchema)
      }
    }
  })
  
  return schemas.filter(Boolean)
}

function enhanceSchema(baseSchema: any, enhancements: any, pageData: PageData | undefined, registry: Record<string, any>) {
  return {
    ...baseSchema,
    ...resolveEnhancements(enhancements, pageData, registry)
  }
}

function resolveEnhancements(enhancements: any, pageData: PageData | undefined, registry: Record<string, any>): any {
  if (typeof enhancements === 'string') {
    return resolveValue(enhancements, pageData, registry)
  }
  
  if (typeof enhancements === 'object' && enhancements !== null) {
    const resolved: any = {}
    Object.entries(enhancements).forEach(([key, value]) => {
      resolved[key] = resolveEnhancements(value, pageData, registry)
    })
    return resolved
  }
  
  return enhancements
}

function resolveValue(value: string, pageData: PageData | undefined, registry: Record<string, any>): any {
  // Template interpolation: "{organization.url}/path"
  if (value.includes('{') && value.includes('}')) {
    return value.replace(/\{([^}]+)\}/g, (match, path) => {
      const resolved = getPath(path, { pageData, ...registry })
      return resolved?.toString() || match
    })
  }
  
  // Object path: "organization.name"
  if (value.includes('.')) {
    return getPath(value, { pageData, ...registry })
  }
  
  // Direct reference: "person"
  if (registry[value]) {
    return registry[value]
  }
  
  // Function call: "getCategoryName(pageData.category)"
  if (value.includes('(') && value.includes(')')) {
    return executeFunction(value, pageData)
  }
  
  return value
}

function getPath(path: string, context: any): any {
  return path.split('.').reduce((obj, key) => obj?.[key], context)
}

function executeFunction(funcCall: string, pageData: PageData | undefined): any {
  // Simple function execution for known functions
  if (funcCall.startsWith('getCategoryName(')) {
    const arg = funcCall.match(/\(([^)]+)\)/)?.[1]
    if (arg === 'pageData.category') {
      return getCategoryName(pageData?.category)
    }
  }
  
  if (funcCall.startsWith('estimateWordCount(')) {
    return estimateWordCount(pageData)
  }
  
  return funcCall
}

function getSchemaType(schemaKey: string): string {
  const typeMap: Record<string, string> = {
    webpage: 'WebPage',
    website: 'WebSite',
    aboutPage: 'AboutPage',
    contactPage: 'ContactPage',
    blogPost: 'BlogPosting'
  }
  return typeMap[schemaKey] || 'Thing'
}

function generateMeta(pageData: PageData | undefined, config: any, pageConfig: any) {
  const defaults = config.meta
  
  if (!pageData) {
    return {
      title: defaults.siteName,
      titleTemplate: defaults.titleTemplate,
      description: "Default description",
      ogSiteName: defaults.ogSiteName,
      ogImage: defaults.defaultOgImage,
      twitterCard: 'summary_large_image',
      twitterSite: defaults.twitterSite,
    }
  }

  return {
    title: pageData.title || 'Untitled',
    titleTemplate: defaults.titleTemplate,
    description: pageData.description || "Default description",
    ogTitle: pageData.title,
    ogDescription: pageData.description,
    ogSiteName: defaults.ogSiteName,
    ogType: pageConfig.type === 'blog' ? 'article' : 'website',
    ogImage: pageData.image ? 
      `/images/blog/${pageData.category}/${pageData.image}` : 
      defaults.defaultOgImage,
    twitterCard: 'summary_large_image',
    twitterSite: defaults.twitterSite,
    twitterCreator: defaults.twitterCreator,
    robots: 'index, follow',
    canonical: `https://incubrain.org${pageData.path || ''}`,
    ...(pageConfig.type === 'blog' && {
      articlePublishedTime: pageData.date,
      articleModifiedTime: pageData.date,
      articleAuthor: pageData.author || "Default Author",
      articleSection: getCategoryName(pageData.category),
      articleTag: pageData.tags || [],
    })
  }
}

function generateOgImage(pageData: PageData | undefined, pageConfig: any) {
  if (!pageData?.title || !pageConfig.ogImage) return null
  
  const ogConfig = pageConfig.ogImage
  
  // Blog category mapping
  if (pageConfig.type === 'blog' && pageData.category && ogConfig.categoryMapping) {
    const component = ogConfig.categoryMapping[pageData.category] || ogConfig.categoryMapping.default
    
    return {
      component,
      props: {
        title: pageData.title,
        category: getCategoryName(pageData.category),
        author: pageData.author || "Default Author",
        date: pageData.date,
        image: pageData.image,
        ...(pageData.tags && { tags: pageData.tags.slice(0, 3) })
      }
    }
  }
  
  // Standard page
  return {
    component: ogConfig.component,
    props: {
      title: pageData.title,
      description: pageData.description,
      type: pageConfig.type,
      variant: ogConfig.variant || 'default'
    }
  }
}

// ====================================
// UTILITIES
// ====================================
function estimateWordCount(pageData: PageData | undefined): number {
  const text = pageData?.description || ''
  return Math.max(text.split(' ').length * 10, 500)
}

function getCategoryName(category?: string): string {
  if (!category) return 'General'
  return category.replace('-', ' ').replace(/\b\w/g, (l) => l.toUpperCase())
}
</file>

<file path="app/layouts/blog.vue">
<!-- layouts/blog.vue -->
<script setup lang="ts">
const { data: metadata } = await useFetch('/api/content/metadata', {
  query: { collection: 'blog', category: 'all' },
  key: 'blog-metadata-all'
})
</script>

<template>
  <div class="min-h-screen bg-muted text-default antialiased">
    <NavHeader class="h-[var(--ui-nav-height)]" />

    <main class="min-h-[calc(100vh-4rem)]">
      <section class="section-spacing">
        <UContainer>
          <div class="grid grid-cols-1 lg:grid-cols-4 grid-spacing">
            <!-- Safe sidebar -->
            <LayoutSidebar
            class="lg:col-span-1 order-2 lg:order-1"
              content-type="blog"
              base-path="/blog"
              :category="$route.params.category?.[0]"
              title="Browse by Category"
              search-placeholder="Search posts..."
            >
              <template #search="{ placeholder }">
                <NavSearch :placeholder="placeholder" variant="input" size="md" />
              </template>
            </LayoutSidebar>

            <div class="lg:col-span-3 order-1 lg:order-2 space-y-component">
              <SectionHero
                title="AI Automation Insights"
                description="Real-world strategies for building AI automation pipelines"
                background-preset="neural"
                background-pattern="neural-network"
                enable-background-motion
                class="rounded-2xl"
              >
                <template #cta>
                  <div class="flex justify-center items-center space-x-4 text-sm text-dimmed">
                    <span>{{ metadata?.totalPosts || 0 }} insights</span>
                    <span>•</span>
                    <span>Updated regularly</span>
                  </div>
                </template>
              </SectionHero>

              <slot />

              <SectionCTA
                title="Never Miss AI Breakthroughs"
                subtitle="Weekly insights on automation strategies, technical deep-dives, and industry analysis."
              />
            </div>
          </div>
        </UContainer>
      </section>
    </main>

    <NavFooter />
  </div>
</template>
</file>

<file path="app/layouts/default.vue">
<!-- layouts/default.vue - UPDATED -->
<template>
  <div class="min-h-screen bg-muted text-default antialiased">
    <NavHeader />
    <main class="min-h-[calc(100vh-4rem)]">
      <slot />
    </main>
    <NavFooter />
  </div>
</template>
</file>

<file path="app/pages/blog/[category]/[slug].vue">
<script setup lang="ts">
const route = useRoute()
const category = route.params.category
const slug = route.params.slug

const { data: post } = await useAsyncData(`blog-${category}-${slug}`, () => {
  return queryCollection('blog').path(route.path).first()
})

if (!post.value) {
  throw createError({
    statusCode: 404,
    statusMessage: 'Blog post not found',
  })
}

// SEO Integration
// useSeoMeta(post.value.seo || {})
// useHead(post.value.head || {})
// 
// // OG Image
// if (import.meta.server && post.value?.ogImage) {
//   defineOgImage({
//     component: 'Nuxt',
//     props: {
//       headline: post.value.category.replace('-', ' ').replace(/\b\w/g, (l) => l.toUpperCase()),
//       title: post.value.title,
//       description: post.value.description,
//     },
//   })
// }
// 
// // Schema.org
// useSchemaOrg([
//   defineArticle({
//     headline: post.value.title,
//     description: post.value.description,
//     image: post.value.image || '/default-blog-image.png',
//     datePublished: post.value.date,
//     dateModified: post.value.date,
//     author: {
//       '@type': 'Organization',
//       'name': post.value.author,
//     },
//     publisher: {
//       '@type': 'Organization',
//       'name': 'Incubrain ltd.',
//       'logo': '/logo.png',
//     },
//     articleSection: post.value.category.replace('-', ' ').replace(/\b\w/g, (l) => l.toUpperCase()),
//     keywords: post.value.tags || [],
//   }),
// ])

const seo = await useSeoDefaults(post.value)
seo.apply() 

// Extract TOC from content (if available)
const tableOfContents = computed(() => {
  return post.value?.body?.toc // This comes from our enhanced TOC config
})

const currentUrl = computed(() => {
  const { public: config } = useRuntimeConfig()
  return `${config.siteUrl || 'https://incubrain.org'}${post.value?.path}`
})
</script>

<template>
  <div v-if="post">
    <!-- Progress Bar -->
    <UContainer>
      <div class="max-w-7xl mx-auto">
        <!-- Article Header -->
        <BlogArticleHeader
          :title="post.title"
          :description="post.description"
          :author="post.author || 'Drew MacGibbon'"
          :date="post.date"
          :read-time="post.readTime"
          :category="post.category"
          :tags="post.tags"
          :image="post.image"
        />

        <div class="grid grid-cols-1 xl:grid-cols-[1fr_700px_1fr] gap-8 xl:gap-8">
          <!-- Table of Contents (Desktop Sidebar) -->
          <aside class="xl:col-span-1 order-2 xl:order-1 relative border-r border-default pr-4">
            <BlogArticleTableOfContents :toc="tableOfContents" />
          </aside>

          <!-- Main Content -->
          <main class="order-1 xl:order-2 w-full max-w-3xl mx-auto xl:max-w-none px-4 xl:px-8">
            <article>
              <ContentRenderer :value="post" />
            </article>

            <Header
              class="py-8"
              title="Did you like it?"
              badge="help us grow"
            >
              <template #end>
                <SocialShare
                  :title="post.title"
                  :url="currentUrl"
                  :description="post.description"
                />
              </template>
            </Header>

            <LayoutCommunityCTA
              variant="compact"
              title="Join The Incubrain Community"
              subtitle="Get weekly practical AI automation insights."
            />

            <BlogArticleAuthorBio />

            <ContentRelated
                collection="blog"
                :current-path="post.path"
                related-by="category"
                :related-value="post.category"
                title="Related Articles"
                badge="Continue Learning"
              >
                <template #default="{ items }">
                  <BlogPostCard 
                    v-for="item in items"
                    :key="item.path"
                    :post="item" 
                  />
                </template>
              </ContentRelated>
            <div class="mt-12 pt-8 border-t border-zinc-200 dark:border-zinc-800">
              <NavSurroundings 
                collection="blog"
                :current-path="post.path" 
              />
            </div>
          </main>
        </div>
      </div>
    </UContainer>
  </div>
</template>

<style scoped>
@reference "@/assets/css/main.css";
</style>
</file>

<file path="app/pages/blog/[category]/index.vue">
<!-- pages/blog/[category]/index.vue -->
<script setup lang="ts">
definePageMeta({ layout: 'blog' })

const route = useRoute()
const category = route.params.category as string

const { data: categoryPosts, pending } = await useAsyncData(`blog-category-${category}`, () =>
  queryCollection('blog').where('category', '=', category).order('date', 'DESC').all(),
)

if (!pending.value && !categoryPosts.value?.length) {
  throw createError({
    statusCode: 404,
    statusMessage: 'Category not found',
  })
}

useHead({
  title: `${getCategoryName(category)} - Incubrain Blog`,
  meta: [
    {
      name: 'description',
      content: `Latest ${getCategoryName(category).toLowerCase()} insights and articles from Incubrain.`,
    },
  ],
})
</script>

<template>
  <BlogContent
    :posts="categoryPosts || []"
    :loading="pending"
    :show-featured="false"
    :title="getCategoryName(category)"
    badge="Latest"
    :empty-message="`No ${getCategoryName(category).toLowerCase()} posts yet`"
  />
</template>
</file>

<file path="app/pages/blog/index.vue">
<!-- pages/blog/index.vue -->
<script setup lang="ts">
definePageMeta({ layout: 'blog' })

const { data: allPosts, pending } = await useAsyncData('blog-all-posts', () =>
  queryCollection('blog').order('date', 'DESC').all(),
)

useHead({
  title: 'Blog - AI Automation Insights',
  meta: [
    {
      name: 'description',
      content: 'AI automation insights, space tech expertise, and company updates from Incubrain.',
    },
  ],
})
</script>

<template>
  <BlogContent
    :posts="allPosts || []"
    :loading="pending"
    :show-featured="true"
    title="Recent Posts"
    badge="Latest"
  />
</template>
</file>

<file path="app/pages/showcase/hero.vue">
<!-- app/pages/showcase/hero.vue - UPDATED TO USE NEW VARIANTS -->
<script setup lang="ts">
// Sample data
const sampleCards = [
  {
    title: "Template Creator",
    description: "6 years building SaaS products and Nuxt templates",
    icon: "i-lucide-code",
    iconColor: "primary"
  },
  {
    title: "Standards-Driven", 
    description: "Opinionated architecture for maximum velocity",
    icon: "i-lucide-zap",
    iconColor: "blue"
  },
  {
    title: "Batteries Included",
    description: "SEO, analytics, components - everything ready",
    icon: "i-lucide-rocket",
    iconColor: "amber"
  }
]

const heroVariants = [
  {
    name: 'Split Layout - Cards',
    description: 'Traditional 2-column: text left, cards right',
    props: {
      layout: 'split',
      mediaType: 'cards',
      hasBackground: true,
      title: "Built in 24 Hours with Nuxt Launch Kit",
      subtitle: "The same template powering this site is <strong>yours to download</strong>",
      description: "Deploy professional personal brands with opinionated architecture and maximum velocity.",
      cards: sampleCards,
      showCta: true,
      ctaText: "Get the Template",
      ctaDescription: "Free download • Full documentation • Deploy in 24 hours",
      backgroundPreset: 'circuit'
    }
  },
  {
    name: 'Centered Layout - Cards',
    description: 'Center-aligned with cards grid below',
    props: {
      layout: 'centered',
      mediaType: 'cards',
      hasBackground: false,
      title: "Professional Personal Brands",
      subtitle: "The template that <strong>powers this site</strong>",
      description: "Everything you need to launch your personal brand with maximum velocity.",
      cards: sampleCards,
      showCta: true,
      ctaText: "Download Now",
      ctaDescription: "Free forever • MIT License"
    }
  },
  {
    name: 'Fullscreen Layout - Image',
    description: 'Hero-sized with large image',
    props: {
      layout: 'fullscreen',
      mediaType: 'image',
      hasBackground: true,
      title: "Launch Your Brand",
      subtitle: "Professional templates for <strong>makers and builders</strong>",
      description: "Skip the design phase and focus on what matters - building your audience.",
      mediaSrc: "https://picsum.photos/800/500?random=1",
      mediaAlt: "Brand launch visualization",
      showCta: true,
      ctaText: "Get Started",
      backgroundPreset: 'neural'
    }
  },
  {
    name: 'Minimal Layout - No Media',
    description: 'Clean text-only approach',
    props: {
      layout: 'minimal',
      mediaType: 'none',
      hasBackground: false,
      title: "Less is More",
      subtitle: "Sometimes <strong>simplicity wins</strong>",
      description: "Clean, minimal design that lets your content speak for itself.",
      showCta: true,
      ctaText: "Learn More",
      ctaDescription: "Minimal approach • Maximum impact"
    }
  },
  {
    name: 'Compact Layout - Video',
    description: 'Compact spacing with video content',
    props: {
      layout: 'compact',
      mediaType: 'video',
      hasBackground: true,
      title: "See It In Action",
      subtitle: "Watch the <strong>24-hour deployment</strong>",
      description: "From git clone to live site in record time.",
      mediaSrc: "/default.mp4",
      mediaPoster: "https://picsum.photos/800/450?random=2",
      showCta: true,
      ctaText: "Watch Demo",
      backgroundPreset: 'quantum'
    }
  }
]
</script>

<template>
  <LayoutCenter variant="full">
    <LayoutStack variant="spacious">
      
      <!-- Page Header -->
      <LayoutCenter variant="text-only">
        <LayoutStack variant="default">
          <LayoutHeading variant="hero" :text="'Hero Section Showcase'" />
          <LayoutText variant="subtitle" :text="'Explore different hero layouts and configurations using our primitive-based system.'" />
        </LayoutStack>
      </LayoutCenter>

      <!-- Hero Variants -->
      <LayoutStack variant="spacious">
        <div 
          v-for="(variant, index) in heroVariants" 
          :key="variant.name"
          class="space-y-4"
        >
          <!-- Variant Info -->
          <LayoutCenter variant="prose">
            <LayoutStack variant="compact">
              <div class="flex items-center gap-3">
                <UBadge :label="String(index + 1)" color="primary" variant="solid" />
                <LayoutHeading  variant="section" :text="variant.name" />
            </div>
              <LayoutText variant="description" :text="variant.description" />
            </LayoutStack>
          </LayoutCenter>

          <!-- Hero Component -->
          <SectionHero v-bind="variant.props" class="py-section" />

          <!-- Divider -->
          <LayoutDivider v-if="index < heroVariants.length - 1" variant="gradient" spacing="xl" />
        </div>
      </LayoutStack>

    </LayoutStack>
  </LayoutCenter>
</template>
</file>

<file path="app/pages/index.vue">
<!-- app/pages/index.vue -->
<script setup lang="ts">
// Fetch page content from Nuxt Content
const { data: pageContent } = await useAsyncData('home-page', () =>
  queryCollection('pages').path('/').first()
)

console.log('🔍 Home Page Content:', pageContent.value)

// SEO Integration
const seo = await useSeoDefaults(pageContent.value)
seo.apply()
</script>

<template>
  <div>
    <ContentRenderer
      v-if="pageContent"
      :value="pageContent"
    />
  </div>
</template>
</file>

<file path="app/plugins/mermaid.client.ts">
// plugins/mermaid.client.ts
import mermaid, { type Mermaid } from 'mermaid'

declare module '#app' {
  interface NuxtApp {
    $mermaid: Mermaid | undefined
  }
}

export default defineNuxtPlugin(() => {
  mermaid.initialize({
    startOnLoad: false,
    theme: 'dark', // Hardcode for now
  })

  return {
    provide: {
      mermaid: mermaid as Mermaid | undefined,
    },
  }
})
</file>

<file path="app/app.vue">
<script setup lang="ts">
useSchemaOrg([
  defineOrganization({
    name: "Incubrain ltd.",
    description:
      "AI automation specialists with space tech expertise and global-local execution",
    url: "https://incubrain.org",
    logo: "/logo.png", // Add when available

    // Business details
    foundingDate: "2025",

    // Contact information
    email: "hello@incubrain.com",
    contactPoint: {
      "@type": "ContactPoint",
      contactType: "Customer Service",
      email: "hello@incubrain.com",
      areaServed: "IN",
      availableLanguage: "English",
    },

    // Business location
    address: {
      "@type": "PostalAddress",
      addressLocality: "Pune",
      addressRegion: "Maharashtra",
      addressCountry: "IN",
    },

    // Services offered
    makesOffer: [
      {
        "@type": "Offer",
        itemOffered: {
          "@type": "Service",
          name: "AI Business Process Automation",
          description: "Custom AI automation solutions for business processes",
        },
      },
      {
        "@type": "Offer",
        itemOffered: {
          "@type": "Service",
          name: "Space Technology Platform Development",
          description:
            "Specialized platform development for space technology companies",
        },
      },
    ],
  }),
]);
</script>

<template>
  <UApp>
    <NuxtLayout>
      <NuxtPage />
    </NuxtLayout>
  </UApp>
</template>

<style>
/* Vue Page Transitions */
.page-enter-active,
.page-leave-active {
  transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
}

.page-enter-from,
.page-leave-to {
  opacity: 0;
  transform: translateY(10px);
}

/* Respect reduced motion */
@media (prefers-reduced-motion: reduce) {
  .page-enter-active,
  .page-leave-active {
    transition-duration: 0.01ms !important;
  }

  .page-enter-from,
  .page-leave-to {
    transform: none !important;
  }
}
</style>
</file>

<file path="content/blog/blog-examples/block-example.md">
---
title: "Block Example"
description: "Explore the power and flexibility of carousel components for modern web experiences, featuring multiple profiles and advanced features."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "carousel-showcase-hero.jpg"
readTime: "6 min"
featured: true
tags: ["Web Components", "Carousels", "Interactive Media", "User Experience"]
ogImage:
  component: BlogPost
  props:
    title: "Mastering Carousels"
    description: "A deep dive into interactive content display"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Mastering Carousels: A Deep Dive into Interactive Content Display"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 2000
    timeRequired: "PT6M"
---

# Page with Dynamic Sections and Blocks

This page demonstrates the new dynamic section and block architecture.

::block-section{name="Orientation" type="vertical" styles='{"padding-top": "3rem"}'}
  :::block{name="Cta" variant="compact" background="circuit" id="cta-carousel"}
  ---
  title: "Carousel CTA (Compact)"
  body: "This is a compact CTA with a circuit background, nested inside a carousel slot."
  cta:
    title: "Learn More"
    link: "/blog"
  ---
  :::

  :::block{name="Cta" variant="full-width" background="solid-blue" id="cta-full"}
  ---
  title: "Full-Width CTA Example"
  body: "This CTA spans the full width of its container and uses a solid blue background."
  cta:
    title: "View Details"
    link: "/blog"
  ---
  :::

  :::block{name="Cta" variant="default" background="gradient" id="cta-default"}
  ---
  title: "Default CTA (Gradient)"
  body: "Our standard CTA variant with a lovely green-to-teal gradient background."
  cta:
    title: "Get Started"
    link: "/blog"
  ---
  :::

  :::block{name="Cta" id="cta-invalid-1" variant="compact"}
  ---
  # title: "Missing Title" <-- This line is commented out
  body: "This CTA will show an error because the title is missing."
  cta:
    title: "Broken Link"
    link: "not-a-valid-url" # Invalid URL
  ---
  :::
::
</file>

<file path="content/blog/blog-examples/carousel-mdc.md">
---
title: "Mastering Carousels: A Deep Dive into Interactive Content Display"
description: "Explore the power and flexibility of carousel components for modern web experiences, featuring multiple profiles and advanced features."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "carousel-showcase-hero.jpg"
readTime: "6 min"
featured: true
tags: ["Web Components", "Carousels", "Interactive Media", "User Experience"]
ogImage:
  component: BlogPost
  props:
    title: "Mastering Carousels"
    description: "A deep dive into interactive content display"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Mastering Carousels: A Deep Dive into Interactive Content Display"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 2000
    timeRequired: "PT6M"
---

# Mastering Carousels: A Deep Dive into Interactive Content Display

Carousels are a powerful tool for presenting multiple pieces of content in a compact, interactive format. In this article, we'll explore the various profiles and features of our carousel component, demonstrating how it can enhance user engagement and content presentation.

## Carousel Profiles

Our carousel component supports multiple variants, each optimized for different use cases.

### Gallery Variant

The gallery variant is perfect for showcasing multiple related images with consistent sizing and navigation.

::carousel
---
variant: "gallery"
items:
  - src: "https://picsum.photos/800/400?random=1"
    alt: "Modern web architecture diagram"
  - src: "https://picsum.photos/800/400?random=2"
    alt: "AI automation workflow visualization"
  - src: "https://picsum.photos/800/400?random=3"
    alt: "Database schema representation"
  - src: "https://picsum.photos/800/400?random=4"
    alt: "Component architecture overview"
---
::

### Hero Variant

Designed for dramatic visual impact, the hero variant features larger dimensions and extended timing.

::carousel
---
variant: "hero"
items:
  - src: "https://picsum.photos/1200/500?random=10"
    alt: "Space technology platform interface"
  - src: "https://picsum.photos/1200/500?random=11"
    alt: "AI business automation dashboard"
  - src: "https://picsum.photos/1200/500?random=12"
    alt: "Technical documentation system"
---
::

### Thumbnail Variant

Ideal for showing multiple items simultaneously in a scrollable strip.

::carousel
---
variant: "thumbnail"
items:
  - src: "https://picsum.photos/300/200?random=20"
    alt: "Tech stack component 1"
  - src: "https://picsum.photos/300/200?random=21"
    alt: "Tech stack component 2"
  - src: "https://picsum.photos/300/200?random=22"
    alt: "Tech stack component 3"
  - src: "https://picsum.photos/300/200?random=23"
    alt: "Tech stack component 4"
  - src: "https://picsum.photos/300/200?random=24"
    alt: "Tech stack component 5"
  - src: "https://picsum.photos/300/200?random=25"
    alt: "Tech stack component 6"
---
::

### Showcase Variant

Displays multiple items simultaneously with proper spacing.

::carousel
---
variant: "showcase"
items:
  - src: "https://picsum.photos/600/350?random=30"
    alt: "Business automation success story"
  - src: "https://picsum.photos/600/350?random=31"
    alt: "Technical implementation case study"
  - src: "https://picsum.photos/600/350?random=32"
    alt: "Space tech platform development"
  - src: "https://picsum.photos/600/350?random=33"
    alt: "Global-local execution model"
  - src: "https://picsum.photos/600/350?random=34"
    alt: "AI-native development approach"
---
::

## Advanced Carousel Features

### Fade Transition Gallery

Enhance your carousel with fade transitions for elegant content switching.

::carousel
---
variant: "gallery"
items:
  - src: "https://picsum.photos/800/400?random=40"
    alt: "Fade transition demo 1"
  - src: "https://picsum.photos/800/400?random=41"
    alt: "Fade transition demo 2"
  - src: "https://picsum.photos/800/400?random=42"
    alt: "Fade transition demo 3"
---
::

### Slot-Based Carousels

For ultimate flexibility, use slot-based carousels to mix different component types.

::carousel{variant="showcase"}
  :::layout-testimonial-card{variant="card"}
  ---
  items:
    - quote: "Mixed content works great with slots and compact CTAs."
      author: "Mixed User"
      title: "Manager"
      company: "Mixed Corp"
      rating: 4
  ---
  :::

  :::cta{variant="compact" background="circuit"}
  ---
  title: "CTA Inside Carousel"
  body: "This demonstrates compact CTA flexibility in carousels."
  cta:
    title: "Learn More"
    link: "/blog"
  ---
  :::

  :::layout-testimonial-card{variant="card"}
  ---
  items:
    - quote: "Slots enable any component combination with proper sizing."
      author: "Flexible User"
      title: "Creative Director"
      company: "Innovation Inc"
      rating: 5
  ---
  :::
::

## Technical Implementation

Our carousel component is built on modern web technologies:

- **Variant-based styling**: Simplifies configuration with opinionated presets.
- **TypeScript interfaces**: Ensures type safety across all props.
- **Vue 3 Composition API**: Provides optimal reactivity and performance.
- **SSR compatibility**: Supports server-side rendering for SEO.

```typescript
const variantConfigs = {
  gallery: {
    ui: { /* optimized gallery styling */ },
    autoplay: { delay: 4000 },
    orientation: 'horizontal',
    align: 'center'
  },
  hero: {
    ui: { /* dramatic showcase styling */ },
    autoplay: { delay: 6000 },
    orientation: 'horizontal',
    align: 'center'
  }
}
```

## Conclusion

Carousels offer a versatile way to enhance content presentation and user engagement. With various variants and advanced features, you can tailor experiences to your specific needs, whether showcasing images, testimonials, or mixed content.
</file>

<file path="content/blog/blog-examples/mcd-components.md">
---
title: "Enhancing Content with Advanced Components"
description: "Discover how our suite of content components, including CTAs and background patterns, can elevate your web experiences."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "component-enhancement-hero.jpg"
readTime: "5 min"
featured: true
tags: ["Web Components", "Content Management", "User Experience", "Design Patterns"]
ogImage:
  component: BlogPost
  props:
    title: "Enhancing Content with Advanced Components"
    description: "CTAs, background patterns, and more for better web experiences"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Enhancing Content with Advanced Components"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 1800
    timeRequired: "PT5M"
---

# Enhancing Content with Advanced Components

Modern web experiences go beyond static text and images. In this article, we explore our suite of content components—focusing on CTAs and background patterns—to create engaging and effective web pages.

## ContentCta: Strategic Conversion Elements

Our CTA component provides contextual calls-to-action to guide users through your content.

### Technical Consultation CTA

::cta{background="circuit"}
---
title: "Need AI Automation Implementation?"
body: "Our team specializes in business process automation with measurable ROI. Get a free consultation to discover automation opportunities in your workflow."
cta:
  title: "Schedule Consultation"
  link: "/contact"
imageUrl: "favicon-96x96.png"
---
::

### Developer Community CTA

::cta{background="gradient"}
---
title: "Join Our Developer Community"
body: "Connect with AI-native developers, access exclusive resources, and stay ahead of automation trends. Open source contributors welcome."
cta:
  title: "Join Discord"
  link: "https://discord.gg/incubrain"
imageUrl: "favicon-96x96.png"
---
::

## Background Pattern Showcase

Background patterns add visual interest and hierarchy without overwhelming the main message.

### Circuit Pattern Intensity Variations

::cta{background="circuit" backgroundIntensity="light"}
---
title: "Light Circuit Pattern"
body: "Subtle background pattern for minimal distraction while maintaining visual interest."
cta:
  title: "Light Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="medium"}
---
title: "Medium Circuit Pattern"
body: "Balanced background pattern providing good visual separation without overwhelming content."
cta:
  title: "Medium Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="strong"}
---
title: "Strong Circuit Pattern"
body: "Bold background pattern for maximum visual impact and attention-grabbing CTAs."
cta:
  title: "Strong Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

## Performance Optimization

To ensure our components perform well, we use:

- **Lazy loading**: Media loads only when needed.
- **Responsive design**: Adapts to various screen sizes.
- **Modern formats**: WebP images with fallbacks.
- **Preloading**: Critical resources load faster.

## Real-World Applications

These components shine in:

- **Documentation Systems**: Enhancing technical docs with clear CTAs.
- **Marketing Integration**: Boosting engagement with strategic CTAs.
- **Educational Content**: Supporting learning with visual patterns.

## Conclusion

Advanced components like CTAs and background patterns elevate web experiences, improving aesthetics and guiding users to desired actions for better engagement and conversions.
</file>

<file path="content/blog/blog-examples/mermaid-diagrams.md">
---
title: "Comprehensive Mermaid Diagram Integration: Visual Documentation in Modern Web Applications"
description: "Complete guide to implementing and theming Mermaid diagrams in Nuxt applications. Featuring 15+ diagram types with custom GitHub Dark theme integration and responsive design patterns."
date: "2025-07-09"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "mermaid-diagram-showcase-cover.jpg"
readTime: "12 min"
featured: true
tags: ["Mermaid", "Documentation", "Data Visualization", "Nuxt", "Vue", "Frontend Architecture", "Developer Tools"]
ogImage:
  component: BlogPost
  props:
    title: "Comprehensive Mermaid Diagram Integration"
    description: "15+ diagram types with custom theming and responsive design"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-09"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "TechArticle"
    headline: "Comprehensive Mermaid Diagram Integration: Visual Documentation in Modern Web Applications"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-09"
    dateModified: "2025-07-09"
    description: "Technical implementation guide for Mermaid diagrams with custom theming in Nuxt applications"
    keywords: "Mermaid, Data Visualization, Documentation, Nuxt, Vue, Frontend Development"
    articleSection: "Frontend Development"
    wordCount: 6000
    inLanguage: "en-UK"
---

# Comprehensive Mermaid Diagram Integration: Visual Documentation in Modern Web Applications

In modern web development, visual documentation has become essential for communicating complex architectures, workflows, and relationships. Mermaid diagrams provide a powerful solution for creating professional, interactive visualizations directly within markdown content.

This article showcases a comprehensive implementation of Mermaid diagrams in a Nuxt application, featuring custom GitHub Dark theming, responsive design patterns, and production-ready integration techniques.

## Implementation Overview

Our Mermaid integration supports 15+ diagram types with consistent theming that matches our GitHub Dark design system. Each diagram is rendered with proper error handling, unique ID generation, and responsive scaling.

### Core Architecture

The implementation follows a component-based approach with client-side rendering to prevent hydration issues:

```typescript
// Component architecture pattern
<ClientOnly>
  <MermaidDiagram :code="diagramCode" size="lg" />
</ClientOnly>
```

## Diagram Types Showcase

### 1. Flowchart - System Architecture

Perfect for visualizing application architecture and data flow patterns:

```mermaid
flowchart TD
    A[Current: PostgreSQL Unified] --> B[Phase 2: Hybrid Architecture]
    B --> C[PostgreSQL: Entity Storage]
    B --> D[Graph DB: Relationship Storage]
    C --> E[Automated Sync Layer]
    D --> E
    E --> F[Unified API Layer]
    F --> G[Client Applications]
```

**Use Cases**: System architecture, process flows, decision trees, API workflows

### 2. Sequence Diagram - API Interactions

Ideal for documenting API interactions and temporal relationships:

```mermaid
sequenceDiagram
    participant Client
    participant API
    participant Database
    participant Cache
    
    Client->>API: Request Data
    API->>Cache: Check Cache
    alt Cache Hit
        Cache-->>API: Return Cached Data
    else Cache Miss
        API->>Database: Query Database
        Database-->>API: Return Data
        API->>Cache: Store in Cache
    end
    API-->>Client: Return Response
```

**Use Cases**: API documentation, user interactions, microservice communication, authentication flows

### 3. Class Diagram - Object Relationships

Essential for documenting object-oriented designs and data models:

```mermaid
classDiagram
    class User {
        +string id
        +string email
        +string name
        +login()
        +logout()
    }
    
    class Project {
        +string id
        +string title
        +string description
        +create()
        +delete()
    }
    
    User ||--o{ Project : owns
```

**Use Cases**: Database schema design, class hierarchies, component relationships, domain modeling

### 4. State Diagram - Application States

Perfect for modeling state machines and application workflows:

```mermaid
stateDiagram-v2
    [*] --> Idle
    Idle --> Processing : Start
    Processing --> Success : Complete
    Processing --> Error : Fail
    Success --> [*]
    Error --> Retry : Retry
    Retry --> Processing
    Error --> [*] : Give Up
```

**Use Cases**: User authentication states, order processing, form validation, game states

### 5. Entity Relationship Diagram - Database Design

Critical for database schema documentation and relationship modeling:

```mermaid
erDiagram
    USER ||--o{ PROJECT : owns
    USER ||--o{ TASK : assigned_to
    USER {
        string userId PK
        string email
        string name
        datetime created_at
    }
    PROJECT ||--o{ TASK : contains
    PROJECT {
        string id PK
        string title
        string description
        string userId FK "Project owner"
    }
    TASK {
        string id PK
        string title
        string status
        string project_id FK
        string userId FK "Task owner"
    }
```

**Use Cases**: Database schema documentation, data modeling, relationship analysis, migration planning

### 6. User Journey - Experience Mapping

Excellent for documenting user experience flows and touchpoints:

```mermaid
journey
    title User Authentication Journey
    section Login
      Visit site: 5: User
      Enter credentials: 3: User
      Submit form: 2: User, System
      Validate: 4: System
      Redirect: 5: User, System
    section Dashboard
      Load data: 4: System
      Display content: 5: User
      Navigate: 5: User
```

**Use Cases**: User experience design, customer journey mapping, onboarding flows, conversion optimization

### 7. Gantt Chart - Project Timeline

Essential for project management and timeline visualization:

```mermaid
gantt
    title Project Development Timeline
    dateFormat  YYYY-MM-DD
    section Planning
    Research           :done,    des1, 2024-01-01,2024-01-14
    Design             :done,    des2, 2024-01-15,2024-01-28
    section Development
    Backend API        :active,  dev1, 2024-01-29,2024-02-28
    Frontend UI        :         dev2, 2024-02-15,2024-03-15
    Testing            :         test1, 2024-03-01,2024-03-20
    section Deployment
    Staging Deploy     :         deploy1, 2024-03-15,2024-03-18
    Production Deploy  :         deploy2, 2024-03-18,2024-03-20
```

**Use Cases**: Project planning, milestone tracking, resource allocation, sprint planning

### 8. Pie Chart - Data Distribution

Perfect for showing proportional data and resource allocation:

```mermaid
pie title Development Time Allocation
    "Frontend" : 30
    "Backend" : 25
    "AI Integration" : 20
    "Testing" : 15
    "DevOps" : 10
```

**Use Cases**: Budget allocation, time tracking, market share analysis, performance metrics

### 9. Quadrant Chart - Decision Matrix

Ideal for strategic analysis and prioritization frameworks:

```mermaid
quadrantChart
    title Technology Adoption Matrix
    x-axis Low Complexity --> High Complexity
    y-axis Low Impact --> High Impact
    quadrant-1 Quick Wins
    quadrant-2 Major Projects
    quadrant-3 Fill-ins
    quadrant-4 Questionable
    
    API Gateway: [0.7, 0.8]
    Microservices: [0.9, 0.9]
    Docker: [0.4, 0.6]
    Kubernetes: [0.8, 0.7]
    Monitoring: [0.3, 0.8]
```

**Use Cases**: Technology adoption, feature prioritization, risk assessment, strategic planning

### 10. Requirement Diagram - Specification Modeling

Essential for documenting requirements and verification methods:

```mermaid
requirementDiagram
    requirement UserAuth {
        id: 1
        text: User must be able to authenticate
        risk: medium
        verifymethod: test
    }
    
    requirement DataSecurity {
        id: 2
        text: Data must be encrypted
        risk: high
        verifymethod: inspection
    }
    
    element LoginForm {
        type: interface
    }
    
    UserAuth - satisfies -> LoginForm
    DataSecurity - refines -> UserAuth
```

**Use Cases**: Requirements engineering, compliance documentation, testing strategy, system specifications

### 11. Git Graph - Version Control Visualization

Perfect for documenting branching strategies and release workflows:

```mermaid
gitGraph
    commit id: "Initial Setup"
    branch feature/auth
    checkout feature/auth
    commit id: "Add login"
    commit id: "Add logout"
    checkout main
    commit id: "Update readme"
    merge feature/auth
    commit id: "Release v1.0"
    branch hotfix
    checkout hotfix
    commit id: "Fix security"
    checkout main
    merge hotfix
    commit id: "Release v1.0.1"
```

**Use Cases**: Git workflow documentation, release planning, branching strategy, deployment pipelines

### 12. Mindmap - Concept Organization

Excellent for brainstorming sessions and knowledge organization:

```mermaid
mindmap
  root((AI Strategy))
    Infrastructure
      Hardware
        GPUs
        Cloud
      Software
        Frameworks
        Libraries
    Applications
      Automation
        Workflows
        Processes
      Analytics
        Insights
        Reporting
    Team
      Skills
        Technical
        Domain
      Training
        Courses
        Workshops
```

**Use Cases**: Brainstorming, knowledge mapping, strategic planning, learning pathways

### 13. Timeline - Event Chronology

Perfect for documenting historical events and future planning:

```mermaid
timeline
    title AI Survival Timeline: 2025-2030
    
    2025-2026 : Build Foundation
              : Daily AI Habits
              : Prompt Engineering
              : Tool Selection
              : Basic Collaboration
    
    2026-2028 : Become Orchestrator
              : Advanced Workflows
              : Multi-AI Coordination
              : System Architecture
              : Human Skills Focus
    
    2028-2030 : Thrive in New Economy
              : AI System Designer
              : Interface Specialist
              : Ethics Consultant
              : Adaptation Expert
```

**Use Cases**: Roadmap planning, historical documentation, milestone tracking, evolution timelines

### 14. Sankey Diagram - Flow Visualization

Ideal for showing flow and distribution patterns:

```mermaid
sankey-beta
    Marketing,Development,20
    Marketing,Sales,30
    Development,QA,25
    Development,DevOps,15
    Sales,Support,35
    QA,Release,20
    DevOps,Release,10
    Support,Users,40
    Release,Users,30
```

**Use Cases**: Resource flow analysis, conversion funnel visualization, energy/cost distribution, process optimization

### 15. XY Chart - Data Trends

Essential for displaying quantitative data and trends:

```mermaid
xychart-beta
    title "Revenue Growth"
    x-axis [Jan, Feb, Mar, Apr, May, Jun]
    y-axis "Revenue (thousands)" 0 --> 100
    bar [20, 30, 45, 55, 70, 85]
    line [15, 25, 40, 50, 65, 80]
```

**Use Cases**: Performance metrics, trend analysis, financial reporting, KPI dashboards

### 16. Graph - Network Relationships

Perfect for complex system relationships and network topologies:

```mermaid
graph TB
    subgraph "API Layer"
        API[REST API]
        DB[(PostgreSQL)]
        CACHE[(Redis)]
        QUEUE[RabbitMQ]
    end
    
    subgraph "Applications"
        WEB[Web App]
        MOBILE[Mobile App]
    end
    
    WEB --> API
    MOBILE --> API
    API --> DB
    API --> CACHE
    API --> QUEUE
```

**Use Cases**: System architecture, network topology, dependency mapping, infrastructure documentation

### 17. Radar Chart - Multi-dimensional Comparison

Excellent for comparing multiple attributes across different categories:

```mermaid
radar-beta
    title Technology Radar
    axis frontend["Frontend"], backend["Backend"], database["Database"], devops["DevOps"]
    axis security["Security"], testing["Testing"], aiml["AI/ML"], mobile["Mobile"]
    curve skills{5, 4, 3, 4, 3, 4, 5, 2}
```

**Use Cases**: Skill assessment, technology evaluation, performance benchmarking, competitive analysis

## Technical Implementation Details

### Theme Integration

Our Mermaid implementation uses a custom theme that integrates seamlessly with the GitHub Dark design system:

```javascript
const themeConfig = {
  primaryColor: '#3b82f6',        // Blue primary
  secondaryColor: '#7c3aed',      // Purple accents
  background: '#0d1117',          // GitHub dark background
  primaryTextColor: '#f0f6fc',    // GitHub text primary
  lineColor: '#30363d'            // GitHub border default
}
```

### Error Handling and Fallbacks

Each diagram includes robust error handling with graceful fallbacks:

- Syntax validation before rendering
- Unique ID generation to prevent conflicts
- Fallback code display for failed renders
- Detailed error messages for debugging

### Responsive Design

Diagrams automatically scale across device sizes with configurable size variants:

- **Small**: Optimized for mobile viewing
- **Medium**: Standard desktop display
- **Large**: Detailed presentation mode
- **Auto**: Dynamic sizing based on content

## Best Practices and Recommendations

### 1. Syntax Validation
Always validate diagram syntax before deployment. Common issues include:
- Incorrect relationship syntax in ER diagrams
- Missing semicolons in class definitions
- Invalid date formats in Gantt charts

### 2. Performance Considerations
- Use client-side rendering to prevent hydration issues
- Implement lazy loading for diagram-heavy pages
- Cache rendered SVG output when possible

### 3. Accessibility
- Provide alternative text descriptions
- Ensure sufficient color contrast
- Support keyboard navigation where applicable

### 4. Content Strategy
- Use consistent terminology across diagrams
- Maintain diagram simplicity for readability
- Regular updates to keep documentation current

## Conclusion

Mermaid diagrams provide a powerful solution for visual documentation in modern web applications. Our implementation demonstrates how to integrate these tools with custom theming, proper error handling, and responsive design patterns.

The combination of 15+ diagram types with GitHub Dark theming creates a professional documentation experience that scales from simple flowcharts to complex system architectures. This approach enables teams to create maintainable, version-controlled visual documentation that evolves with their codebase.

Whether documenting API flows, database schemas, or user journeys, Mermaid diagrams offer a code-first approach to visual communication that fits naturally into modern development workflows.
</file>

<file path="content/blog/blog-examples/test-article-1.md">
---
title: "Test blog article 1"
description: "Discover how our suite of content components, including CTAs and background patterns, can elevate your web experiences."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "component-enhancement-hero.jpg"
readTime: "5 min"
featured: true
tags: ["Web Components", "Content Management", "User Experience", "Design Patterns"]
ogImage:
  component: BlogPost
  props:
    title: "Test blog article 1"
    description: "CTAs, background patterns, and more for better web experiences"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Enhancing Content with Advanced Components"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 1800
    timeRequired: "PT5M"
---

# Enhancing Content with Advanced Components

Modern web experiences go beyond static text and images. In this article, we explore our suite of content components—focusing on CTAs and background patterns—to create engaging and effective web pages.

## ContentCta: Strategic Conversion Elements

Our CTA component provides contextual calls-to-action to guide users through your content.

### Technical Consultation CTA

::cta{background="circuit"}
---
title: "Need AI Automation Implementation?"
body: "Our team specializes in business process automation with measurable ROI. Get a free consultation to discover automation opportunities in your workflow."
cta:
  title: "Schedule Consultation"
  link: "/contact"
imageUrl: "favicon-96x96.png"
---
::

### Developer Community CTA

::cta{background="gradient"}
---
title: "Join Our Developer Community"
body: "Connect with AI-native developers, access exclusive resources, and stay ahead of automation trends. Open source contributors welcome."
cta:
  title: "Join Discord"
  link: "https://discord.gg/incubrain"
imageUrl: "favicon-96x96.png"
---
::

## Background Pattern Showcase

Background patterns add visual interest and hierarchy without overwhelming the main message.

### Circuit Pattern Intensity Variations

::cta{background="circuit" backgroundIntensity="light"}
---
title: "Light Circuit Pattern"
body: "Subtle background pattern for minimal distraction while maintaining visual interest."
cta:
  title: "Light Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="medium"}
---
title: "Medium Circuit Pattern"
body: "Balanced background pattern providing good visual separation without overwhelming content."
cta:
  title: "Medium Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="strong"}
---
title: "Strong Circuit Pattern"
body: "Bold background pattern for maximum visual impact and attention-grabbing CTAs."
cta:
  title: "Strong Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

## Performance Optimization

To ensure our components perform well, we use:

- **Lazy loading**: Media loads only when needed.
- **Responsive design**: Adapts to various screen sizes.
- **Modern formats**: WebP images with fallbacks.
- **Preloading**: Critical resources load faster.

## Real-World Applications

These components shine in:

- **Documentation Systems**: Enhancing technical docs with clear CTAs.
- **Marketing Integration**: Boosting engagement with strategic CTAs.
- **Educational Content**: Supporting learning with visual patterns.

## Conclusion

Advanced components like CTAs and background patterns elevate web experiences, improving aesthetics and guiding users to desired actions for better engagement and conversions.
</file>

<file path="content/blog/blog-examples/test-article-10.md">
---
title: "Test blog article 10"
description: "Discover how our suite of content components, including CTAs and background patterns, can elevate your web experiences."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "component-enhancement-hero.jpg"
readTime: "5 min"
featured: true
tags: ["Web Components", "Content Management", "User Experience", "Design Patterns"]
ogImage:
  component: BlogPost
  props:
    title: "Test blog article 10"
    description: "CTAs, background patterns, and more for better web experiences"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Enhancing Content with Advanced Components"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 1800
    timeRequired: "PT5M"
---

# Enhancing Content with Advanced Components

Modern web experiences go beyond static text and images. In this article, we explore our suite of content components—focusing on CTAs and background patterns—to create engaging and effective web pages.

## ContentCta: Strategic Conversion Elements

Our CTA component provides contextual calls-to-action to guide users through your content.

### Technical Consultation CTA

::cta{background="circuit"}
---
title: "Need AI Automation Implementation?"
body: "Our team specializes in business process automation with measurable ROI. Get a free consultation to discover automation opportunities in your workflow."
cta:
  title: "Schedule Consultation"
  link: "/contact"
imageUrl: "favicon-96x96.png"
---
::

### Developer Community CTA

::cta{background="gradient"}
---
title: "Join Our Developer Community"
body: "Connect with AI-native developers, access exclusive resources, and stay ahead of automation trends. Open source contributors welcome."
cta:
  title: "Join Discord"
  link: "https://discord.gg/incubrain"
imageUrl: "favicon-96x96.png"
---
::

## Background Pattern Showcase

Background patterns add visual interest and hierarchy without overwhelming the main message.

### Circuit Pattern Intensity Variations

::cta{background="circuit" backgroundIntensity="light"}
---
title: "Light Circuit Pattern"
body: "Subtle background pattern for minimal distraction while maintaining visual interest."
cta:
  title: "Light Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="medium"}
---
title: "Medium Circuit Pattern"
body: "Balanced background pattern providing good visual separation without overwhelming content."
cta:
  title: "Medium Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="strong"}
---
title: "Strong Circuit Pattern"
body: "Bold background pattern for maximum visual impact and attention-grabbing CTAs."
cta:
  title: "Strong Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

## Performance Optimization

To ensure our components perform well, we use:

- **Lazy loading**: Media loads only when needed.
- **Responsive design**: Adapts to various screen sizes.
- **Modern formats**: WebP images with fallbacks.
- **Preloading**: Critical resources load faster.

## Real-World Applications

These components shine in:

- **Documentation Systems**: Enhancing technical docs with clear CTAs.
- **Marketing Integration**: Boosting engagement with strategic CTAs.
- **Educational Content**: Supporting learning with visual patterns.

## Conclusion

Advanced components like CTAs and background patterns elevate web experiences, improving aesthetics and guiding users to desired actions for better engagement and conversions.
</file>

<file path="content/blog/blog-examples/test-article-11.md">
---
title: "Test blog article 11"
description: "Discover how our suite of content components, including CTAs and background patterns, can elevate your web experiences."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "component-enhancement-hero.jpg"
readTime: "5 min"
featured: true
tags: ["Web Components", "Content Management", "User Experience", "Design Patterns"]
ogImage:
  component: BlogPost
  props:
    title: "Test blog article 11"
    description: "CTAs, background patterns, and more for better web experiences"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Enhancing Content with Advanced Components"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 1800
    timeRequired: "PT5M"
---

# Enhancing Content with Advanced Components

Modern web experiences go beyond static text and images. In this article, we explore our suite of content components—focusing on CTAs and background patterns—to create engaging and effective web pages.

## ContentCta: Strategic Conversion Elements

Our CTA component provides contextual calls-to-action to guide users through your content.

### Technical Consultation CTA

::cta{background="circuit"}
---
title: "Need AI Automation Implementation?"
body: "Our team specializes in business process automation with measurable ROI. Get a free consultation to discover automation opportunities in your workflow."
cta:
  title: "Schedule Consultation"
  link: "/contact"
imageUrl: "favicon-96x96.png"
---
::

### Developer Community CTA

::cta{background="gradient"}
---
title: "Join Our Developer Community"
body: "Connect with AI-native developers, access exclusive resources, and stay ahead of automation trends. Open source contributors welcome."
cta:
  title: "Join Discord"
  link: "https://discord.gg/incubrain"
imageUrl: "favicon-96x96.png"
---
::

## Background Pattern Showcase

Background patterns add visual interest and hierarchy without overwhelming the main message.

### Circuit Pattern Intensity Variations

::cta{background="circuit" backgroundIntensity="light"}
---
title: "Light Circuit Pattern"
body: "Subtle background pattern for minimal distraction while maintaining visual interest."
cta:
  title: "Light Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="medium"}
---
title: "Medium Circuit Pattern"
body: "Balanced background pattern providing good visual separation without overwhelming content."
cta:
  title: "Medium Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="strong"}
---
title: "Strong Circuit Pattern"
body: "Bold background pattern for maximum visual impact and attention-grabbing CTAs."
cta:
  title: "Strong Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

## Performance Optimization

To ensure our components perform well, we use:

- **Lazy loading**: Media loads only when needed.
- **Responsive design**: Adapts to various screen sizes.
- **Modern formats**: WebP images with fallbacks.
- **Preloading**: Critical resources load faster.

## Real-World Applications

These components shine in:

- **Documentation Systems**: Enhancing technical docs with clear CTAs.
- **Marketing Integration**: Boosting engagement with strategic CTAs.
- **Educational Content**: Supporting learning with visual patterns.

## Conclusion

Advanced components like CTAs and background patterns elevate web experiences, improving aesthetics and guiding users to desired actions for better engagement and conversions.
</file>

<file path="content/blog/blog-examples/test-article-2.md">
---
title: "Test blog article 2"
description: "Discover how our suite of content components, including CTAs and background patterns, can elevate your web experiences."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "component-enhancement-hero.jpg"
readTime: "5 min"
featured: true
tags: ["Web Components", "Content Management", "User Experience", "Design Patterns"]
ogImage:
  component: BlogPost
  props:
    title: "Test blog article 2"
    description: "CTAs, background patterns, and more for better web experiences"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Enhancing Content with Advanced Components"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 1800
    timeRequired: "PT5M"
---

# Enhancing Content with Advanced Components

Modern web experiences go beyond static text and images. In this article, we explore our suite of content components—focusing on CTAs and background patterns—to create engaging and effective web pages.

## ContentCta: Strategic Conversion Elements

Our CTA component provides contextual calls-to-action to guide users through your content.

### Technical Consultation CTA

::cta{background="circuit"}
---
title: "Need AI Automation Implementation?"
body: "Our team specializes in business process automation with measurable ROI. Get a free consultation to discover automation opportunities in your workflow."
cta:
  title: "Schedule Consultation"
  link: "/contact"
imageUrl: "favicon-96x96.png"
---
::

### Developer Community CTA

::cta{background="gradient"}
---
title: "Join Our Developer Community"
body: "Connect with AI-native developers, access exclusive resources, and stay ahead of automation trends. Open source contributors welcome."
cta:
  title: "Join Discord"
  link: "https://discord.gg/incubrain"
imageUrl: "favicon-96x96.png"
---
::

## Background Pattern Showcase

Background patterns add visual interest and hierarchy without overwhelming the main message.

### Circuit Pattern Intensity Variations

::cta{background="circuit" backgroundIntensity="light"}
---
title: "Light Circuit Pattern"
body: "Subtle background pattern for minimal distraction while maintaining visual interest."
cta:
  title: "Light Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="medium"}
---
title: "Medium Circuit Pattern"
body: "Balanced background pattern providing good visual separation without overwhelming content."
cta:
  title: "Medium Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="strong"}
---
title: "Strong Circuit Pattern"
body: "Bold background pattern for maximum visual impact and attention-grabbing CTAs."
cta:
  title: "Strong Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

## Performance Optimization

To ensure our components perform well, we use:

- **Lazy loading**: Media loads only when needed.
- **Responsive design**: Adapts to various screen sizes.
- **Modern formats**: WebP images with fallbacks.
- **Preloading**: Critical resources load faster.

## Real-World Applications

These components shine in:

- **Documentation Systems**: Enhancing technical docs with clear CTAs.
- **Marketing Integration**: Boosting engagement with strategic CTAs.
- **Educational Content**: Supporting learning with visual patterns.

## Conclusion

Advanced components like CTAs and background patterns elevate web experiences, improving aesthetics and guiding users to desired actions for better engagement and conversions.
</file>

<file path="content/blog/blog-examples/test-article-3.md">
---
title: "Test blog article 3"
description: "Discover how our suite of content components, including CTAs and background patterns, can elevate your web experiences."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "component-enhancement-hero.jpg"
readTime: "5 min"
featured: true
tags: ["Web Components", "Content Management", "User Experience", "Design Patterns"]
ogImage:
  component: BlogPost
  props:
    title: "Test blog article 3"
    description: "CTAs, background patterns, and more for better web experiences"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Enhancing Content with Advanced Components"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 1800
    timeRequired: "PT5M"
---

# Enhancing Content with Advanced Components

Modern web experiences go beyond static text and images. In this article, we explore our suite of content components—focusing on CTAs and background patterns—to create engaging and effective web pages.

## ContentCta: Strategic Conversion Elements

Our CTA component provides contextual calls-to-action to guide users through your content.

### Technical Consultation CTA

::cta{background="circuit"}
---
title: "Need AI Automation Implementation?"
body: "Our team specializes in business process automation with measurable ROI. Get a free consultation to discover automation opportunities in your workflow."
cta:
  title: "Schedule Consultation"
  link: "/contact"
imageUrl: "favicon-96x96.png"
---
::

### Developer Community CTA

::cta{background="gradient"}
---
title: "Join Our Developer Community"
body: "Connect with AI-native developers, access exclusive resources, and stay ahead of automation trends. Open source contributors welcome."
cta:
  title: "Join Discord"
  link: "https://discord.gg/incubrain"
imageUrl: "favicon-96x96.png"
---
::

## Background Pattern Showcase

Background patterns add visual interest and hierarchy without overwhelming the main message.

### Circuit Pattern Intensity Variations

::cta{background="circuit" backgroundIntensity="light"}
---
title: "Light Circuit Pattern"
body: "Subtle background pattern for minimal distraction while maintaining visual interest."
cta:
  title: "Light Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="medium"}
---
title: "Medium Circuit Pattern"
body: "Balanced background pattern providing good visual separation without overwhelming content."
cta:
  title: "Medium Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="strong"}
---
title: "Strong Circuit Pattern"
body: "Bold background pattern for maximum visual impact and attention-grabbing CTAs."
cta:
  title: "Strong Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

## Performance Optimization

To ensure our components perform well, we use:

- **Lazy loading**: Media loads only when needed.
- **Responsive design**: Adapts to various screen sizes.
- **Modern formats**: WebP images with fallbacks.
- **Preloading**: Critical resources load faster.

## Real-World Applications

These components shine in:

- **Documentation Systems**: Enhancing technical docs with clear CTAs.
- **Marketing Integration**: Boosting engagement with strategic CTAs.
- **Educational Content**: Supporting learning with visual patterns.

## Conclusion

Advanced components like CTAs and background patterns elevate web experiences, improving aesthetics and guiding users to desired actions for better engagement and conversions.
</file>

<file path="content/blog/blog-examples/test-article-4.md">
---
title: "Test blog article 4"
description: "Discover how our suite of content components, including CTAs and background patterns, can elevate your web experiences."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "component-enhancement-hero.jpg"
readTime: "5 min"
featured: true
tags: ["Web Components", "Content Management", "User Experience", "Design Patterns"]
ogImage:
  component: BlogPost
  props:
    title: "Test blog article 4"
    description: "CTAs, background patterns, and more for better web experiences"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Enhancing Content with Advanced Components"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 1800
    timeRequired: "PT5M"
---

# Enhancing Content with Advanced Components

Modern web experiences go beyond static text and images. In this article, we explore our suite of content components—focusing on CTAs and background patterns—to create engaging and effective web pages.

## ContentCta: Strategic Conversion Elements

Our CTA component provides contextual calls-to-action to guide users through your content.

### Technical Consultation CTA

::cta{background="circuit"}
---
title: "Need AI Automation Implementation?"
body: "Our team specializes in business process automation with measurable ROI. Get a free consultation to discover automation opportunities in your workflow."
cta:
  title: "Schedule Consultation"
  link: "/contact"
imageUrl: "favicon-96x96.png"
---
::

### Developer Community CTA

::cta{background="gradient"}
---
title: "Join Our Developer Community"
body: "Connect with AI-native developers, access exclusive resources, and stay ahead of automation trends. Open source contributors welcome."
cta:
  title: "Join Discord"
  link: "https://discord.gg/incubrain"
imageUrl: "favicon-96x96.png"
---
::

## Background Pattern Showcase

Background patterns add visual interest and hierarchy without overwhelming the main message.

### Circuit Pattern Intensity Variations

::cta{background="circuit" backgroundIntensity="light"}
---
title: "Light Circuit Pattern"
body: "Subtle background pattern for minimal distraction while maintaining visual interest."
cta:
  title: "Light Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="medium"}
---
title: "Medium Circuit Pattern"
body: "Balanced background pattern providing good visual separation without overwhelming content."
cta:
  title: "Medium Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="strong"}
---
title: "Strong Circuit Pattern"
body: "Bold background pattern for maximum visual impact and attention-grabbing CTAs."
cta:
  title: "Strong Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

## Performance Optimization

To ensure our components perform well, we use:

- **Lazy loading**: Media loads only when needed.
- **Responsive design**: Adapts to various screen sizes.
- **Modern formats**: WebP images with fallbacks.
- **Preloading**: Critical resources load faster.

## Real-World Applications

These components shine in:

- **Documentation Systems**: Enhancing technical docs with clear CTAs.
- **Marketing Integration**: Boosting engagement with strategic CTAs.
- **Educational Content**: Supporting learning with visual patterns.

## Conclusion

Advanced components like CTAs and background patterns elevate web experiences, improving aesthetics and guiding users to desired actions for better engagement and conversions.
</file>

<file path="content/blog/blog-examples/test-article-5.md">
---
title: "Test blog article 5"
description: "Discover how our suite of content components, including CTAs and background patterns, can elevate your web experiences."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "component-enhancement-hero.jpg"
readTime: "5 min"
featured: true
tags: ["Web Components", "Content Management", "User Experience", "Design Patterns"]
ogImage:
  component: BlogPost
  props:
    title: "Test blog article 5"
    description: "CTAs, background patterns, and more for better web experiences"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Enhancing Content with Advanced Components"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 1800
    timeRequired: "PT5M"
---

# Enhancing Content with Advanced Components

Modern web experiences go beyond static text and images. In this article, we explore our suite of content components—focusing on CTAs and background patterns—to create engaging and effective web pages.

## ContentCta: Strategic Conversion Elements

Our CTA component provides contextual calls-to-action to guide users through your content.

### Technical Consultation CTA

::cta{background="circuit"}
---
title: "Need AI Automation Implementation?"
body: "Our team specializes in business process automation with measurable ROI. Get a free consultation to discover automation opportunities in your workflow."
cta:
  title: "Schedule Consultation"
  link: "/contact"
imageUrl: "favicon-96x96.png"
---
::

### Developer Community CTA

::cta{background="gradient"}
---
title: "Join Our Developer Community"
body: "Connect with AI-native developers, access exclusive resources, and stay ahead of automation trends. Open source contributors welcome."
cta:
  title: "Join Discord"
  link: "https://discord.gg/incubrain"
imageUrl: "favicon-96x96.png"
---
::

## Background Pattern Showcase

Background patterns add visual interest and hierarchy without overwhelming the main message.

### Circuit Pattern Intensity Variations

::cta{background="circuit" backgroundIntensity="light"}
---
title: "Light Circuit Pattern"
body: "Subtle background pattern for minimal distraction while maintaining visual interest."
cta:
  title: "Light Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="medium"}
---
title: "Medium Circuit Pattern"
body: "Balanced background pattern providing good visual separation without overwhelming content."
cta:
  title: "Medium Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="strong"}
---
title: "Strong Circuit Pattern"
body: "Bold background pattern for maximum visual impact and attention-grabbing CTAs."
cta:
  title: "Strong Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

## Performance Optimization

To ensure our components perform well, we use:

- **Lazy loading**: Media loads only when needed.
- **Responsive design**: Adapts to various screen sizes.
- **Modern formats**: WebP images with fallbacks.
- **Preloading**: Critical resources load faster.

## Real-World Applications

These components shine in:

- **Documentation Systems**: Enhancing technical docs with clear CTAs.
- **Marketing Integration**: Boosting engagement with strategic CTAs.
- **Educational Content**: Supporting learning with visual patterns.

## Conclusion

Advanced components like CTAs and background patterns elevate web experiences, improving aesthetics and guiding users to desired actions for better engagement and conversions.
</file>

<file path="content/blog/blog-examples/test-article-6.md">
---
title: "Test blog article 6"
description: "Discover how our suite of content components, including CTAs and background patterns, can elevate your web experiences."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "component-enhancement-hero.jpg"
readTime: "5 min"
featured: true
tags: ["Web Components", "Content Management", "User Experience", "Design Patterns"]
ogImage:
  component: BlogPost
  props:
    title: "Test blog article 6"
    description: "CTAs, background patterns, and more for better web experiences"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Enhancing Content with Advanced Components"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 1800
    timeRequired: "PT5M"
---

# Enhancing Content with Advanced Components

Modern web experiences go beyond static text and images. In this article, we explore our suite of content components—focusing on CTAs and background patterns—to create engaging and effective web pages.

## ContentCta: Strategic Conversion Elements

Our CTA component provides contextual calls-to-action to guide users through your content.

### Technical Consultation CTA

::cta{background="circuit"}
---
title: "Need AI Automation Implementation?"
body: "Our team specializes in business process automation with measurable ROI. Get a free consultation to discover automation opportunities in your workflow."
cta:
  title: "Schedule Consultation"
  link: "/contact"
imageUrl: "favicon-96x96.png"
---
::

### Developer Community CTA

::cta{background="gradient"}
---
title: "Join Our Developer Community"
body: "Connect with AI-native developers, access exclusive resources, and stay ahead of automation trends. Open source contributors welcome."
cta:
  title: "Join Discord"
  link: "https://discord.gg/incubrain"
imageUrl: "favicon-96x96.png"
---
::

## Background Pattern Showcase

Background patterns add visual interest and hierarchy without overwhelming the main message.

### Circuit Pattern Intensity Variations

::cta{background="circuit" backgroundIntensity="light"}
---
title: "Light Circuit Pattern"
body: "Subtle background pattern for minimal distraction while maintaining visual interest."
cta:
  title: "Light Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="medium"}
---
title: "Medium Circuit Pattern"
body: "Balanced background pattern providing good visual separation without overwhelming content."
cta:
  title: "Medium Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="strong"}
---
title: "Strong Circuit Pattern"
body: "Bold background pattern for maximum visual impact and attention-grabbing CTAs."
cta:
  title: "Strong Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

## Performance Optimization

To ensure our components perform well, we use:

- **Lazy loading**: Media loads only when needed.
- **Responsive design**: Adapts to various screen sizes.
- **Modern formats**: WebP images with fallbacks.
- **Preloading**: Critical resources load faster.

## Real-World Applications

These components shine in:

- **Documentation Systems**: Enhancing technical docs with clear CTAs.
- **Marketing Integration**: Boosting engagement with strategic CTAs.
- **Educational Content**: Supporting learning with visual patterns.

## Conclusion

Advanced components like CTAs and background patterns elevate web experiences, improving aesthetics and guiding users to desired actions for better engagement and conversions.
</file>

<file path="content/blog/blog-examples/test-article-7.md">
---
title: "Test blog article 7"
description: "Discover how our suite of content components, including CTAs and background patterns, can elevate your web experiences."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "component-enhancement-hero.jpg"
readTime: "5 min"
featured: true
tags: ["Web Components", "Content Management", "User Experience", "Design Patterns"]
ogImage:
  component: BlogPost
  props:
    title: "Test blog article 7"
    description: "CTAs, background patterns, and more for better web experiences"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Enhancing Content with Advanced Components"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 1800
    timeRequired: "PT5M"
---

# Enhancing Content with Advanced Components

Modern web experiences go beyond static text and images. In this article, we explore our suite of content components—focusing on CTAs and background patterns—to create engaging and effective web pages.

## ContentCta: Strategic Conversion Elements

Our CTA component provides contextual calls-to-action to guide users through your content.

### Technical Consultation CTA

::cta{background="circuit"}
---
title: "Need AI Automation Implementation?"
body: "Our team specializes in business process automation with measurable ROI. Get a free consultation to discover automation opportunities in your workflow."
cta:
  title: "Schedule Consultation"
  link: "/contact"
imageUrl: "favicon-96x96.png"
---
::

### Developer Community CTA

::cta{background="gradient"}
---
title: "Join Our Developer Community"
body: "Connect with AI-native developers, access exclusive resources, and stay ahead of automation trends. Open source contributors welcome."
cta:
  title: "Join Discord"
  link: "https://discord.gg/incubrain"
imageUrl: "favicon-96x96.png"
---
::

## Background Pattern Showcase

Background patterns add visual interest and hierarchy without overwhelming the main message.

### Circuit Pattern Intensity Variations

::cta{background="circuit" backgroundIntensity="light"}
---
title: "Light Circuit Pattern"
body: "Subtle background pattern for minimal distraction while maintaining visual interest."
cta:
  title: "Light Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="medium"}
---
title: "Medium Circuit Pattern"
body: "Balanced background pattern providing good visual separation without overwhelming content."
cta:
  title: "Medium Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="strong"}
---
title: "Strong Circuit Pattern"
body: "Bold background pattern for maximum visual impact and attention-grabbing CTAs."
cta:
  title: "Strong Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

## Performance Optimization

To ensure our components perform well, we use:

- **Lazy loading**: Media loads only when needed.
- **Responsive design**: Adapts to various screen sizes.
- **Modern formats**: WebP images with fallbacks.
- **Preloading**: Critical resources load faster.

## Real-World Applications

These components shine in:

- **Documentation Systems**: Enhancing technical docs with clear CTAs.
- **Marketing Integration**: Boosting engagement with strategic CTAs.
- **Educational Content**: Supporting learning with visual patterns.

## Conclusion

Advanced components like CTAs and background patterns elevate web experiences, improving aesthetics and guiding users to desired actions for better engagement and conversions.
</file>

<file path="content/blog/blog-examples/test-article-8.md">
---
title: "Test blog article 8"
description: "Discover how our suite of content components, including CTAs and background patterns, can elevate your web experiences."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "component-enhancement-hero.jpg"
readTime: "5 min"
featured: true
tags: ["Web Components", "Content Management", "User Experience", "Design Patterns"]
ogImage:
  component: BlogPost
  props:
    title: "Test blog article 8"
    description: "CTAs, background patterns, and more for better web experiences"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Enhancing Content with Advanced Components"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 1800
    timeRequired: "PT5M"
---

# Enhancing Content with Advanced Components

Modern web experiences go beyond static text and images. In this article, we explore our suite of content components—focusing on CTAs and background patterns—to create engaging and effective web pages.

## ContentCta: Strategic Conversion Elements

Our CTA component provides contextual calls-to-action to guide users through your content.

### Technical Consultation CTA

::cta{background="circuit"}
---
title: "Need AI Automation Implementation?"
body: "Our team specializes in business process automation with measurable ROI. Get a free consultation to discover automation opportunities in your workflow."
cta:
  title: "Schedule Consultation"
  link: "/contact"
imageUrl: "favicon-96x96.png"
---
::

### Developer Community CTA

::cta{background="gradient"}
---
title: "Join Our Developer Community"
body: "Connect with AI-native developers, access exclusive resources, and stay ahead of automation trends. Open source contributors welcome."
cta:
  title: "Join Discord"
  link: "https://discord.gg/incubrain"
imageUrl: "favicon-96x96.png"
---
::

## Background Pattern Showcase

Background patterns add visual interest and hierarchy without overwhelming the main message.

### Circuit Pattern Intensity Variations

::cta{background="circuit" backgroundIntensity="light"}
---
title: "Light Circuit Pattern"
body: "Subtle background pattern for minimal distraction while maintaining visual interest."
cta:
  title: "Light Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="medium"}
---
title: "Medium Circuit Pattern"
body: "Balanced background pattern providing good visual separation without overwhelming content."
cta:
  title: "Medium Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="strong"}
---
title: "Strong Circuit Pattern"
body: "Bold background pattern for maximum visual impact and attention-grabbing CTAs."
cta:
  title: "Strong Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

## Performance Optimization

To ensure our components perform well, we use:

- **Lazy loading**: Media loads only when needed.
- **Responsive design**: Adapts to various screen sizes.
- **Modern formats**: WebP images with fallbacks.
- **Preloading**: Critical resources load faster.

## Real-World Applications

These components shine in:

- **Documentation Systems**: Enhancing technical docs with clear CTAs.
- **Marketing Integration**: Boosting engagement with strategic CTAs.
- **Educational Content**: Supporting learning with visual patterns.

## Conclusion

Advanced components like CTAs and background patterns elevate web experiences, improving aesthetics and guiding users to desired actions for better engagement and conversions.
</file>

<file path="content/blog/blog-examples/test-article-9.md">
---
title: "Test blog article 9"
description: "Discover how our suite of content components, including CTAs and background patterns, can elevate your web experiences."
date: "2025-07-15"
category: "tech-breakthroughs"
author: "Incubrain Team"
image: "component-enhancement-hero.jpg"
readTime: "5 min"
featured: true
tags: ["Web Components", "Content Management", "User Experience", "Design Patterns"]
ogImage:
  component: BlogPost
  props:
    title: "Test blog article 9"
    description: "CTAs, background patterns, and more for better web experiences"
    category: "Tech Breakthroughs"
sitemap:
  lastmod: "2025-07-15"
  changefreq: "monthly"
  priority: 0.8
robots: "index, follow"
schemaOrg:
  - "@type": "BlogPosting"
    headline: "Enhancing Content with Advanced Components"
    author:
      "@type": "Organization"
      name: "Incubrain Team"
    datePublished: "2025-07-15"
    wordCount: 1800
    timeRequired: "PT5M"
---

# Enhancing Content with Advanced Components

Modern web experiences go beyond static text and images. In this article, we explore our suite of content components—focusing on CTAs and background patterns—to create engaging and effective web pages.

## ContentCta: Strategic Conversion Elements

Our CTA component provides contextual calls-to-action to guide users through your content.

### Technical Consultation CTA

::cta{background="circuit"}
---
title: "Need AI Automation Implementation?"
body: "Our team specializes in business process automation with measurable ROI. Get a free consultation to discover automation opportunities in your workflow."
cta:
  title: "Schedule Consultation"
  link: "/contact"
imageUrl: "favicon-96x96.png"
---
::

### Developer Community CTA

::cta{background="gradient"}
---
title: "Join Our Developer Community"
body: "Connect with AI-native developers, access exclusive resources, and stay ahead of automation trends. Open source contributors welcome."
cta:
  title: "Join Discord"
  link: "https://discord.gg/incubrain"
imageUrl: "favicon-96x96.png"
---
::

## Background Pattern Showcase

Background patterns add visual interest and hierarchy without overwhelming the main message.

### Circuit Pattern Intensity Variations

::cta{background="circuit" backgroundIntensity="light"}
---
title: "Light Circuit Pattern"
body: "Subtle background pattern for minimal distraction while maintaining visual interest."
cta:
  title: "Light Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="medium"}
---
title: "Medium Circuit Pattern"
body: "Balanced background pattern providing good visual separation without overwhelming content."
cta:
  title: "Medium Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

::cta{background="circuit" backgroundIntensity="strong"}
---
title: "Strong Circuit Pattern"
body: "Bold background pattern for maximum visual impact and attention-grabbing CTAs."
cta:
  title: "Strong Intensity"
  link: "/blog"
imageUrl: "favicon-96x96.png"
---
::

## Performance Optimization

To ensure our components perform well, we use:

- **Lazy loading**: Media loads only when needed.
- **Responsive design**: Adapts to various screen sizes.
- **Modern formats**: WebP images with fallbacks.
- **Preloading**: Critical resources load faster.

## Real-World Applications

These components shine in:

- **Documentation Systems**: Enhancing technical docs with clear CTAs.
- **Marketing Integration**: Boosting engagement with strategic CTAs.
- **Educational Content**: Supporting learning with visual patterns.

## Conclusion

Advanced components like CTAs and background patterns elevate web experiences, improving aesthetics and guiding users to desired actions for better engagement and conversions.
</file>

<file path="content/config/business.yml">
# Core Business Identity
data:
  business:
    name: IncuBrain Ltd
    tagline: AI-Native Development Team
    description: We build AI automation that pays for itself
    legal_name: IncuBrain Technologies Limited
    
    # Authority Building
    founder:
      name: Drew MacGibbon
      title: AI Automation Expert
      bio: 13 years business building, 6 years SaaS development
      credentials:
        - AWS Certified
        - Space Tech Veteran
      
    # Geographic Authority
    location:
      city: Pune
      state: Maharashtra
      country: India
      timezone: Asia/Kolkata

  # Contact Information
  contact:
    email: hello@incubrain.org
    phone: +91-123-456-7890
    business_hours: 9 AM - 6 PM IST, Mon-Fri
    
    # Full URLs for schema.org integration
    social:
      github: https://github.com/incubrain
      linkedin: https://www.linkedin.com/company/incubrain
      twitter: https://twitter.com/incubrain
      discord: https://discord.gg/zSGHvNZXAa

  # Service Authority
  services:
    categories:
      - AI Automation
      - Custom Development
      - Business Consultation
    specialties:
      - Process Automation
      - Space Tech Integration
      - Global-Local Execution
</file>

<file path="content/faq/general.yaml">
# content/faq/general.yaml
faqs:
  - question: "How quickly can you deliver results?"
    answer: "Most automation projects show measurable results within 2-4 weeks. Emergency fixes can be deployed within 24-48 hours."
    keywords: ["timeline", "delivery", "speed"]
    priority: 1
    
  - question: "What's your pricing structure?"
    answer: "I offer fixed-price project quotes after a free consultation. No hourly billing surprises. Emergency support is available 24/7."
    keywords: ["pricing", "cost", "budget"]
    priority: 2
    
  - question: "Do you work with small businesses?"
    answer: "Yes! Some of my best ROI stories come from small businesses. If you're spending more than 10 hours/week on manual tasks, we should talk."
    keywords: ["small business", "startup", "size"]
    priority: 3
    
  - question: "What technologies do you use?"
    answer: "Modern, reliable stack: Node.js, TypeScript, Python for automation. PostgreSQL, Redis for data. AWS/Railway for hosting. Whatever works best for your specific needs."
    keywords: ["technology", "stack", "tools"]
    priority: 4
    
  - question: "Can you integrate with our existing systems?"
    answer: "Absolutely. I specialize in connecting disparate systems through APIs, webhooks, and custom integrations. Your current tools don't have to change."
    keywords: ["integration", "existing systems", "compatibility"]
    priority: 5
</file>

<file path="content/faq/product.yaml">
faqs:
  - question: What makes this different from other templates?
    answer: Our template is intent-driven, meaning your business goals define the technical architecture. It's also AI-agent ready with built-in search capabilities.
  
  - question: Does it include a blog system?
    answer: Yes, a complete blog system with categories, pagination, search, and SEO optimization is included out of the box.
  
  - question: Are analytics included?
    answer: The template is structured for easy analytics integration, with conversion tracking points built into the architecture.
  
  - question: Can I add e-commerce functionality?
    answer: While the current template focuses on authority building, the architecture is designed to extend to SaaS and e-commerce variants in future releases.
  
  - question: What about SEO optimization?
    answer: Full SEO automation is included with meta tags, Schema.org structured data, and OG image generation based on your business configuration.
</file>

<file path="content/pages/index.md">
---
title: "Drew MacGibbon • Nuxt Template Creator & AI Automation Expert"
subtitle: "Building displacement-proof businesses with <strong>AI automation</strong> and <strong>lightning-fast Nuxt templates</strong>"
description: "6 years SaaS development. Creator of Nuxt Launch Kit template. Stop losing money to manual processes - get AI automation that pays for itself."
keywords: ["Nuxt templates", "AI automation", "SaaS development", "business automation", "Nuxt Launch Kit"]
---

::section-hero{variant="showcase" cardLayout="grid" alignment="center"}
---
title: "Built in 24 Hours with Nuxt Launch Kit"
subtitle: "The same template powering this site is <strong>yours to download</strong>"
description: "I'm Drew MacGibbon - SaaS developer, template creator, and AI automation expert. This personal brand site was built in one day using my own Nuxt Launch Kit template."
cards:
  - title: "Template Creator"
    description: "6 years building SaaS products and Nuxt templates"
    icon: "i-lucide-code"
    iconColor: "primary"
  - title: "Standards-Driven"
    description: "Opinionated architecture for maximum velocity"
    icon: "i-lucide-zap"
    iconColor: "blue"  
  - title: "Batteries Included"
    description: "SEO, analytics, components - everything ready"
    icon: "i-lucide-rocket"
    iconColor: "amber"
showCta: true
ctaText: "Get the Template"
ctaLink: "#template-download"
ctaDescription: "Free download • Full documentation • Deploy in 24 hours"
backgroundPreset: "circuit"
backgroundPattern: "circuit"
enableBackgroundMotion: true
---
::

::layout-wrapper{spacing="standard"}
:::section-trust
---
title: "Real Results from Real Projects"
subtitle: "Template showcase meets actual business outcomes"
testimonials:
  - quote: "Drew's automation saved us 40 hours weekly. The template approach means we can scale our brand presence without the usual development overhead."
    author: "Sarah Chen"
    title: "CTO"
    company: "DevScale Solutions"
    avatar: "https://picsum.photos/100/100?random=1"
  - quote: "Nuxt Launch Kit got our personal brand live in one day. The opinionated structure eliminated decision fatigue completely."
    author: "Marcus Rodriguez" 
    title: "Founder"
    company: "TechFlow Agency"
    avatar: "https://picsum.photos/100/100?random=2"
---
:::

:::section-authority
---
title: "Why I Built Nuxt Launch Kit"
subtitle: "From developer frustration to template solution"
skills:
  - title: "Velocity-Obsessed Development"
    description: "6 years building SaaS products taught me speed trumps perfection. Templates eliminate decision fatigue."
    icon: "i-lucide-timer"
  - title: "Standards-Driven Architecture"
    description: "Opinionated choices in routing, components, and content management. No bikeshedding, maximum productivity."
    icon: "i-lucide-settings"
  - title: "AI Automation Integration"
    description: "Built-in patterns for AI-powered features. Your personal brand site becomes your business automation showcase."
    icon: "i-lucide-bot"
---
:::

:::section-results
---
title: "Template Performance Metrics"
subtitle: "Real numbers from real implementations"
stats:
  - value: "24hrs"
    title: "Deploy Time"
    description: "From git clone to live site"
  - value: "90%"
    title: "Dev Time Saved"
    description: "Vs custom builds"
  - value: "100%"
    title: "SEO Ready"
    description: "Built-in optimization"
  - value: "Open"
    title: "Source"
    description: "MIT licensed"
---
:::

:::section-work
---
title: "Template in Action"
subtitle: "See Nuxt Launch Kit powering real personal brands"
---
:::

:::section-about
---
title: "From SaaS Builder to Template Creator"
story: "<p>After 6 years building SaaS products, I got tired of recreating the same personal brand architectures. Every project needed the same foundation: <strong>content management, SEO optimization, performance tuning</strong>.</p><p>So I built Nuxt Launch Kit - an opinionated template that handles all the boring decisions. Now I focus on what matters: <strong>building businesses and helping others do the same</strong>.</p><p>This site was built in 24 hours using the template. The same template you can download below.</p>"
image: "https://picsum.photos/800/800?random=10"
stats:
  - value: "6yrs"
    label: "SaaS Dev"
  - value: "50+"
    label: "Projects"
  - value: "1 Day"
    label: "Deploy Time"
  - value: "MIT"
    label: "License"
---
:::

:::section-cta
---
title: "Get Nuxt Launch Kit + Professional Services"
subtitle: "Free template download or full customization services"
cards:
  - title: "Download Template"
    subtitle: "Free • Open source • Full documentation"
    ctaText: "Get Template"
    ctaLink: "https://github.com/incubrain/nuxt-launch-kit"
  - title: "Custom Implementation"
    subtitle: "Template setup + content migration + deployment"
    ctaText: "Get Quote ($1,000+)"
    ctaLink: "https://wa.me/1234567890?text=Hi! I want custom Nuxt Launch Kit implementation."
---
:::

:::section-faq
---
title: "Template Questions"
description: "Everything about Nuxt Launch Kit and customization services"
categories: ["general"]
---
:::
::
</file>

<file path="content/seo/schemas/organization.yml">
# content/schemas/organization.yml
schema:
  schemaType: organization
  data:
    "@type": "Organization"
    name: "Incubrain Ltd"
    legalName: "Incubrain Ltd"
    description: "AI automation specialists with space tech expertise and global-local execution"
    url: "https://incubrain.org"
    logo: "https://incubrain.org/logo.png"
    image: "https://incubrain.org/logo.png"
    
    contactPoint:
      "@type": "ContactPoint"
      contactType: "customer service"
      telephone: "+64123456789"
      email: "hello@incubrain.org"
      availableLanguage: "English"
      areaServed: "Worldwide"
    
    address:
      "@type": "PostalAddress"
      addressLocality: "Pune"
      addressRegion: "Maharashtra"
      addressCountry: "IN"
    
    sameAs:
      - "https://linkedin.com/company/incubrain"
      - "https://github.com/incubrain" 
      - "https://twitter.com/incubrain"
      - "https://discord.gg/incubrain"
    
    foundingDate: "2023"
    numberOfEmployees: "2-10"
</file>

<file path="content/seo/schemas/person.yml">
# content/schemas/person.yml
schema:
  schemaType: person
  data:
    "@type": "Person"
    name: "Drew MacGibbon"
    givenName: "Drew"
    familyName: "MacGibbon"
    jobTitle: "CEO & Co-Founder"
    description: "AI automation expert with 13 years of business building experience and 6 years in SaaS development. Leading the development of displacement-proof AI solutions."
    
    email: "drew@incubrain.org"
    telephone: "+64123456789"
    
    worksFor:
      "@type": "Organization"
      name: "Incubrain Ltd"
    
    hasOccupation:
      "@type": "Occupation"
      name: "CEO & Founder"
      occupationalCategory: "AI Automation Specialist"
      skills:
        - "AI Development"
        - "Business Automation"
        - "Space Technology"
        - "SaaS Development"
    
    sameAs:
      - "https://linkedin.com/in/drewmacgibbon"
      - "https://github.com/drewmacgibbon"
      - "https://twitter.com/drewmacgibbon"
    
    homeLocation:
      "@type": "Place"
      address:
        "@type": "PostalAddress"
        addressLocality: "Pune"
        addressRegion: "Maharashtra"
        addressCountry: "IN"
</file>

<file path="content/seo/schemas/services.yml">
schema:
  schemaType: service
  data:
    - "@type": "Service"
      name: "AI Business Process Automation"
      description: "Custom AI automation solutions for business processes with measurable ROI"
      provider:
        "@type": "Organization"
        name: "Incubrain Ltd"
      serviceType: "AI Automation"
      areaServed: "Worldwide"
      
      offers:
        "@type": "Offer"
        name: "AI Automation Consultation"
        description: "Free consultation to discover automation opportunities"
        price: "0"
        priceCurrency: "USD"
        availability: "https://schema.org/InStock"
        validFrom: "2025-01-01"
        businessFunction: "http://purl.org/goodrelations/v1#Sell"
        
    - "@type": "Service" 
      name: "Space Technology Platform Development"
      description: "Specialized platform development for space technology companies including satellite data platforms and astronomy research tools"
      provider:
        "@type": "Organization"
        name: "Incubrain Ltd"
      serviceType: "Space Technology Development"
</file>

<file path="content/seo/config.yml">
# content/seo/config.yml
# ====================================
# META DEFAULTS
# ====================================
meta:
  siteName: "Incubrain"
  titleTemplate: "%s | Incubrain - AI Automation Specialists"
  separator: "•"
  
  ogSiteName: "Incubrain"
  twitterSite: "@incubrain"
  twitterCreator: "@drewmacgibbon"
  
  defaultOgImage: "/images/og-default.jpg"
  logoImage: "/logo.png"
  
  contactInfo:
    email: "hello@incubrain.org"
    phone: "+64123456789"
    whatsapp: "+64123456789"

# ====================================
# DEFAULTS
# ====================================
defaults:
  schemas:
    - organization
    - webpage:
        name: "page.title || organization.name"
        description: "page.description || organization.description"
  ogImage:
    component: "PageOgImage"
    variant: "default"
  meta:
    titleSuffix: ""

# ====================================
# PAGE CONFIGURATIONS
# ====================================
pages:
  "/":
    schemas:
      - organization
      - person
      - service
      - website:
          name: "organization.name"
          url: "organization.url"
          potentialAction:
            "@type": "SearchAction"
            target: "{organization.url}/search?q={search_term_string}"
            query-input: "required name=search_term_string"
    ogImage:
      component: "LandingOgImage"
    meta:
      titleSuffix: "AI Automation Specialists"
      
  "/landing":
    schemas:
      - organization
      - person
      - service
      - website:
          name: "organization.name"
          url: "organization.url"
          potentialAction:
            "@type": "SearchAction"
            target: "{organization.url}/search?q={search_term_string}"
            query-input: "required name=search_term_string"
    ogImage:
      component: "LandingOgImage"
    meta:
      titleSuffix: "AI Automation Specialists"
      
  "/about":
    schemas:
      - organization
      - person
      - aboutPage:
          about: "person"
    ogImage:
      component: "AboutOgImage"
    meta:
      titleSuffix: "About Us"
      
  "/contact":
    schemas:
      - organization
      - contactPage:
          mainEntity: "organization.contactPoint"
    ogImage:
      component: "ContactOgImage"
    meta:
      titleSuffix: "Get In Touch"
      
  "/community":
    schemas:
      - organization
      - webpage:
          name: "page.title || organization.name"
          description: "page.description || organization.description"
    ogImage:
      component: "CommunityOgImage"
    meta:
      titleSuffix: "Join Our Community"

# ====================================
# CONTENT TYPE CONFIGURATIONS
# ====================================
contentTypes:
  blog:
    schemas:
      - organization
      - person
      - blogPost:
          headline: "page.title"
          description: "page.description"
          datePublished: "page.date"
          dateModified: "page.date"
          articleSection: "getCategoryName(page.category)"
          keywords: "page.tags?.join(', ')"
          wordCount: "estimateWordCount(page)"
          image: "page.image ? `{organization.url}/images/blog/{page.category}/{page.image}` : undefined"
          url: "{organization.url}{page.path}"
          author: "person"
          publisher: "organization"
          mainEntityOfPage:
            "@type": "WebPage"
            "@id": "{organization.url}{page.path}"
    ogImage:
      component: "BlogOgImage"
      categoryMapping:
        ai-automation: "TechOgImage"
        business-automation: "BusinessOgImage"
        space-tech: "SpaceOgImage"
        future-ai: "FutureOgImage"
        company-culture: "CultureOgImage"
        default: "BlogOgImage"
    meta:
      titleSuffix: "Incubrain Blog"
</file>

<file path="server/api/__sitemap__/urls.ts">
// server/api/__sitemap__/urls.ts
import type { SitemapUrlInput } from '#sitemap/types'
import { queryCollection } from '#imports'

type URLPriority = 0 | 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6 | 0.7 | 0.8 | 0.9 | 1 | undefined

export default defineSitemapEventHandler(async (event) => {
  // Get all blog posts with sitemap data
  const posts = await queryCollection(event, 'blog')
    .select('path', 'title', 'date', 'sitemap')
    .all()

  const blogUrls: SitemapUrlInput[] = posts.map((post) => ({
    loc: post.path,
    lastmod: post.sitemap?.lastmod || post.date,
    changefreq: post.sitemap?.changefreq || 'monthly',
    priority: (post.sitemap?.priority ?? 0.7) as URLPriority,
  }))

  // Add static pages
  const staticUrls: SitemapUrlInput[] = [
    {
      loc: '/',
      lastmod: new Date().toISOString(),
      changefreq: 'weekly',
      priority: 1.0,
    },
    {
      loc: '/blog',
      lastmod: new Date().toISOString(),
      changefreq: 'daily',
      priority: 0.9,
    },
  ]

  return [...staticUrls, ...blogUrls]
})
</file>

<file path="server/api/blog/metadata.ts">
// server/api/blog/metadata.get.ts
export default defineEventHandler(async (event) => {
  try {
    const posts = await queryCollection(event, 'blog').select('stem', 'category', 'featured').all()

    const categories: Record<string, number> = {}
    let totalPosts = 0
    let featuredCount = 0

    if (posts && Array.isArray(posts)) {
      posts.forEach((post) => {
        // ENHANCED: Use multiple extraction methods
        let category = post.category

        // Method 1: Extract from stem pattern /blog/category/post-name
        if (!category && post.stem) {
          const pathSegments = post.stem.split('/').filter(Boolean)
          if (pathSegments.length >= 3 && pathSegments[0] === 'blog') {
            category = pathSegments[1] // ai-automation, case-studies, etc.
          }
        }

        // Method 2: Validate against known categories
        const validCategory = Object.keys(CATEGORY_NAMES).includes(category)
          ? category
          : 'uncategorized'

        categories[validCategory] = (categories[validCategory] || 0) + 1
        totalPosts++
        if (post.featured) featuredCount++
      })
    }

    return {
      categories,
      totalPosts,
      featuredCount,
      lastUpdated: new Date().toISOString(),
    }
  } catch (error: any) {
    console.error('Metadata API error:', error)
    return {
      categories: {},
      totalPosts: 0,
      featuredCount: 0,
      lastUpdated: new Date().toISOString(),
      error: error.message,
    }
  }
})
</file>

<file path="server/api/content/metadata.ts">
// server/api/content/metadata.ts
interface ContentMetadataResponse {
  items: Array<{
    stem?: string
    category?: string
    featured?: boolean
    title?: string
    path?: string
    date?: string
    description?: string
  }>
  pagination: {
    totalItems: number
  }
  categories: Record<string, number>
  collection: string
  category: string
  lastUpdated: string
}

export default defineEventHandler(async (event): Promise<ContentMetadataResponse> => {
  const query = getQuery(event)
  const collection = query.collection as string
  const category = query.category as string
  
  if (!collection) {
    throw createError({
      statusCode: 400,
      statusMessage: 'Collection parameter is required'
    })
  }

  try {
    let baseQuery = queryCollection(event, collection as any)
      .select('stem', 'category', 'featured', 'title', 'path', 'date', 'description')
      .order('date', 'DESC')

    // Filter by category if provided and not 'all'
    if (category && category !== 'all') {
      baseQuery = baseQuery.where('category', '=', category)
    }

    const items = await baseQuery.all()
    
    // Category counts (for all items)
    const allItemsForCounts = await queryCollection(event, collection as any)
      .select('category')
      .all()
    
    const categories: Record<string, number> = { all: allItemsForCounts.length }
    allItemsForCounts.forEach((item) => {
      const cat = item.category || 'uncategorized'
      categories[cat] = (categories[cat] || 0) + 1
    })

    return {
      items,
      pagination: {
        totalItems: items.length,
      },
      categories,
      collection,
      category: category || 'all',
      lastUpdated: new Date().toISOString(),
    }
  } catch (error: any) {
    throw createError({
      statusCode: 500,
      statusMessage: `Failed to fetch ${collection} metadata: ${error.message}`
    })
  }
})
</file>

<file path="shared/types/website-intent.ts">
// Universal purpose mapping - template constant
</file>

<file path="shared/utils/blog.ts">
// shared/utils/blog.ts
export const CATEGORY_NAMES = {
  'blog-examples': 'Blog Examples',
  'documentation': 'Template Documentation',
} as const

export const CATEGORY_DESCRIPTIONS = {
  'blog-examples': 'In-depth examples of our blog posts and content strategies',
  'documentation': 'Comprehensive guides and documentation for using our template',
} as const

export const getCategoryName = (category: string | null | undefined): string => {
  if (!category) return 'Uncategorized'
  return (
    CATEGORY_NAMES[category as keyof typeof CATEGORY_NAMES] ||
    category.replace('-', ' ').replace(/\b\w/g, (l) => l.toUpperCase())
  )
}

export const getCategoryDescription = (category: string | null | undefined): string => {
  if (!category) return 'Latest posts and updates'
  return (
    CATEGORY_DESCRIPTIONS[category as keyof typeof CATEGORY_DESCRIPTIONS] ||
    `Latest posts in ${getCategoryName(category).toLowerCase()}`
  )
}

export const BLOG_CONFIG = {
  POSTS_PER_PAGE: 12,
  FEATURED_POSTS_COUNT: 1,
  SEARCH_RESULTS_LIMIT: 8,
} as const

// Updated: More flexible generic function
export function groupByCategory<T extends Record<string, any>>(
  items: T[] | null | undefined,
): Record<string, T[]> {
  if (!items) return {}

  return items.reduce((grouped: Record<string, T[]>, item) => {
    // Use 'category' property if it exists, otherwise 'uncategorized'
    const category = (item.category as string) || 'uncategorized'
    if (!grouped[category]) {
      grouped[category] = []
    }
    grouped[category].push(item)
    return grouped
  }, {})
}
</file>

<file path="shared/utils/load-config.ts">
import { readFileSync } from 'node:fs'
import { resolve } from 'node:path'
import { parse } from 'yaml'

// Type definitions for our configs
export interface BusinessConfig {
  business: {
    name: string
    tagline: string
    description: string
    legal_name: string
    founder: {
      name: string
      title: string
      bio: string
      credentials: string[]
    }
    location: {
      city: string
      state: string
      country: string
      timezone: string
    }
  }
  contact: {
    email: string
    phone: string
    business_hours: string
    social: {
      github: string
      linkedin: string
      twitter: string
      discord: string
    }
  }
  services: {
    categories: string[]
    specialties: string[]
  }
}

// Cache for loaded configs
const configCache = new Map<string, any>()

/**
 * Load configuration from YAML files in content/config/
 * @param configName - Name of config file (without .yaml extension)
 * @returns Parsed configuration object
 */
export function loadConfig<T = any>(configName: string): T {
  // Check cache first
  if (configCache.has(configName)) {
    return configCache.get(configName)
  }

  try {
    // Resolve path relative to project root
    const configPath = resolve(process.cwd(), `content/config/${configName}.yml`)
    
    // Read and parse YAML
    const yamlContent = readFileSync(configPath, 'utf8')
    const config = parse(yamlContent)
    
    // Cache the result
    configCache.set(configName, config.data)
    
    return config.data as T
  } catch (error) {
    console.error(`Failed to load config: ${configName}`, error)
    throw new Error(`Configuration file not found: content/config/${configName}.yml`)
  }
}

// Typed convenience functions
export const loadBusinessConfig = (): BusinessConfig => loadConfig<BusinessConfig>('business')

// Future config loaders
// export const loadSeoConfig = () => loadConfig('seo')
// export const loadIntegrationsConfig = () => loadConfig('integrations')
</file>

<file path="shared/utils/page-search.ts">
import { kebabCase } from 'lodash-es'

export function findComponentData(body: any, componentName: string): any {
  let found = null

  function deepSearch(obj: any): void {
    if (Array.isArray(obj)) {
      obj.forEach((item) => {
        if (Array.isArray(item) && item[0] === 'dynamic-section') {
          const props = item[1]
          if (props?.component === componentName) {
            found = item
            return
          }
        }
        deepSearch(item)
      })
    } else if (typeof obj === 'object' && obj !== null) {
      Object.values(obj).forEach(deepSearch)
    }
  }

  deepSearch(body.value)
  return found
}

export function extractComponentProps(component: any): Record<string, any> {
  if (!Array.isArray(component) || component.length < 2) return {}

  // Structure: ['dynamic-section', { component: 'Name', title: 'X', intent: 'Y' }, yamlContent]
  const inlineProps = component[1] || {}
  const yamlContent = component[2] || {}

  return {
    // Inline props (component, title, subtitle, intent)
    ...inlineProps,
    // YAML content prop
    content: yamlContent,
  }
}

export function extractMDCComponents(body: any): string[] {
  if (!body?.value) return []

  const components: string[] = []

  function deepSearch(obj: any, path = ''): void {
    if (Array.isArray(obj)) {
      obj.forEach((item, index) => {
        if (Array.isArray(item)) {
          // Check for both dynamic-section AND section-wrapper
          if (item[0] === 'dynamic-section') {
            const props = item[1]
            if (props?.component) {
              console.log(`🔍 Found dynamic-section at ${path}[${index}]:`, props.component)
              components.push(props.component)
            }
          } else if (item[0] === 'section-wrapper') {
            console.log(`🔍 Found section-wrapper at ${path}[${index}], searching deeper...`)
            // Continue searching inside section-wrapper
            deepSearch(item, `${path}[${index}]`)
          }
        }
        // Always search recursively
        deepSearch(item, `${path}[${index}]`)
      })
    } else if (typeof obj === 'object' && obj !== null) {
      Object.keys(obj).forEach((key) => {
        deepSearch(obj[key], `${path}.${key}`)
      })
    }
  }

  console.log(`🔍 Deep searching body structure...`)
  deepSearch(body.value)
  console.log(`🔍 Total components found: ${components.length}`)
  console.log(`🔍 Components:`, components)

  return [...new Set(components)]
}

export function extractSearchFromProps(componentName: string, props: any) {
  // Extract from inline props first, then content
  const title = props.title || props.content?.title || componentName
  const subtitle = props.subtitle || props.content?.subtitle || ''

  // Extract searchable text from content payload
  const contentText = extractTextFromContent(props.content)

  const searchContent = [subtitle, contentText].filter(Boolean).join(' ').slice(0, 200)

  return {
    title,
    content: searchContent,
    sectionId: kebabCase(title),
    intent: props.intent,
    context: inferSimpleContext(componentName, searchContent, props.intent),
  }
}

function extractTextFromContent(content: any): string {
  if (!content) return ''

  // Extract common patterns from your content structure
  const texts = []

  if (content.cards) {
    content.cards.forEach((card: any) => {
      texts.push(card.title, card.description, ...(card.bullets || []))
    })
  }

  if (content.headline) {
    texts.push(content.headline.main, content.headline.accent)
  }

  if (content.badge) {
    texts.push(content.badge.text)
  }

  // Fallback: stringify and clean
  if (texts.length === 0) {
    texts.push(JSON.stringify(content).replace(/[{}":\[\]]/g, ' '))
  }

  return texts.filter(Boolean).join(' ')
}

function inferSimpleContext(componentName: string, content: string, intent?: string): string[] {
  const contexts = []

  if (componentName.includes('CTA')) contexts.push('conversion')
  if (componentName.includes('Hero')) contexts.push('value_proposition')
  if (componentName.includes('News')) contexts.push('urgency')

  if (intent) contexts.push(`intent_${intent}`)

  const text = content.toLowerCase()
  if (text.includes('automation') || text.includes('ai')) contexts.push('ai_automation')
  if (text.includes('team') || text.includes('join')) contexts.push('recruitment')

  return contexts
}
</file>

<file path="shared/utils/pagination.ts">
// shared/utils/pagination.ts
export const PAGINATION_DEFAULTS = {
  blog: 12,
  projects: 9,
  products: 16,
  team: 8,
} as const

export const CONTENT_TYPE_LABELS = {
  blog: 'posts',
  projects: 'projects', 
  products: 'products',
  team: 'members',
} as const

export type ContentType = keyof typeof CONTENT_TYPE_LABELS
</file>

<file path="shared/utils/theme.ts">
// shared/utils/theme.ts
import { tv } from 'tailwind-variants'
import type {VariantProps} from 'tailwind-variants';

export interface UIThemeConfig {
  transitions: boolean
  colors: string[]
  defaultVariants: {
    color: string
    size: string
  }
}

export const UI_THEME_CONFIG: UIThemeConfig = {
  transitions: true,
  colors: ['primary', 'secondary', 'success', 'info', 'warning', 'error'],
  defaultVariants: { color: 'primary', size: 'md' }
}

// shared/utils/theme.ts
export function withUIOverrides(baseStyles: any, ui?: any, additionalClass?: string) {
  if (!ui && !additionalClass) return baseStyles
  
  const enhanced = { ...baseStyles }
  Object.keys(baseStyles).forEach(slot => {
    enhanced[slot] = () => [
      baseStyles[slot](),
      ui?.[slot],
      slot === 'root' ? additionalClass : undefined
    ].filter(Boolean).join(' ')
  })
  
  return enhanced
}

// Process conditional classes at resolution time
function processSlots(slots: Record<string, any>, config: UIThemeConfig): Record<string, string> {
  const processed: Record<string, string> = {}
  
  for (const [key, value] of Object.entries(slots)) {
    if (Array.isArray(value)) {
      // Handle arrays with conditional logic
      processed[key] = value.filter(Boolean).join(' ')
    } else if (typeof value === 'string') {
      processed[key] = value
    }
  }
  
  return processed
}

// shared/utils/theme.ts
export function createUIComponent<T extends Record<string, any>>(
  themeDefinition: (config: UIThemeConfig) => T
) {
  const rawTheme = themeDefinition(UI_THEME_CONFIG)
  
  if (rawTheme && typeof rawTheme === 'object' && 'slots' in rawTheme) {
    rawTheme.slots = processSlots(rawTheme.slots, UI_THEME_CONFIG)
  }
  
  const tvInstance = tv(rawTheme)
  
  type SlotKeys = keyof T['slots']
  type StylesFunction = () => string
  type StylesObject = Record<SlotKeys, StylesFunction>
  
  return function(
    // Handle both patterns:
    variantsOrProps?: VariantProps<typeof tvInstance> | (VariantProps<typeof tvInstance> & { ui?: Partial<Record<SlotKeys, string>>, class?: string }),
    explicitProps?: { ui?: Partial<Record<SlotKeys, string>>, class?: string }
  ): StylesObject {
    
    // Destructure variants and UI props
    const variants: VariantProps<typeof tvInstance> = {}
    let uiProps: { ui?: Partial<Record<SlotKeys, string>>, class?: string } = {}
    
    if (variantsOrProps) {
      // Extract known variant keys from the TV instance
      const variantKeys = new Set([
        ...Object.keys(rawTheme.variants || {}),
        ...Object.keys(rawTheme.defaultVariants || {})
      ])
      
      // Separate variants from UI props
      Object.entries(variantsOrProps).forEach(([key, value]) => {
        if (variantKeys.has(key)) {
          variants[key] = value
        } else if (key === 'ui' || key === 'class') {
          uiProps[key] = value
        }
      })
    }
    
    // Merge with explicit props if provided
    if (explicitProps) {
      uiProps = { ...uiProps, ...explicitProps }
    }
    
    const baseStylesRaw = tvInstance(variants)
    const baseStyles: StylesObject = Object.keys(baseStylesRaw).reduce((acc, key) => {
      const val = baseStylesRaw[key]
      acc[key as SlotKeys] = typeof val === 'function' ? val : () => val
      return acc
    }, {} as StylesObject)
    
    if (!uiProps.ui && !uiProps.class) return baseStyles
    
    const enhanced = withUIOverrides(baseStyles, uiProps.ui, uiProps.class)
    return enhanced as StylesObject
  }
}
</file>

<file path="shared/utils/website-intention.ts">
// shared/utils/intent-analytics.ts
export const UNIVERSAL_PURPOSES = {
  primary_service: 'main_business_conversion',
  join_team: 'talent_acquisition',
  get_consultation: 'sales_consultation',
  learn_primary: 'educational_engagement',
  learn_secondary: 'content_discovery',
  contact_support: 'customer_support',
  community_join: 'community_building',
} as const

export type UniversalIntention = keyof typeof UNIVERSAL_PURPOSES
export type BusinessPurposes = (typeof UNIVERSAL_PURPOSES)[UniversalIntention]

export function trackIntentInteraction(
  intent: UniversalIntention,
  component: string,
  context: any,
) {
  const purposeData = {
    intent,
    purpose: UNIVERSAL_PURPOSES[intent],
    component,
    timestamp: Date.now(),
    context: {
      title: context.title,
      page: context.pagePath,
    },
  }

  // Simple logging for now - easy to extend
  console.log('🎯 Intent Interaction:', purposeData)

  // Return for search/AI context
  return {
    searchContext: UNIVERSAL_PURPOSES[intent],
    aiContext: `user_intent_${intent}`,
    conversionFunnel: getConversionFunnel(intent),
  }
}

function getConversionFunnel(intent: UniversalIntention): string {
  const funnels = {
    primary_service: 'awareness_to_purchase',
    join_team: 'interest_to_application',
    get_consultation: 'problem_to_solution',
    learn_primary: 'discovery_to_engagement',
  }
  return funnels[intent] || 'general_engagement'
}
</file>

<file path="shared/config.ts">
import { readFileSync } from 'fs'
import { resolve } from 'path'
import { parse } from 'yaml'

// Type definitions for our configs
export interface BusinessConfig {
  business: {
    name: string
    tagline: string
    description: string
    legal_name: string
    founder: {
      name: string
      title: string
      bio: string
      credentials: string[]
    }
    location: {
      city: string
      state: string
      country: string
      timezone: string
    }
  }
  contact: {
    email: string
    phone: string
    business_hours: string
    social: {
      github: string
      linkedin: string
      twitter: string
      discord: string
    }
  }
  services: {
    categories: string[]
    specialties: string[]
  }
}

// Cache for loaded configs
const configCache = new Map<string, any>()

/**
 * Load configuration from YAML files in content/config/
 * @param configName - Name of config file (without .yaml extension)
 * @returns Parsed configuration object
 */
export function loadConfig<T = any>(configName: string): T {
  // Check cache first
  if (configCache.has(configName)) {
    return configCache.get(configName)
  }

  try {
    // Resolve path relative to project root
    const configPath = resolve(process.cwd(), `content/config/${configName}.yaml`)
    
    // Read and parse YAML
    const yamlContent = readFileSync(configPath, 'utf8')
    const config = parse(yamlContent)
    
    // Cache the result
    configCache.set(configName, config)
    
    return config
  } catch (error) {
    console.error(`Failed to load config: ${configName}`, error)
    throw new Error(`Configuration file not found: content/config/${configName}.yaml`)
  }
}

// Typed convenience functions
export const loadBusinessConfig = (): BusinessConfig => loadConfig<BusinessConfig>('business')

// Future config loaders
// export const loadSeoConfig = () => loadConfig('seo')
// export const loadIntegrationsConfig = () => loadConfig('integrations')
</file>

<file path="theme/layout/background.ts">
// theme/background.ts - UPDATED
import { createUIComponent } from '../../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: [
      'relative',
      config.transitions && 'transition-all duration-300'
    ]
  },
  variants: {
    preset: {
      'none': { 
        root: '' // No styling when none
      },
      'subtle': {
        root: 'bg-muted/20'
      },
      'muted': {
        root: 'bg-muted'
      },
      'elevated': {
        root: 'bg-elevated'
      },
      'circuit': { 
        root: 'ai-circuit-pattern' 
      },
      'neural': { 
        root: 'neural-network-pattern' 
      },
      'quantum': {
        root: 'quantum-dots-pattern'
      },
      'cyber': {
        root: 'bg-gradient-cyber'
      }
    },
    intensity: {
      'light': {},
      'medium': {},
      'strong': {}
    },
    motion: {
      true: { root: 'animate-pulse' },
      false: {}
    }
  },
  compoundVariants: [
    // Circuit intensity variations
    { preset: 'circuit', intensity: 'light', class: { root: 'ai-circuit-light' } },
    { preset: 'circuit', intensity: 'strong', class: { root: 'ai-circuit-strong' } }
  ],
  defaultVariants: {
    preset: 'none',
    intensity: 'medium',
    motion: false
  }
}))
</file>

<file path="theme/layout/center.ts">
// theme/layout/center.ts
import { createUIComponent } from '../../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: ['w-full']
  },
  variants: {
    variant: {
      'default': { 
        root: 'max-w-4xl mx-auto px-4 sm:px-6 lg:px-8' 
      },
      'narrow': { 
        root: 'max-w-2xl mx-auto px-4 sm:px-6' 
      },
      'prose': { 
        root: 'max-w-prose mx-auto px-4 sm:px-6' 
      },
      'wide': { 
        root: 'max-w-6xl mx-auto px-4 sm:px-6 lg:px-8' 
      },
      'full': { 
        root: 'max-w-7xl mx-auto px-4 sm:px-6 lg:px-8' 
      },
      'text-only': { 
        root: 'max-w-3xl mx-auto px-4 sm:px-6 text-center' 
      },
      'no-padding': { 
        root: 'max-w-4xl mx-auto' 
      }
    }
  },
  defaultVariants: {
    variant: 'default'
  }
}))
</file>

<file path="theme/layout/cluster.ts">
// theme/layout/cluster.ts
import { createUIComponent } from '../../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: ['flex']
  },
  variants: {
    variant: {
      'default': { 
        root: 'flex-wrap gap-4 items-center justify-start' 
      },
      'centered': { 
        root: 'flex-wrap gap-4 items-center justify-center' 
      },
      'between': { 
        root: 'flex-wrap gap-4 items-center justify-between' 
      },
      'end': { 
        root: 'flex-wrap gap-4 items-center justify-end' 
      },
      'tight': { 
        root: 'flex-wrap gap-2 items-center justify-start' 
      },
      'loose': { 
        root: 'flex-wrap gap-6 items-center justify-start' 
      },
      'no-wrap': { 
        root: 'gap-4 items-center justify-start flex-nowrap' 
      },
      'vertical': { 
        root: 'flex-col gap-4 items-start justify-start' 
      },
      'inline': { 
        root: 'inline-flex gap-2 items-center justify-start' 
      }
    }
  },
  defaultVariants: {
    variant: 'default'
  }
}))
</file>

<file path="theme/layout/container.ts">
// theme/container.ts
import { createUIComponent } from '../../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: [
      'w-full',
      config.transitions && 'transition-all duration-200'
    ]
  },
  variants: {
    size: {
      'narrow': { root: 'max-w-2xl' },
      'default': { root: 'max-w-4xl' },
      'wide': { root: 'max-w-6xl' },
      'full': { root: 'max-w-none' }
    },
    align: {
      'left': { root: 'mr-auto' },
      'center': { root: 'mx-auto' },
      'right': { root: 'ml-auto' }
    }
  },
  defaultVariants: {
    size: 'default',
    align: 'center'
  }
}))
</file>

<file path="theme/layout/divider.ts">
// theme/divider.ts
import { createUIComponent } from '../../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: 'flex items-center justify-center',
    line: 'border-default'
  },
  variants: {
    variant: {
      'line': { line: 'border-t' },
      'gradient': { line: 'h-px bg-gradient-to-r from-transparent via-default to-transparent' },
      'dotted': { line: 'border-t border-dotted' },
      'branded': { line: 'h-px bg-gradient-to-r from-transparent via-primary to-transparent' }
    },
    spacing: {
      'sm': { root: 'my-4' },
      'md': { root: 'my-6' },
      'lg': { root: 'my-8' },
      'xl': { root: 'my-12' }
    },
    orientation: {
      'horizontal': { 
        root: 'w-full',
        line: 'w-full' 
      },
      'vertical': { 
        root: 'h-full flex-col',
        line: 'h-full border-l border-t-0' 
      }
    }
  },
  defaultVariants: {
    variant: 'line',
    spacing: 'md',
    orientation: 'horizontal'
  }
}))
</file>

<file path="theme/layout/frame.ts">
// theme/layout/frame.ts
import { createUIComponent } from '../../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: ['relative overflow-hidden']
  },
  variants: {
    variant: {
      'video': { 
        root: 'aspect-video' 
      },
      'square': { 
        root: 'aspect-square' 
      },
      'portrait': { 
        root: 'aspect-[3/4]' 
      },
      'wide': { 
        root: 'aspect-[21/9]' 
      },
      'golden': { 
        root: 'aspect-[1.618/1]' 
      },
      'tall': { 
        root: 'aspect-[9/16]' 
      },
      'cinema': { 
        root: 'aspect-[2.35/1]' 
      },
      'card': { 
        root: 'aspect-[4/3]' 
      }
    }
  },
  defaultVariants: {
    variant: 'video'
  }
}))
</file>

<file path="theme/layout/grid.ts">
// theme/layout/grid.ts
import { createUIComponent } from '../../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: ['grid']
  },
  variants: {
    variant: {
      'auto': { 
        root: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6' 
      },
      'thirds': { 
        root: 'grid-cols-1 md:grid-cols-3 gap-6' 
      },
      'halves': { 
        root: 'grid-cols-1 md:grid-cols-2 gap-6' 
      },
      'quarters': { 
        root: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4' 
      },
      'cards': { 
        root: 'grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-6' 
      },
      'compact': { 
        root: 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4' 
      },
      'wide': { 
        root: 'grid-cols-1 lg:grid-cols-2 gap-8' 
      },
      'masonry': { 
        root: 'columns-1 sm:columns-2 lg:columns-3 gap-6 space-y-6' 
      }
    }
  },
  defaultVariants: {
    variant: 'auto'
  }
}))
</file>

<file path="theme/layout/section.ts">
// theme/layout/section.ts
import { createUIComponent } from '../../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: ['w-full relative']
  },
  variants: {
    variant: {
      'default': { 
        root: 'py-16 lg:py-20' 
      },
      'compact': { 
        root: 'py-8 lg:py-12' 
      },
      'generous': { 
        root: 'py-20 lg:py-32' 
      },
      'hero': { 
        root: 'py-24 lg:py-40' 
      },
      'minimal': { 
        root: 'py-4 lg:py-6' 
      }
    }
  },
  defaultVariants: {
    variant: 'default'
  }
}))
</file>

<file path="theme/layout/spacer.ts">
// theme/spacer.ts
import { createUIComponent } from '../../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: 'block'
  },
  variants: {
    size: {
      'xs': { root: 'h-2' },
      'sm': { root: 'h-4' },
      'md': { root: 'h-8' },
      'lg': { root: 'h-12' },
      'xl': { root: 'h-16' },
      '2xl': { root: 'h-24' }
    },
    responsive: {
      true: {
        xs: { root: 'h-1 md:h-2' },
        sm: { root: 'h-2 md:h-4' },
        md: { root: 'h-4 md:h-8' },
        lg: { root: 'h-6 md:h-12' },
        xl: { root: 'h-8 md:h-16' },
        '2xl': { root: 'h-12 md:h-24' }
      }
    }
  },
  compoundVariants: [
    { responsive: true, size: 'xs', class: { root: 'h-1 md:h-2' } },
    { responsive: true, size: 'sm', class: { root: 'h-2 md:h-4' } },
    { responsive: true, size: 'md', class: { root: 'h-4 md:h-8' } },
    { responsive: true, size: 'lg', class: { root: 'h-6 md:h-12' } },
    { responsive: true, size: 'xl', class: { root: 'h-8 md:h-16' } },
    { responsive: true, size: '2xl', class: { root: 'h-12 md:h-24' } }
  ],
  defaultVariants: {
    size: 'md',
    responsive: true
  }
}))
</file>

<file path="theme/layout/split.ts">
// theme/layout/split.ts
import { createUIComponent } from '../../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: ['grid gap-8 items-center']
  },
  variants: {
    variant: {
      'default': { 
        root: 'lg:grid-cols-2 lg:gap-16' 
      },
      'narrow': { 
        root: 'lg:grid-cols-[1fr_0.8fr] lg:gap-12' 
      },
      'wide': { 
        root: 'lg:grid-cols-[1.2fr_1fr] lg:gap-20' 
      },
      'stack-lg': { 
        root: 'xl:grid-cols-2 xl:gap-16' 
      },
      'reverse': { 
        root: 'lg:grid-cols-2 lg:gap-16 flex flex-col-reverse lg:grid' 
      }
    }
  },
  defaultVariants: {
    variant: 'default'
  }
}))
</file>

<file path="theme/layout/stack.ts">
// theme/layout/stack.ts
import { createUIComponent } from '../../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: ['flex']
  },
  variants: {
    variant: {
      // Common vertical stacking patterns
      'default': { 
        root: 'flex-col gap-4 items-stretch justify-start' 
      },
      'centered': { 
        root: 'flex-col gap-4 items-center justify-center' 
      },
      'compact': { 
        root: 'flex-col gap-2 items-stretch justify-start' 
      },
      'spacious': { 
        root: 'flex-col gap-8 items-stretch justify-start' 
      },
      
      // Horizontal patterns  
      'horizontal': { 
        root: 'flex-row gap-4 items-center justify-start flex-wrap' 
      },
      'horizontal-between': { 
        root: 'flex-row gap-4 items-center justify-between flex-wrap' 
      },
      'horizontal-center': { 
        root: 'flex-row gap-4 items-center justify-center flex-wrap' 
      },
      
      // Responsive patterns
      'stack-to-row': { 
        root: 'flex-col gap-4 items-stretch md:flex-row md:items-center' 
      },
      'center-to-between': { 
        root: 'flex-col gap-4 items-center justify-center md:flex-row md:justify-between' 
      }
    }
  },
  defaultVariants: {
    variant: 'default'
  }
}))
</file>

<file path="theme/section/hero.ts">
// theme/hero.ts - FIXED VERSION
import { createUIComponent } from '../../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: [
      'relative',
      config.transitions && 'transition-all duration-300'
    ],
    container: 'w-full',
    content: 'w-full space-y-12',
    
    // Text content slots
    textSection: 'space-y-6',
    title: 'font-bold text-highlighted leading-tight',
    subtitle: 'text-muted leading-relaxed',
    description: 'text-dimmed leading-relaxed',
    
    // Media/Data section slots  
    mediaSection: 'flex items-center justify-center',
    imageContainer: 'relative overflow-hidden aspect-video w-full max-w-2xl mx-auto',
    
    // CTA section
    ctaSection: 'space-y-4',
    ctaDescription: 'text-sm text-dimmed',
  },
  variants: {
    layout: {
      // Traditional 2-column: text left, media right  
      'split': {
        root: 'py-16 lg:py-24',
        textSection: 'space-y-6 text-left',
        title: 'text-4xl lg:text-5xl',
        subtitle: 'text-xl',
        description: 'text-lg',
        mediaSection: 'w-full'
      },
      
      // Center-aligned with media below
      'centered': {
        root: 'py-20 lg:py-32',
        content: 'max-w-4xl mx-auto text-center space-y-12',
        textSection: 'space-y-6 text-center',
        title: 'text-5xl lg:text-6xl',
        subtitle: 'text-2xl max-w-3xl mx-auto',
        description: 'text-xl max-w-2xl mx-auto',
        mediaSection: 'w-full',
        ctaSection: 'space-y-4 text-center'
      },
      
      // Minimal center with CTA focus
      'minimal': {
        root: 'py-16 lg:py-20',
        content: 'max-w-3xl mx-auto text-center space-y-8',
        textSection: 'space-y-4 text-center',
        title: 'text-4xl lg:text-5xl',
        subtitle: 'text-lg',
        description: 'text-base',
        ctaSection: 'space-y-3 text-center'
      },
      
      // Full-width with background image/video
      'fullscreen': {
        root: 'min-h-screen flex items-center justify-center py-20',
        content: 'max-w-4xl mx-auto text-center space-y-8',
        textSection: 'space-y-6 text-center',
        title: 'text-6xl lg:text-7xl font-black',
        subtitle: 'text-2xl lg:text-3xl',
        description: 'text-xl',
        ctaSection: 'space-y-4 text-center'
      },
      
      // Compact for secondary pages
      'compact': {
        root: 'py-12 lg:py-16',
        content: 'max-w-3xl mx-auto text-center space-y-6',
        textSection: 'space-y-4 text-center',
        title: 'text-3xl lg:text-4xl',
        subtitle: 'text-lg',
        description: 'text-base',
        ctaSection: 'space-y-3 text-center'
      }
    },
    
    hasBackground: {
      true: { root: 'relative overflow-hidden' },
      false: { root: 'bg-transparent' }
    }
  },
  
  defaultVariants: {
    layout: 'centered',
    hasBackground: true
  }
}))
</file>

<file path="theme/anchor.ts">
// theme/layout/anchor.ts - ENHANCED WITH ACTIVE STATES
import { createUIComponent } from '../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: [
      'group relative scroll-mt-20',
      config.transitions && 'transition-colors duration-200'
    ],
    link: [
      'text-inherit no-underline block group-hover:text-primary',
      'relative focus-visible:outline-primary focus-visible:outline-2 focus-visible:outline-offset-2',
      config.transitions && 'transition-colors duration-200'
    ],
    icon: [
      'absolute opacity-0 group-hover:opacity-70 text-primary',
      'w-4 h-4 -left-6 top-0.5',
      config.transitions && 'transition-opacity duration-200'
    ],
    iconRight: [
      'absolute opacity-0 group-hover:opacity-70 text-primary',
      'w-3 h-3 -right-4 top-1',
      config.transitions && 'transition-opacity duration-200'
    ]
  },
  variants: {
    active: {
      true: { 
        link: 'text-primary',
        icon: 'opacity-100 text-primary',
        iconRight: 'opacity-100 text-primary'
      }
    }
  },
  defaultVariants: {
    active: false
  }
}))
</file>

<file path="theme/cta.ts">
// theme/cta.ts
import { createUIComponent } from '../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: [
      'relative rounded-2xl',
      config.transitions && 'transition-all duration-300 hover:shadow-lg'
    ],
    content: 'space-y-4',
    title: 'font-bold text-highlighted',
    subtitle: 'text-muted',
    actions: 'flex flex-col gap-3'
  },
  variants: {
    variant: {
      'inline': {
        root: 'flex gap-4 lg:gap-8 p-4 lg:p-8 justify-between items-center border border-muted bg-gradient-to-br from-primary/5 to-primary/10',
        content: 'flex-1'
      },
      'featured': {
        root: 'p-6 h-full flex flex-col justify-between border border-muted bg-elevated',
        content: 'flex-1'
      },
      'compact': {
        root: 'p-4 text-center border border-primary/20 hover:border-primary/30 bg-gradient-to-br from-primary/5 to-primary/10',
        title: 'text-lg',
        subtitle: 'text-sm'
      }
    }
  },
  defaultVariants: {
    variant: 'inline'
  }
}))
</file>

<file path="theme/heading.ts">
// theme/layout/heading.ts - CLEANED UP
import { createUIComponent } from '../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: [
      'font-heading leading-tight',
      config.transitions && 'transition-colors duration-200'
    ]
  },
  variants: {
    level: {
      1: { root: 'text-4xl lg:text-5xl font-bold' },
      2: { root: 'text-3xl lg:text-4xl font-semibold' },
      3: { root: 'text-2xl lg:text-3xl font-semibold' },
      4: { root: 'text-xl lg:text-2xl font-semibold' },
      5: { root: 'text-lg lg:text-xl font-semibold' },
      6: { root: 'text-base lg:text-lg font-semibold' }
    },
    
    variant: {
      'default': { root: 'text-highlighted' },
      'section': { root: 'text-highlighted' },
      'hero': { root: 'text-highlighted' },
      'hero-subtitle': { root: 'text-muted font-normal' },
      'card': { root: 'text-highlighted' },
      'muted': { root: 'text-muted' },
      'accent': { root: 'text-primary' }
    },
    
    align: {
      'left': { root: 'text-left' },
      'center': { root: 'text-center' },
      'right': { root: 'text-right' }
    }
  },
  
  compoundVariants: [
    { level: 1, variant: 'hero', class: { root: 'text-5xl lg:text-6xl xl:text-7xl' } },
    { variant: 'hero-subtitle', class: { root: 'text-xl lg:text-2xl' } }
  ],
  
  defaultVariants: { 
    level: 2, 
    variant: 'default',
    align: 'left'
  }
}))
</file>

<file path="theme/image.ts">
// theme/image.ts
import { createUIComponent } from '../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: [
      'relative overflow-hidden',
      config.transitions && 'transition-all duration-300'
    ],
    image: 'w-full h-full object-cover',
    placeholder: 'absolute inset-0 flex items-center justify-center bg-muted',
    error: 'absolute inset-0 flex flex-col items-center justify-center bg-red-50 text-red-600'
  },
  variants: {
    aspectRatio: {
      'square': { root: 'aspect-square' },
      'video': { root: 'aspect-video' },
      'portrait': { root: 'aspect-[3/4]' },
      'wide': { root: 'aspect-[21/9]' },
      'auto': { root: 'aspect-auto' }
    },
    objectFit: {
      'cover': { image: 'object-cover' },
      'contain': { image: 'object-contain' },
      'fill': { image: 'object-fill' },
      'none': { image: 'object-none' }
    },
    loading: {
      true: { root: 'animate-pulse bg-muted' },
      false: { root: '' }
    }
  },
  defaultVariants: {
    aspectRatio: 'auto',
    objectFit: 'cover',
    loading: false
  }
}))
</file>

<file path="theme/text.ts">
// theme/text.ts - NEW
import { createUIComponent } from '../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: [
      'leading-relaxed',
      config.transitions && 'transition-colors duration-200'
    ]
  },
  variants: {
    variant: {
      'default': { root: 'text-toned' },
      'subtitle': { root: 'text-muted text-xl lg:text-2xl font-medium' },
      'hero-subtitle': { root: 'text-muted text-2xl lg:text-3xl font-normal' },
      'description': { root: 'text-dimmed text-lg' },
      'caption': { root: 'text-dimmed text-sm' },
      'small': { root: 'text-dimmed text-sm' },
      'muted': { root: 'text-muted' },
      'highlighted': { root: 'text-highlighted font-medium' }
    },
    
    size: {
      'xs': { root: 'text-xs' },
      'sm': { root: 'text-sm' },
      'base': { root: 'text-base' },
      'lg': { root: 'text-lg' },
      'xl': { root: 'text-xl' },
      '2xl': { root: 'text-2xl' }
    },
    
    align: {
      'left': { root: 'text-left' },
      'center': { root: 'text-center' },
      'right': { root: 'text-right' },
      'justify': { root: 'text-justify' }
    }
  },
  
  compoundVariants: [
    // Subtitle variants get proper spacing
    { variant: 'subtitle', class: { root: 'mb-4' } },
    { variant: 'hero-subtitle', class: { root: 'mb-6' } },
    { variant: 'description', class: { root: 'mb-4' } },
    { variant: 'caption', class: { root: 'mb-2' } }
  ],
  
  defaultVariants: {
    variant: 'default',
    size: 'base',
    align: 'left'
  }
}))
</file>

<file path="theme/video.ts">
// theme/media.ts - SIMPLIFIED
import { createUIComponent } from '../shared/utils/theme'

export default createUIComponent(config => ({
  slots: {
    root: [
      'relative overflow-hidden bg-black',
      config.transitions && 'transition-all duration-300'
    ],
    video: 'w-full h-full object-cover',
    overlay: 'absolute inset-0 flex items-center justify-center',
    controls: [
      'absolute inset-0 flex items-center justify-center',
      'bg-black/20 hover:bg-black/40 cursor-pointer',
      config.transitions && 'transition-colors duration-200'
    ],
    loadingState: 'flex items-center justify-center text-white',
    errorState: 'flex flex-col items-center justify-center text-center p-6 text-white'
  },
  variants: {
    aspectRatio: {
      'square': { root: 'aspect-square' },
      'video': { root: 'aspect-video' },
      'portrait': { root: 'aspect-[3/4]' },
      'wide': { root: 'aspect-[21/9]' },
      'auto': { root: 'aspect-auto' }
    },
    loading: {
      true: { root: 'animate-pulse' },
      false: { root: '' }
    },
    error: {
      true: { root: 'bg-red-900/50' },
      false: { root: '' }
    }
  },
  defaultVariants: {
    aspectRatio: 'video',
    loading: false,
    error: false
  }
}))
</file>

<file path=".editorconfig">
# editorconfig.org
root = true

[*]
indent_size = 2
indent_style = space
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.md]
trim_trailing_whitespace = false
</file>

<file path="content.config.ts">
import { defineCollection, defineContentConfig, z } from '@nuxt/content'
import { asSeoCollection } from '@nuxtjs/seo/content'

export default defineContentConfig({
  collections: {
    blog: defineCollection(
      asSeoCollection({
        type: 'page',
        source: 'blog/**/*.md',
        schema: z.object({
          title: z.string(),
          description: z.string(),
          date: z.string(),
          category: z.enum([
            'ai-automation',
            'business-automation',
            'space-tech',
            'future-ai',
            'company-culture',
          ]),
          author: z.string().default('Incubrain Team'),
          readTime: z.string().optional(),
          featured: z.boolean().default(false),
          tags: z.array(z.string()).optional(),
          image: z.string().optional(),
          // Sitemap-specific fields
          sitemap: z
            .object({
              lastmod: z.string().optional(),
              changefreq: z
                .enum(['always', 'hourly', 'daily', 'weekly', 'monthly', 'yearly', 'never'])
                .optional(),
              priority: z.number().min(0).max(1).optional(),
            })
            .optional(),
        }),
      }),
    ),

    pages: defineCollection(
      asSeoCollection({
        type: 'page',
        source: {
          include: 'pages/**/*.md',
          prefix: '/',
        },
        schema: z.object({
          title: z.string(),
          subtitle: z.string(),
          description: z.string(),
          sections: z.array(z.string()).optional(), // Array of section references
          keywords: z.array(z.string()).optional(),
          searchSections: z
            .array(
              z.object({
                id: z.string(),
                title: z.string(),
                content: z.string(),
              }),
            )
            .optional(),
          searchContent: z.string().optional(),
          aiContext: z.string().optional(),
          componentList: z.array(z.string()).optional(),
        }),
      }),
    ),

    sections: defineCollection({
      type: 'page', 
      source: 'sections/**/*.md',
      schema: z.object({
        sectionName: z.string(),
        agentSummary: z.string(),
        variants: z.record(z.object({
          intent: z.string(),
          emotion: z.string()
        })).optional()
      })
    }),

    seoSchemas: defineCollection({
      type: 'data',
      source: 'seo/schemas/**/*.yml',
      schema: z.object({
        schema: z.record(z.any()),
      })
    }),

    faq: defineCollection({
      type: 'data',
      source: 'faq/**/*.yaml',
      schema: z.object({
        faqs: z.array(z.object({
          question: z.string(),
          answer: z.string(),
          keywords: z.array(z.string()).optional(),
          priority: z.number().optional()
        }))
      })
    }),

    // NEW: Single unified SEO config
    seoConfig: defineCollection({
      type: 'data', 
      source: 'seo/config.yml',
      schema: z.object({
        meta: z.record(z.any()),
        defaults: z.record(z.any()),
        pages: z.record(z.any()),
        contentTypes: z.record(z.any()).optional()
      })
    }),

    config: defineCollection({
      type: 'data',
      source: 'config/**/*.yml',
      schema: z.object({data: z.record(z.any())}),
    }),
  },
})
</file>

<file path="eslint.config.mjs">
// @ts-check
import withNuxt from './.nuxt/eslint.config.mjs'

export default withNuxt(
  // Your custom configs here
)
</file>

<file path=".npmrc">
# Needed to resolve tailwind when using pnpm
shamefully-hoist=true
</file>

<file path="tsconfig.json">
{
  // https://nuxt.com/docs/guide/concepts/typescript
  "files": [],
  "references": [
    {
      "path": "./.nuxt/tsconfig.app.json"
    },
    {
      "path": "./.nuxt/tsconfig.server.json"
    },
    {
      "path": "./.nuxt/tsconfig.shared.json"
    },
    {
      "path": "./.nuxt/tsconfig.node.json"
    }
  ]
}
</file>

<file path=".gitignore">
# Nuxt dev/build outputs
.output
.data
.nuxt
.nitro
.cache
dist

# Node dependencies
node_modules

# Logs
logs
*.log

# Misc
.DS_Store
.fleet
.idea

# Local env files
.env
.env.*
!.env.example
</file>

<file path="README.md">
# Nuxt Minimal Starter

Look at the [Nuxt documentation](https://nuxt.com/docs/getting-started/introduction) to learn more.

## Setup

Make sure to install dependencies:

```bash
# npm
npm install

# pnpm
pnpm install

# yarn
yarn install

# bun
bun install
```

## Development Server

Start the development server on `http://localhost:3000`:

```bash
# npm
npm run dev

# pnpm
pnpm dev

# yarn
yarn dev

# bun
bun run dev
```

## Production

Build the application for production:

```bash
# npm
npm run build

# pnpm
pnpm build

# yarn
yarn build

# bun
bun run build
```

Locally preview production build:

```bash
# npm
npm run preview

# pnpm
pnpm preview

# yarn
yarn preview

# bun
bun run preview
```

Check out the [deployment documentation](https://nuxt.com/docs/getting-started/deployment) for more information.
</file>

<file path="server/tsconfig.json">
{
  "extends": "../.nuxt/tsconfig.server.json"
}
</file>

<file path="app.config.ts">
export default defineAppConfig({
  ui: {
    // This will be powerful for theming
    // theme: {
    //   defaultVariants: {
    //     color: 'neutral',
    //     size: 'sm'
    //   }
    // },
    colors: {
      primary: 'emerald',
      secondary: 'sky',
      neutral: 'zinc',
    },
    link: {
      base: 'focus-visible:outline-secondary-800',
      variants: {
        active: {
          true: 'text-secondary',
          false: 'text-muted',
        },
      },
      compoundVariants: [
        {
          active: false,
          disabled: false,
          class: ['hover:text-secondary-800', 'transition-colors'],
        },
      ],
    },
    carousel: {
      slots: {
        root: 'relative focus:outline-none',
        viewport: 'overflow-hidden',
        container: 'flex items-center -ms-4',
        item: 'min-w-0 shrink-0 basis-full ps-4 transition-all duration-300',
        controls: '',
        arrows: '',
        prev: 'absolute start-4 top-1/2 -translate-y-1/2',
        next: 'absolute end-4 top-1/2 -translate-y-1/2',
        dots: 'absolute inset-x-0 -bottom-7 flex items-center justify-center gap-3',
        dot: 'cursor-pointer size-3 bg-gray-400 rounded-full transition-colors data-[active=true]:bg-accented',
      },
      variants: {
        orientation: {
          horizontal: {
            container: 'flex-row -ms-4',
            item: 'ps-4',
            prev: 'start-4 sm:-start-12 top-1/2 -translate-y-1/2',
            next: 'end-4 sm:-end-12 top-1/2 -translate-y-1/2',
          },
          vertical: {
            container: 'flex-col -mt-4',
            item: 'pt-4',
            prev: 'top-4 sm:-top-12 left-1/2 -translate-x-1/2 rotate-90 rtl:-rotate-90',
            next: 'bottom-4 sm:-bottom-12 left-1/2 -translate-x-1/2 rotate-90 rtl:-rotate-90',
          },
        },
        active: {
          true: {
            dot: 'data-[state=active]:bg-inverted',
          },
        },
        profile: {
          gallery: {
            item: 'basis-full md:basis-1/2 lg:basis-1/3 transition-all duration-300 [&:last-child]:mr-[1rem]',
            container: 'flex items-center gap-4',
          },
          hero: {
            item: 'basis-full transition-all duration-300 [&:last-child]:mr-[1rem]',
            container: 'flex items-center',
          },
          thumbnail: {
            item: 'basis-1/4 md:basis-1/6 transition-all duration-300 [&:last-child]:mr-[0.5rem]',
            container: 'flex items-center gap-2',
          },
        },
      },
      defaultVariants: {
        orientation: 'horizontal',
        profile: 'hero',
      },
    },
  },
})
</file>

<file path="nuxt.config.ts">
// https://nuxt.com/docs/api/configuration/nuxt-config
import { loadBusinessConfig } from './shared/utils/load-config'
const businessConfig = loadBusinessConfig()

export default defineNuxtConfig({
  compatibilityDate: '2025-07-15',
  devtools: { enabled: true },

  modules: [
    // must come before nuxt/content
    '@nuxtjs/seo',
    '@nuxt/content',
    '@nuxt/eslint',
    '@nuxt/fonts',
    '@nuxt/image',
    '@nuxt/ui',
    '@vueuse/nuxt',
    '@vueuse/motion/nuxt',
    '@compodium/nuxt',
  ],

  eslint: {
    config: {
      // replaces need for prettier
      // configure - https://github.com/eslint-stylistic/eslint-stylistic/blob/main/packages/eslint-plugin/configs/customize.ts
      // all rules - https://eslint.style/rules#rules
      stylistic: {
        indent: 2, // 2 spaces (standard)
        quotes: 'single', // Single quotes (cleaner)
        semi: false, // No semicolons (modern JS)
        arrowParens: false, // (x) => x vs (x) => x
        blockSpacing: true, // { code } vs {code}
        braceStyle: 'stroustrup', // else on new line
        commaDangle: 'always-multiline', // Trailing commas for multiline
        jsx: true, // Vue JSX support
        severity: 'error', // Auto-fix required
        quoteProps: 'consistent-as-needed', // Object property quotes
      },
    },
  },

  routeRules: {
    // Homepage - Pre-rendered at build time (fastest loading)
    '/': { prerender: true },

    // Blog index - ISR with 1 hour cache (balance of fresh content + speed)
    '/blog': { isr: 3600 },
    // // Blog posts - ISR (cache until next deploy, perfect for content)
    '/blog/**': { isr: true },

    // API routes - Server-side only
    '/api/blog/**': {
      cache: { maxAge: 60 * 10 },
      headers: { 'cache-control': 's-maxage=600' },
    },
  },

  

  sitemap: {
    sources: [
      '/api/__sitemap__/urls', // Our custom blog endpoint
    ],
    excludeAppSources: ['nuxt:route-rules'], // Keep pages, exclude unnecessary
    cacheMaxAgeSeconds: 3600, // 1 hour cache
  },

  robots: {
    // Block in development for safety
    disallow: process.env.NODE_ENV === 'development' ? ['/'] : [],

    // Reference our sitemap
    sitemap: ['/sitemap.xml'],

    // Block non-SEO bots (scrapers, etc.) but allow AI crawlers
    blockNonSeoBots: true,
    blockAiBots: false, // Allow AI crawlers like GPTBot, Claude, etc.

    // Future considerations (commented for now):
    // TODO: Add staging environment blocking when needed
  },

  site: {
    url: `https://${businessConfig.business.name.toLowerCase()}.org`,
    name: businessConfig.business.name,
    description: businessConfig.business.description
  },

  schemaOrg: {
    debug: true,
  },

  imports: {
    dirs: [
      '~~/theme/*.ts',
    ]
  },

  ogImage: {
    defaults: {
      component: 'Nuxt', // Use the modern Nuxt template
      renderer: 'satori', // Fast, works everywhere
      extension: 'png', // Good compatibility
      width: 1200,
      height: 630,
      emojis: 'twemoji', // Good emoji support
    },
  },

  // build: {
  //   transpile: [
  //     "embla-carousel-vue",
  //     "embla-carousel-autoplay",
  //     "embla-carousel-auto-scroll",
  //   ],
  // },

  //   hooks: {
  //     'content:file:afterParse'(ctx) {
  //       if (ctx.file.id.startsWith('pages/')) {
  //         console.log('🔍 Processing file:', ctx.file.id)
  //         console.log('🔍 Body structure:', ctx.content.body)
  //
  //         const components = extractMDCComponents(ctx.content.body)
  //         console.log('🔍 Extracted components:', components)
  //
  //         // FIX: Pass componentName not component object
  //         const searchSections = components.map((componentName) => {
  //           // Find the actual component data for this name
  //           const componentData = findComponentData(ctx.content.body, componentName)
  //           const props = extractComponentProps(componentData)
  //           return extractSearchFromProps(componentName, props) // ✅ CORRECT
  //         })
  //
  //         console.log('🔍 Generated search sections:', searchSections)
  //         ctx.content.searchSections = searchSections
  //       }
  //     },
  //   },

  debug: true,
  typescript: {
    typeCheck: true, // Enable build-time type checking
    strict: true, // Keep strict mode
  },

  content: {
    build: {
      markdown: {
        // Enhanced TOC for article navigation
        toc: {
          depth: 4,
          searchDepth: 4,
        },

        highlight: {
          theme: {
            default: 'github-dark',
            dark: 'github-dark',
            light: 'github-light',
          },
          langs: [
            // Default languages
            'json',
            'js',
            'ts',
            'html',
            'css',
            'vue',
            'shell',
            'mdc',
            'md',
            'yaml',
            // Additional languages
            'python',
            'sql',
            'bash',
            'dockerfile',
            'nginx',
            'apache',
            'r',
            'toml',
            'mermaid',
            'javascript',
            'typescript', // Add these explicitly
          ],
        },
      },
    },

    renderer: {
      anchorLinks: {
        h1: false,
        h2: true,
        h3: true,
        h4: true,
        h5: false,
        h6: false,
      },

      alias: {
        callout: 'Callout',
        alert: 'Alert',
        h1: 'ProseH1',
        h2: 'ProseH2',
        h3: 'ProseH3',
        h4: 'ProseH4',
        p: 'ProseP',
        a: 'ProseA',
        strong: 'ProseStrong',
        ul: 'ProseUl',
        ol: 'ProseOl',
        li: 'ProseLi',
        code: 'ProseCode',
        em: 'ProseEm',
        blockquote: 'ProseBlockquote',
      },
    },

    watch: {
      enabled: true,
      port: 4000,
      showURL: false,
    },
  },

  fonts: {
    families: [
      { name: 'Outfit', provider: 'google' },
      { name: 'IBM Plex Sans', provider: 'google' },
      { name: 'JetBrains Mono', provider: 'google' },
    ],
  },

  seo: {
    fallbackTitle: true,
    // Automatic canonical URLs (already working)
    canonicalLowercase: true,
    canonicalQueryWhitelist: ['page', 'sort', 'filter', 'search', 'q'],

    // Global SEO meta defaults
    meta: {
      author: 'Incubrain Team',
      themeColor: [
        { content: '#18181B', media: '(prefers-color-scheme: dark)' },
        { content: '#10B981', media: '(prefers-color-scheme: light)' },
      ],
      colorScheme: 'dark light',
      applicationName: 'Incubrain',
    },
  },

  app: {
    pageTransition: {
      name: 'page',
      mode: 'out-in',
    },
    layoutTransition: {
      name: 'layout',
      mode: 'out-in',
    },
  },

  experimental: {
    defaults: {
      nuxtLink: {
        externalRelAttribute: 'noopener noreferrer',
        // Add target="_blank" for external links automatically
        prefetch: false,
        prefetchOn: { interaction: true },
        trailingSlash: 'remove',
      },
    },
  },

  css: ['~/assets/css/main.css', '~/assets/css/motion.css'],

  icon: {
    aliases: {
      'arrow-left': 'i-lucide-arrow-left',
      'arrow-right': 'i-lucide-arrow-right',
      'check': 'i-lucide-check',
      'close': 'i-lucide-x',
      'search': 'i-lucide-search',
    },
  },

  nitro: {
    debug: true,
    prerender: {
      crawlLinks: true,
      routes: ['/'],
    },
  },

  

  runtimeConfig: {
    public: {
      business: businessConfig.business,
      contact: businessConfig.contact,
      services: businessConfig.services,
      motion: {
        directives: {
          // SMB-focused: Smooth, trustworthy animations
          'fade-up': {
            initial: { opacity: 0, y: 30 },
            visible: {
              opacity: 1,
              y: 0,
              transition: { duration: 600, ease: 'easeOut' },
            },
          },
          'scale-in': {
            initial: { opacity: 0, scale: 0.95 },
            visible: {
              opacity: 1,
              scale: 1,
              transition: { duration: 400, ease: 'easeOut' },
            },
          },

          // Technical Builder-focused: Precise, sophisticated
          'tech-slide': {
            initial: { opacity: 0, y: 20, filter: 'blur(4px)' },
            visible: {
              opacity: 1,
              y: 0,
              filter: 'blur(0px)',
              transition: { duration: 800, ease: 'circOut' },
            },
          },
          'matrix-appear': {
            initial: { opacity: 0, scale: 0.8, rotateX: -15 },
            visible: {
              opacity: 1,
              scale: 1,
              rotateX: 0,
              transition: { type: 'spring', stiffness: 150, damping: 12 },
            },
          },
        },
      },
    },
  },
})
</file>

<file path="package.json">
{
  "name": "nuxt-app",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "nuxt build",
    "dev": "nuxt dev",
    "generate": "nuxt generate",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix"
  },
  "dependencies": {
    "@nuxt/content": "3.6.3",
    "@nuxt/eslint": "1.5.2",
    "@nuxt/image": "1.10.0",
    "@nuxt/scripts": "0.11.9",
    "@nuxt/test-utils": "3.19.2",
    "@nuxt/ui": "3.2.0",
    "@nuxtjs/seo": "^3.1.0",
    "@unhead/vue": "^2.0.12",
    "better-sqlite3": "^12.2.0",
    "eslint": "^9.31.0",
    "mermaid": "^11.8.1",
    "nuxt": "^4.0.1",
    "typescript": "^5.8.3",
    "vue": "^3.5.17",
    "vue-router": "^4.5.1",
    "yaml": "^2.8.0"
  },
  "devDependencies": {
    "@compodium/nuxt": "0.1.0-beta.11",
    "@iconify-json/lucide": "^1.2.54",
    "@iconify-json/mdi": "^1.2.3",
    "@stylistic/eslint-plugin": "^5.2.0",
    "@types/node": "^20.19.8",
    "@vueuse/motion": "^3.0.3",
    "@vueuse/nuxt": "13.4.0",
    "vue-tsc": "^3.0.1"
  },
  "packageManager": "pnpm@9.15.4+sha512.b2dc20e2fc72b3e18848459b37359a32064663e5627a51e4c74b2c29dd8e8e0491483c3abb40789cfd578bf362fb6ba8261b05f0387d76792ed6e23ea3b1b6a0"
}
</file>

</files>
